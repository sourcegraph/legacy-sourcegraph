import { join, basename } from 'node:path'

import staticAdapter from '@sveltejs/adapter-static'
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'

/** @type {import('@sveltejs/kit').Adapter} */
let adapter
// The default app template
let appTemplate = 'src/app.html'

// This needs to be set to the path where the Sourcegraph backend
// will serve the SvelteKit files from to make SvelteKit's version
// check work correctly.
let appDir = '_app'
let out = process.env.BUILD_DIR ?? 'build/'

if (process.env.BAZEL || process.env.DEPLOY_TYPE === 'dev') {
  // Setup to use when seving the app from the Sourcegraph backend

  // This needs to be set to the path where the Sourcegraph backend
  // will serve the SvelteKit files from to make SvelteKit's version
  // check work correctly.
  appDir = '.assets/_sk/_app'

  // This template includes Go template syntax and is used by the Sourcegraph
  // backend to inject additional data into the HTML page.
  appTemplate = 'src/app.prod.html'

  if (process.env.E2E_BUILD) {
    // In the e2e build, we will be serving static HTML files
    // so there won't be a server templating the index file
    appTemplate = 'src/app.html'
  }

  if (!process.env.BAZEL || process.env.DEPLOY_TYPE === 'dev') {
    // When DEPLOY_TYPE is set to 'dev' we copy output files to the
    // 'assets' folder where the web server reads them from
    out = '../../client/web/dist/'
  }

  // The folder to write the production files to.
  // We store the files in a separate folder to avoid any conflicts
  // with files generated by the web builder.
  const OUTPUT_DIR = '_sk'

  adapter = sgAdapter({
    out: join(out, OUTPUT_DIR),
    // Path from which the web server will serve the SvelteKit files
    appDir: basename(appDir),
  })
} else {
  // Default, standalone setup
  adapter = staticAdapter({ fallback: 'index.html', pages: out })
}

/** @type {import('@sveltejs/kit').Config} */
const config = {
  // Consult https://kit.svelte.dev/docs/integrations#preprocessors
  // for more information about preprocessors
  preprocess: vitePreprocess(),

  vitePlugin: {
    inspector: {
      showToggleButton: 'always',
      toggleButtonPos: 'bottom-right',
    },
  },

  onwarn: (warning, defaultHandler) => {
    // When run as part of sg, don't show any warnings to keep the noise down
    if (process.env.DEPLOY_TYPE === 'dev') return

    // The Svelte compiler doesn't seem to respect ambient declarations, and thus
    // emits warnings about missing declarations for our icon variables.
    // We can safely ignore these warnings, TypeScript will catch any actual errors.
    if (warning.code === 'missing-declaration') return
    defaultHandler(warning)
  },

  kit: {
    adapter,
    appDir,
    alias: {
      // Makes it easier to refer to files outside packages (such as images)
      $root: '../../',
      // Used inside tests for easy access to helpers
      $testing: 'src/testing',
      // Map node-module to browser version
      path: '../../node_modules/path-browserify',
    },
    typescript: {
      config: config => {
        config.extends = '../../../tsconfig.base.json'
        config.include = [...(config.include ?? []), '../src/**/*.tsx', '../.storybook/*.ts', '../dev/**/*.ts']
      },
    },
    paths: {
      relative: true,
    },
    files: {
      appTemplate,
    },
  },
}

export default config

/**
 * This adapter wraps `@sveltejs/adapter-static`.
 * In addition to copying the generate client code this adapater also
 * moves the client to the correct location in the output directory
 * to work properly with the Sourcegraph backend.
 *
 * Longer explanation:
 *
 * SvelteKit uses a version file to determine whether to current page
 * is up-to-date. It loads the file from /<app-dir>/version.
 * This means `appDir` must be set to the correct path used by the
 * Sourcegraph backend, which is /.assets/_sk/_app.
 * This however will also cause all other generated client files to
 * be stored in a subdirectory with the same name. I.e. the paths
 * for JS files would be /.assets/_sk/.assets/_sk/_app instead of
 * the desired /.assets/_sk/_app.
 *
 * This adapater moves the client files to the correct location.
 *
 * @returns {import('@sveltejs/kit').Adapter}
 */
function sgAdapter(options) {
  return {
    name: 'sg adapter',
    /**
     * @param builder {import('@sveltejs/kit').Builder}
     */
    async adapt(builder) {
      const out = options.out || 'build'
      const appPath = builder.getAppPath()
      const adapter = staticAdapter({ fallback: 'index.html', pages: out })
      await adapter.adapt(builder)

      // Without this assets would be located at /.assets/_sk/.assets/_sk/_app instead of /.assets/_sk/_app
      builder.copy(join(out, appPath), join(out, options.appDir))
      builder.rimraf(join(out, appPath))
    },
  }
}
