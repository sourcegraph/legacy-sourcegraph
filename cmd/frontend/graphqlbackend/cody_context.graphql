extend type Query {
    """
    EXPERIMENTAL: Get pieces of context related to the query from a set of repositories.
    """
    getCodyContext(
        """
        The repositories to search.
        """
        repos: [ID!]!
        """
        A natural language query string.
        """
        query: String!
        """
        The number of code results to return.
        """
        codeResultsCount: Int!
        """
        The number of text results to return. Text results contain Markdown files and similar file types primarily used for writing documentation.
        """
        textResultsCount: Int!
    ): [CodyContextResult!]!

    """
    EXPERIMENTAL: Detect intent for a given Cody chat query.
    """
    chatIntent(
        """
        A natural language query string.
        """
        query: String!
        """
        Cody interaction ID - used to join requests for intent detection/context fetching/ranking.
        """
        interactionId: String!
    ): ChatIntentResponse!

    """
    EXPERIMENTAL: Rank context items for given Cody chat query. Returns indices of input context items ordered by relevance.
    """
    rankContext(
        """
        Cody interaction ID.
        """
        interactionId: String!
        """
        Context items to rank.
        """
        contextItems: [InputContextItem!]!
        """
        A natural language query string.
        """
        query: String!
        """
        Ranking options.
        """
        rankOptions: RankOptions
        """
        Target model.
        """
        targetModel: String
        """
        Target context window, in tokens.
        """
        targetContextWindowTokens: Int
        """
        Intent of Cody interaction. If empty, server will detect it (or look it up using interaction ID).
        """
        intent: String
        """
        Type of Command executed in a given Cody interaction. Empty value means it's an open-ended Chat.
        """
        command: String
    ): RankingResponse!

    """
    EXPERIMENTAL: Stores context passed to the LLM for a given interaction.
    """
    recordContext(
        """
        Interaction ID.
        """
        interactionId: String!
        """
        Context items that were passed to the LLM.
        """
        usedContextItems: [InputContextItem!]!
        """
        Context items that were not passed to the LLM.
        """
        ignoredContextItems: [InputContextItem!]!
    ): EmptyResponse
}

"""
EXPERIMENTAL: A single piece of context. It's defined as a union so we can
return other types of context in the future (think code intel definition
or wiki page).
"""
union CodyContextResult = FileChunkContext

"""
A piece of context that represents a chunk of a file in a git repository
"""
type FileChunkContext {
    """
    The git blob this file is associated with
    """
    blob: GitBlob!
    """
    The start line of the relevant chunk (inclusive).
    """
    startLine: Int!
    """
    The end line of the relevant chunk (exclusive).
    """
    endLine: Int!
    """
    The relevant content of the file from start line to end line.
    """
    chunkContent: String!
}

"""
EXPERIMENTAL: A response from Cody Chat intent detection API.
"""
type ChatIntentResponse {
    """
    Intent that was detected
    """
    intent: String!
    """
    Confidence score as assigned by the intent detection model
    """
    score: Float!
}
"""
EXPERIMENTAL: Representation of a context item used as API param (doesn't have to support full metadata available on the client).
"""
input InputContextItem {
    """
    Content of the context item.
    """
    content: String!
    """
    Retriever that produced this item
    """
    retriever: String!
    """
    Optional: score assigned by the retriever.
    """
    score: Float
    """
    Optional: Name of the file associated with this context item.
    """
    fileName: String
    """
    The start line of the relevant chunk (inclusive).
    """
    startLine: Int
    """
    The end line of the relevant chunk (exclusive).
    """
    endLine: Int
}

"""
Options for context ranking.
"""
input RankOptions {
    """
    Ranker to use for context ranking. Empty value means "server decides".
    """
    ranker: String!
}

"""
Response from the ranker - contains reordered indices of context items pass as input, but not full context items.
"""
type RankingResponse {
    """
    Ranker used to produce this response.
    """
    ranker: String!
    """
    Indices of context items that were used by the ranker, ordered by decreasing relevance.
    """
    used: [Int!]!
    """
    Indices of context items that were ignored by the ranker. Order is undefined.
    """
    ignored: [Int!]!
}
