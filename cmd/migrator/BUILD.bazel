load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_push", "oci_tarball")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@container_structure_test//:defs.bzl", "container_structure_test")
load("//dev:oci_defs.bzl", "image_repository")

go_library(
    name = "migrator_lib",
    srcs = ["main.go"],
    importpath = "github.com/sourcegraph/sourcegraph/cmd/migrator",
    visibility = ["//visibility:private"],
    deps = [
        "//cmd/migrator/shared",
        "//internal/env",
        "//internal/oobmigration/migrations/register",
        "//internal/sanitycheck",
        "//internal/version",
        "@com_github_sourcegraph_log//:log",
    ],
)

go_binary(
    name = "migrator",
    embed = [":migrator_lib"],
    visibility = ["//visibility:public"],
    x_defs = {
        "github.com/sourcegraph/sourcegraph/internal/version.version": "{STABLE_VERSION}",
        "github.com/sourcegraph/sourcegraph/internal/version.timestamp": "{VERSION_TIMESTAMP}",
    },
)

# This rule builds a tarball of the database schema descriptions that only contains the current database schema
# description. It's used by the normal variant of cmd/migrator, which is reaches out to the GitHub repository
# to find the missing schema descriptions.
#
# Air gapped customers should use the migrator-airgapped variant instead, see :image_airgapped.
genrule(
    name = "tar_current_schema_descriptions",
    srcs = [
        "//internal/database:schema.json",
        "//internal/database:schema.codeinsights.json",
        "//internal/database:schema.codeintel.json",
    ],
    outs = ["current_schema_description.tar"],
    cmd = """\
    if grep -q "STABLE_VERSION" bazel-out/stable-status.txt; then
        # When we're stamping, we can find the current version in the stable-status.
        version="v$$(cat bazel-out/stable-status.txt | grep STABLE_VERSION | cut -d' ' -f2)"
    else
        # When not, usually during local development, we just use dev instead.
        version="dev"
    fi
    mkdir -p schema-descriptions/
    cp $(location //internal/database:schema.json) schema-descriptions/$${version}-internal_database_schema.json
    cp $(location //internal/database:schema.codeinsights.json) schema-descriptions/$${version}-internal_database_schema.codeinsights.json
    cp $(location //internal/database:schema.codeintel.json) schema-descriptions/$${version}-internal_database_schema.codeintel.json

    if tar --version | grep -q bsdtar; then
        tar -cf $@ --uid=0 --gid=0 --numeric-owner schema-descriptions/
    else
        tar -cf $@ --owner=:0 --group=:0 --numeric-owner schema-descriptions/
    fi
    """,
    stamp = 1,
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "tar_migrator",
    srcs = [":migrator"],
)

oci_image(
    name = "image",
    base = "@wolfi_base",
    entrypoint = [
        "/sbin/tini",
        "--",
        "/migrator",
    ],
    tars = [
        ":tar_migrator",
        ":tar_current_schema_descriptions",
    ],
    user = "sourcegraph",
)

oci_image(
    name = "image_airgapped",
    base = "@wolfi_base",
    entrypoint = [
        "/sbin/tini",
        "--",
        "/migrator",
    ],
    tags = ["manual"],
    tars = [
        ":tar_migrator",
        ":tar_current_schema_descriptions",
        "//cmd/migrator/airgappedgen:tar_schema_descriptions",
    ],
    user = "sourcegraph",
)

oci_tarball(
    name = "image_tarball",
    image = ":image",
    repo_tags = ["migrator:candidate"],
)

oci_tarball(
    name = "image_airgapped_tarball",
    image = ":image_airgapped",
    repo_tags = ["migrator:candidate"],
)

container_structure_test(
    name = "image_test",
    timeout = "short",
    configs = ["image_test.yaml"],
    driver = "docker",
    image = ":image",
    tags = [
        "exclusive",
        "requires-network",
    ],
)

container_structure_test(
    name = "image_airgapped_test",
    timeout = "short",
    configs = ["image_airgapped_test.yaml"],
    driver = "docker",
    image = ":image_airgapped",
    tags = [
        "exclusive",
        "requires-network",
    ],
)

oci_push(
    name = "candidate_push",
    image = ":image",
    repository = image_repository("migrator"),
)

oci_push(
    name = "airgapped_candidate_push",
    image = ":image_airgapped",
    repository = image_repository("migrator-airgapped"),
)
