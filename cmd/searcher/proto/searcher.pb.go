// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: searcher.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo         string       `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	RepoId       int32        `protobuf:"varint,2,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	CommitOid    string       `protobuf:"bytes,3,opt,name=commit_oid,json=commitOid,proto3" json:"commit_oid,omitempty"`
	Indexed      bool         `protobuf:"varint,4,opt,name=indexed,proto3" json:"indexed,omitempty"`
	PatternInfo  *PatternInfo `protobuf:"bytes,5,opt,name=pattern_info,json=patternInfo,proto3" json:"pattern_info,omitempty"`
	Url          string       `protobuf:"bytes,16,opt,name=url,proto3" json:"url,omitempty"`
	Branch       string       `protobuf:"bytes,17,opt,name=branch,proto3" json:"branch,omitempty"`
	FetchTimeout string       `protobuf:"bytes,18,opt,name=fetch_timeout,json=fetchTimeout,proto3" json:"fetch_timeout,omitempty"`
	FeatHybrid   bool         `protobuf:"varint,19,opt,name=feat_hybrid,json=featHybrid,proto3" json:"feat_hybrid,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_searcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_searcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_searcher_proto_rawDescGZIP(), []int{0}
}

func (x *SearchRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *SearchRequest) GetRepoId() int32 {
	if x != nil {
		return x.RepoId
	}
	return 0
}

func (x *SearchRequest) GetCommitOid() string {
	if x != nil {
		return x.CommitOid
	}
	return ""
}

func (x *SearchRequest) GetIndexed() bool {
	if x != nil {
		return x.Indexed
	}
	return false
}

func (x *SearchRequest) GetPatternInfo() *PatternInfo {
	if x != nil {
		return x.PatternInfo
	}
	return nil
}

func (x *SearchRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SearchRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SearchRequest) GetFetchTimeout() string {
	if x != nil {
		return x.FetchTimeout
	}
	return ""
}

func (x *SearchRequest) GetFeatHybrid() bool {
	if x != nil {
		return x.FeatHybrid
	}
	return false
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileMatch   *FileMatch `protobuf:"bytes,1,opt,name=file_match,json=fileMatch,proto3" json:"file_match,omitempty"`
	LimitHit    bool       `protobuf:"varint,2,opt,name=limit_hit,json=limitHit,proto3" json:"limit_hit,omitempty"`
	DeadlineHit bool       `protobuf:"varint,3,opt,name=deadline_hit,json=deadlineHit,proto3" json:"deadline_hit,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_searcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_searcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_searcher_proto_rawDescGZIP(), []int{1}
}

func (x *SearchResponse) GetFileMatch() *FileMatch {
	if x != nil {
		return x.FileMatch
	}
	return nil
}

func (x *SearchResponse) GetLimitHit() bool {
	if x != nil {
		return x.LimitHit
	}
	return false
}

func (x *SearchResponse) GetDeadlineHit() bool {
	if x != nil {
		return x.DeadlineHit
	}
	return false
}

type FileMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string        `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ChunkMatches []*ChunkMatch `protobuf:"bytes,2,rep,name=chunk_matches,json=chunkMatches,proto3" json:"chunk_matches,omitempty"`
	LimitHit     bool          `protobuf:"varint,3,opt,name=limit_hit,json=limitHit,proto3" json:"limit_hit,omitempty"`
}

func (x *FileMatch) Reset() {
	*x = FileMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_searcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMatch) ProtoMessage() {}

func (x *FileMatch) ProtoReflect() protoreflect.Message {
	mi := &file_searcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMatch.ProtoReflect.Descriptor instead.
func (*FileMatch) Descriptor() ([]byte, []int) {
	return file_searcher_proto_rawDescGZIP(), []int{2}
}

func (x *FileMatch) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileMatch) GetChunkMatches() []*ChunkMatch {
	if x != nil {
		return x.ChunkMatches
	}
	return nil
}

func (x *FileMatch) GetLimitHit() bool {
	if x != nil {
		return x.LimitHit
	}
	return false
}

type ChunkMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      string    `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ContentStart *Location `protobuf:"bytes,2,opt,name=content_start,json=contentStart,proto3" json:"content_start,omitempty"`
	Ranges       []*Range  `protobuf:"bytes,3,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *ChunkMatch) Reset() {
	*x = ChunkMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_searcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkMatch) ProtoMessage() {}

func (x *ChunkMatch) ProtoReflect() protoreflect.Message {
	mi := &file_searcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkMatch.ProtoReflect.Descriptor instead.
func (*ChunkMatch) Descriptor() ([]byte, []int) {
	return file_searcher_proto_rawDescGZIP(), []int{3}
}

func (x *ChunkMatch) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChunkMatch) GetContentStart() *Location {
	if x != nil {
		return x.ContentStart
	}
	return nil
}

func (x *ChunkMatch) GetRanges() []*Range {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *Location `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *Location `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_searcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_searcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_searcher_proto_rawDescGZIP(), []int{4}
}

func (x *Range) GetStart() *Location {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Range) GetEnd() *Location {
	if x != nil {
		return x.End
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Line   int32 `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	Column int32 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_searcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_searcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_searcher_proto_rawDescGZIP(), []int{5}
}

func (x *Location) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Location) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Location) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type PatternInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern                      string   `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	IsNegated                    bool     `protobuf:"varint,2,opt,name=is_negated,json=isNegated,proto3" json:"is_negated,omitempty"`
	IsRegexp                     bool     `protobuf:"varint,3,opt,name=is_regexp,json=isRegexp,proto3" json:"is_regexp,omitempty"`
	IsStructural                 bool     `protobuf:"varint,4,opt,name=is_structural,json=isStructural,proto3" json:"is_structural,omitempty"`
	IsWordMatch                  bool     `protobuf:"varint,5,opt,name=is_word_match,json=isWordMatch,proto3" json:"is_word_match,omitempty"`
	IsCaseSensitive              bool     `protobuf:"varint,6,opt,name=is_case_sensitive,json=isCaseSensitive,proto3" json:"is_case_sensitive,omitempty"`
	ExcludePattern               string   `protobuf:"bytes,7,opt,name=exclude_pattern,json=excludePattern,proto3" json:"exclude_pattern,omitempty"`
	IncludePatterns              []string `protobuf:"bytes,8,rep,name=include_patterns,json=includePatterns,proto3" json:"include_patterns,omitempty"`
	PathPatternsAreCaseSensitive bool     `protobuf:"varint,9,opt,name=path_patterns_are_case_sensitive,json=pathPatternsAreCaseSensitive,proto3" json:"path_patterns_are_case_sensitive,omitempty"`
	Limit                        int32    `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	PatternMatchesContent        bool     `protobuf:"varint,11,opt,name=pattern_matches_content,json=patternMatchesContent,proto3" json:"pattern_matches_content,omitempty"`
	PatternMatchesPath           bool     `protobuf:"varint,12,opt,name=pattern_matches_path,json=patternMatchesPath,proto3" json:"pattern_matches_path,omitempty"`
	CombyRule                    string   `protobuf:"bytes,16,opt,name=comby_rule,json=combyRule,proto3" json:"comby_rule,omitempty"`
	Languages                    []string `protobuf:"bytes,17,rep,name=languages,proto3" json:"languages,omitempty"`
	Select                       string   `protobuf:"bytes,18,opt,name=select,proto3" json:"select,omitempty"`
}

func (x *PatternInfo) Reset() {
	*x = PatternInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_searcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternInfo) ProtoMessage() {}

func (x *PatternInfo) ProtoReflect() protoreflect.Message {
	mi := &file_searcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternInfo.ProtoReflect.Descriptor instead.
func (*PatternInfo) Descriptor() ([]byte, []int) {
	return file_searcher_proto_rawDescGZIP(), []int{6}
}

func (x *PatternInfo) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *PatternInfo) GetIsNegated() bool {
	if x != nil {
		return x.IsNegated
	}
	return false
}

func (x *PatternInfo) GetIsRegexp() bool {
	if x != nil {
		return x.IsRegexp
	}
	return false
}

func (x *PatternInfo) GetIsStructural() bool {
	if x != nil {
		return x.IsStructural
	}
	return false
}

func (x *PatternInfo) GetIsWordMatch() bool {
	if x != nil {
		return x.IsWordMatch
	}
	return false
}

func (x *PatternInfo) GetIsCaseSensitive() bool {
	if x != nil {
		return x.IsCaseSensitive
	}
	return false
}

func (x *PatternInfo) GetExcludePattern() string {
	if x != nil {
		return x.ExcludePattern
	}
	return ""
}

func (x *PatternInfo) GetIncludePatterns() []string {
	if x != nil {
		return x.IncludePatterns
	}
	return nil
}

func (x *PatternInfo) GetPathPatternsAreCaseSensitive() bool {
	if x != nil {
		return x.PathPatternsAreCaseSensitive
	}
	return false
}

func (x *PatternInfo) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PatternInfo) GetPatternMatchesContent() bool {
	if x != nil {
		return x.PatternMatchesContent
	}
	return false
}

func (x *PatternInfo) GetPatternMatchesPath() bool {
	if x != nil {
		return x.PatternMatchesPath
	}
	return false
}

func (x *PatternInfo) GetCombyRule() string {
	if x != nil {
		return x.CombyRule
	}
	return ""
}

func (x *PatternInfo) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *PatternInfo) GetSelect() string {
	if x != nil {
		return x.Select
	}
	return ""
}

var File_searcher_proto protoreflect.FileDescriptor

var file_searcher_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x22, 0xa5, 0x02, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x65, 0x61, 0x74, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x06,
	0x10, 0x10, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x48, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x69, 0x74, 0x22, 0x77, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x48,
	0x69, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x57, 0x0a,
	0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x24, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x4e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xcf, 0x04, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x43, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1c, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x41, 0x72, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x10, 0x32, 0x4b, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x63, 0x6d, 0x64, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_searcher_proto_rawDescOnce sync.Once
	file_searcher_proto_rawDescData = file_searcher_proto_rawDesc
)

func file_searcher_proto_rawDescGZIP() []byte {
	file_searcher_proto_rawDescOnce.Do(func() {
		file_searcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_searcher_proto_rawDescData)
	})
	return file_searcher_proto_rawDescData
}

var file_searcher_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_searcher_proto_goTypes = []interface{}{
	(*SearchRequest)(nil),  // 0: searcher.SearchRequest
	(*SearchResponse)(nil), // 1: searcher.SearchResponse
	(*FileMatch)(nil),      // 2: searcher.FileMatch
	(*ChunkMatch)(nil),     // 3: searcher.ChunkMatch
	(*Range)(nil),          // 4: searcher.Range
	(*Location)(nil),       // 5: searcher.Location
	(*PatternInfo)(nil),    // 6: searcher.PatternInfo
}
var file_searcher_proto_depIdxs = []int32{
	6, // 0: searcher.SearchRequest.pattern_info:type_name -> searcher.PatternInfo
	2, // 1: searcher.SearchResponse.file_match:type_name -> searcher.FileMatch
	3, // 2: searcher.FileMatch.chunk_matches:type_name -> searcher.ChunkMatch
	5, // 3: searcher.ChunkMatch.content_start:type_name -> searcher.Location
	4, // 4: searcher.ChunkMatch.ranges:type_name -> searcher.Range
	5, // 5: searcher.Range.start:type_name -> searcher.Location
	5, // 6: searcher.Range.end:type_name -> searcher.Location
	0, // 7: searcher.Searcher.Search:input_type -> searcher.SearchRequest
	1, // 8: searcher.Searcher.Search:output_type -> searcher.SearchResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_searcher_proto_init() }
func file_searcher_proto_init() {
	if File_searcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_searcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_searcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_searcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_searcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_searcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_searcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_searcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_searcher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_searcher_proto_goTypes,
		DependencyIndexes: file_searcher_proto_depIdxs,
		MessageInfos:      file_searcher_proto_msgTypes,
	}.Build()
	File_searcher_proto = out.File
	file_searcher_proto_rawDesc = nil
	file_searcher_proto_goTypes = nil
	file_searcher_proto_depIdxs = nil
}
