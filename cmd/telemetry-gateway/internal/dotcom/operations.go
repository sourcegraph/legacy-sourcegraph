// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package dotcom

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// CheckAccessTokenDotcomDotcomQuery includes the requested fields of the GraphQL type DotcomQuery.
// The GraphQL type's documentation follows.
//
// Mutations that are only used on Sourcegraph.com.
// FOR INTERNAL USE ONLY.
type CheckAccessTokenDotcomDotcomQuery struct {
	// The access available to the product subscription with the given access token.
	// The returned ProductSubscription may be archived or not associated with an active license.
	//
	// Only Sourcegraph.com site admins, the account owners of the product subscription, and
	// specific service accounts may perform this query.
	// FOR INTERNAL USE ONLY.
	ProductSubscriptionByAccessToken CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription `json:"productSubscriptionByAccessToken"`
}

// GetProductSubscriptionByAccessToken returns CheckAccessTokenDotcomDotcomQuery.ProductSubscriptionByAccessToken, and is useful for accessing the field via an interface.
func (v *CheckAccessTokenDotcomDotcomQuery) GetProductSubscriptionByAccessToken() CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription {
	return v.ProductSubscriptionByAccessToken
}

// CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription includes the requested fields of the GraphQL type ProductSubscription.
// The GraphQL type's documentation follows.
//
// A product subscription that was created on Sourcegraph.com.
// FOR INTERNAL USE ONLY.
type CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription struct {
	ProductSubscriptionTelemetryIdentifiers `json:"-"`
}

// GetId returns CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription.Id, and is useful for accessing the field via an interface.
func (v *CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription) GetId() string {
	return v.ProductSubscriptionTelemetryIdentifiers.Id
}

// GetUuid returns CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription.Uuid, and is useful for accessing the field via an interface.
func (v *CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription) GetUuid() string {
	return v.ProductSubscriptionTelemetryIdentifiers.Uuid
}

// GetName returns CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription.Name, and is useful for accessing the field via an interface.
func (v *CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription) GetName() string {
	return v.ProductSubscriptionTelemetryIdentifiers.Name
}

// GetActiveLicense returns CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription.ActiveLicense, and is useful for accessing the field via an interface.
func (v *CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription) GetActiveLicense() *ProductSubscriptionTelemetryIdentifiersActiveLicenseProductLicense {
	return v.ProductSubscriptionTelemetryIdentifiers.ActiveLicense
}

func (v *CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription
		graphql.NoUnmarshalJSON
	}
	firstPass.CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProductSubscriptionTelemetryIdentifiers)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription struct {
	Id string `json:"id"`

	Uuid string `json:"uuid"`

	Name string `json:"name"`

	ActiveLicense *ProductSubscriptionTelemetryIdentifiersActiveLicenseProductLicense `json:"activeLicense"`
}

func (v *CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription) __premarshalJSON() (*__premarshalCheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription, error) {
	var retval __premarshalCheckAccessTokenDotcomDotcomQueryProductSubscriptionByAccessTokenProductSubscription

	retval.Id = v.ProductSubscriptionTelemetryIdentifiers.Id
	retval.Uuid = v.ProductSubscriptionTelemetryIdentifiers.Uuid
	retval.Name = v.ProductSubscriptionTelemetryIdentifiers.Name
	retval.ActiveLicense = v.ProductSubscriptionTelemetryIdentifiers.ActiveLicense
	return &retval, nil
}

// CheckAccessTokenResponse is returned by CheckAccessToken on success.
type CheckAccessTokenResponse struct {
	// Queries that are only used on Sourcegraph.com.
	//
	// FOR INTERNAL USE ONLY.
	Dotcom CheckAccessTokenDotcomDotcomQuery `json:"dotcom"`
}

// GetDotcom returns CheckAccessTokenResponse.Dotcom, and is useful for accessing the field via an interface.
func (v *CheckAccessTokenResponse) GetDotcom() CheckAccessTokenDotcomDotcomQuery { return v.Dotcom }

// ProductSubscriptionTelemetryIdentifiers includes the GraphQL fields of ProductSubscription requested by the fragment ProductSubscriptionTelemetryIdentifiers.
// The GraphQL type's documentation follows.
//
// A product subscription that was created on Sourcegraph.com.
// FOR INTERNAL USE ONLY.
type ProductSubscriptionTelemetryIdentifiers struct {
	// The unique ID of this product subscription.
	Id string `json:"id"`
	// The unique UUID of this product subscription. Unlike ProductSubscription.id, this does not
	// encode the type and is not a GraphQL node ID.
	Uuid string `json:"uuid"`
	// A name for the product subscription derived from its ID. The name is not guaranteed to be unique.
	Name string `json:"name"`
	// The currently active product license associated with this product subscription, if any.
	ActiveLicense *ProductSubscriptionTelemetryIdentifiersActiveLicenseProductLicense `json:"activeLicense"`
}

// GetId returns ProductSubscriptionTelemetryIdentifiers.Id, and is useful for accessing the field via an interface.
func (v *ProductSubscriptionTelemetryIdentifiers) GetId() string { return v.Id }

// GetUuid returns ProductSubscriptionTelemetryIdentifiers.Uuid, and is useful for accessing the field via an interface.
func (v *ProductSubscriptionTelemetryIdentifiers) GetUuid() string { return v.Uuid }

// GetName returns ProductSubscriptionTelemetryIdentifiers.Name, and is useful for accessing the field via an interface.
func (v *ProductSubscriptionTelemetryIdentifiers) GetName() string { return v.Name }

// GetActiveLicense returns ProductSubscriptionTelemetryIdentifiers.ActiveLicense, and is useful for accessing the field via an interface.
func (v *ProductSubscriptionTelemetryIdentifiers) GetActiveLicense() *ProductSubscriptionTelemetryIdentifiersActiveLicenseProductLicense {
	return v.ActiveLicense
}

// ProductSubscriptionTelemetryIdentifiersActiveLicenseProductLicense includes the requested fields of the GraphQL type ProductLicense.
// The GraphQL type's documentation follows.
//
// A product license that was created on Sourcegraph.com.
// FOR INTERNAL USE ONLY.
type ProductSubscriptionTelemetryIdentifiersActiveLicenseProductLicense struct {
	// Site ID of the instance that uses the license.
	SiteID *string `json:"siteID"`
}

// GetSiteID returns ProductSubscriptionTelemetryIdentifiersActiveLicenseProductLicense.SiteID, and is useful for accessing the field via an interface.
func (v *ProductSubscriptionTelemetryIdentifiersActiveLicenseProductLicense) GetSiteID() *string {
	return v.SiteID
}

// __CheckAccessTokenInput is used internally by genqlient
type __CheckAccessTokenInput struct {
	Token string `json:"token"`
}

// GetToken returns __CheckAccessTokenInput.Token, and is useful for accessing the field via an interface.
func (v *__CheckAccessTokenInput) GetToken() string { return v.Token }

// CheckAccessToken returns traits of the product subscription associated with
// the given access token.
func CheckAccessToken(
	ctx context.Context,
	client graphql.Client,
	token string,
) (*CheckAccessTokenResponse, error) {
	req := &graphql.Request{
		OpName: "CheckAccessToken",
		Query: `
query CheckAccessToken ($token: String!) {
	dotcom {
		productSubscriptionByAccessToken(accessToken: $token) {
			... ProductSubscriptionTelemetryIdentifiers
		}
	}
}
fragment ProductSubscriptionTelemetryIdentifiers on ProductSubscription {
	id
	uuid
	name
	activeLicense {
		siteID
	}
}
`,
		Variables: &__CheckAccessTokenInput{
			Token: token,
		},
	}
	var err error

	var data CheckAccessTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
