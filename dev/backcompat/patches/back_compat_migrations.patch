diff --git a/migrations/BUILD.bazel b/migrations/BUILD.bazel
index 8eb2a2948a..2444118076 100644
--- a/migrations/BUILD.bazel
+++ b/migrations/BUILD.bazel
@@ -67,6 +67,18 @@ go_library(
         "codeinsights/1672921606_data_retention_jobs_series_metadata/down.sql",
         "codeinsights/1672921606_data_retention_jobs_series_metadata/metadata.yaml",
         "codeinsights/1672921606_data_retention_jobs_series_metadata/up.sql",
+        "codeinsights/1674474174_remove_dirty_queries_table/down.sql",
+        "codeinsights/1674474174_remove_dirty_queries_table/metadata.yaml",
+        "codeinsights/1674474174_remove_dirty_queries_table/up.sql",
+        "codeinsights/1675113463_backfill_repo_query_selector/down.sql",
+        "codeinsights/1675113463_backfill_repo_query_selector/metadata.yaml",
+        "codeinsights/1675113463_backfill_repo_query_selector/up.sql",
+        "codeinsights/1675347548_add_insight_view_series_num_samples/down.sql",
+        "codeinsights/1675347548_add_insight_view_series_num_samples/metadata.yaml",
+        "codeinsights/1675347548_add_insight_view_series_num_samples/up.sql",
+        "codeinsights/1679051112_remove_commit_index_tables/down.sql",
+        "codeinsights/1679051112_remove_commit_index_tables/metadata.yaml",
+        "codeinsights/1679051112_remove_commit_index_tables/up.sql",
         "codeinsights/squashed.sql",
         "codeintel/1000000033_squashed_migrations_privileged/down.sql",
         "codeintel/1000000033_squashed_migrations_privileged/metadata.yaml",
@@ -113,6 +125,24 @@ go_library(
         "codeintel/1671059396_remove_duplicate_trigger/down.sql",
         "codeintel/1671059396_remove_duplicate_trigger/metadata.yaml",
         "codeintel/1671059396_remove_duplicate_trigger/up.sql",
+        "codeintel/1676423214_remove_lsif_data/down.sql",
+        "codeintel/1676423214_remove_lsif_data/metadata.yaml",
+        "codeintel/1676423214_remove_lsif_data/up.sql",
+        "codeintel/1678041507_cleanup_unused_functions/down.sql",
+        "codeintel/1678041507_cleanup_unused_functions/metadata.yaml",
+        "codeintel/1678041507_cleanup_unused_functions/up.sql",
+        "codeintel/1678898749_make_unreferenced_documents_index_usable/down.sql",
+        "codeintel/1678898749_make_unreferenced_documents_index_usable/metadata.yaml",
+        "codeintel/1678898749_make_unreferenced_documents_index_usable/up.sql",
+        "codeintel/1678899132_remove_unused_unreferenced_documents_index/down.sql",
+        "codeintel/1678899132_remove_unused_unreferenced_documents_index/metadata.yaml",
+        "codeintel/1678899132_remove_unused_unreferenced_documents_index/up.sql",
+        "codeintel/1679010276_add_missing_index/down.sql",
+        "codeintel/1679010276_add_missing_index/metadata.yaml",
+        "codeintel/1679010276_add_missing_index/up.sql",
+        "codeintel/1686315964_clean_out_schema_versions_tables/down.sql",
+        "codeintel/1686315964_clean_out_schema_versions_tables/metadata.yaml",
+        "codeintel/1686315964_clean_out_schema_versions_tables/up.sql",
         "codeintel/squashed.sql",
         "frontend/1648051770_squashed_migrations_privileged/down.sql",
         "frontend/1648051770_squashed_migrations_privileged/metadata.yaml",
@@ -582,6 +612,15 @@ go_library(
         "frontend/1670934184_add_gitserver_corruption_columns/down.sql",
         "frontend/1670934184_add_gitserver_corruption_columns/metadata.yaml",
         "frontend/1670934184_add_gitserver_corruption_columns/up.sql",
+        "frontend/1671159453_outbound_webhooks/down.sql",
+        "frontend/1671159453_outbound_webhooks/metadata.yaml",
+        "frontend/1671159453_outbound_webhooks/up.sql",
+        "frontend/1671463799_teams/down.sql",
+        "frontend/1671463799_teams/metadata.yaml",
+        "frontend/1671463799_teams/up.sql",
+        "frontend/1671543381_add_default_roles/down.sql",
+        "frontend/1671543381_add_default_roles/metadata.yaml",
+        "frontend/1671543381_add_default_roles/up.sql",
         "frontend/1672884222_create_namespace_permissions_table/down.sql",
         "frontend/1672884222_create_namespace_permissions_table/metadata.yaml",
         "frontend/1672884222_create_namespace_permissions_table/up.sql",
@@ -591,67 +630,60 @@ go_library(
         "frontend/1673019611_lsif_uploads_audit_logs_bigint_upload_size/down.sql",
         "frontend/1673019611_lsif_uploads_audit_logs_bigint_upload_size/metadata.yaml",
         "frontend/1673019611_lsif_uploads_audit_logs_bigint_upload_size/up.sql",
-        "frontend/1673405886_make_batch_spec_of_batch_change_not_nullable_again/down.sql",
-        "frontend/1673405886_make_batch_spec_of_batch_change_not_nullable_again/metadata.yaml",
-        "frontend/1673405886_make_batch_spec_of_batch_change_not_nullable_again/up.sql",
-        "frontend/squashed.sql",
-        "frontend/1671159453_outbound_webhooks/down.sql",
-        "frontend/1671159453_outbound_webhooks/metadata.yaml",
-        "frontend/1671159453_outbound_webhooks/up.sql",
-        "frontend/1671543381_add_default_roles/down.sql",
-        "frontend/1671543381_add_default_roles/metadata.yaml",
-        "frontend/1671543381_add_default_roles/up.sql",
         "frontend/1673351808_add_repo_corruption_stat/down.sql",
         "frontend/1673351808_add_repo_corruption_stat/metadata.yaml",
         "frontend/1673351808_add_repo_corruption_stat/up.sql",
+        "frontend/1673405886_make_batch_spec_of_batch_change_not_nullable_again/down.sql",
+        "frontend/1673405886_make_batch_spec_of_batch_change_not_nullable_again/metadata.yaml",
+        "frontend/1673405886_make_batch_spec_of_batch_change_not_nullable_again/up.sql",
         "frontend/1673871310_add_columns_to_permission_sync_jobs_table/down.sql",
         "frontend/1673871310_add_columns_to_permission_sync_jobs_table/metadata.yaml",
         "frontend/1673871310_add_columns_to_permission_sync_jobs_table/up.sql",
         "frontend/1673897709_add_cascade_batch_spec_resolution_jobs/down.sql",
         "frontend/1673897709_add_cascade_batch_spec_resolution_jobs/metadata.yaml",
         "frontend/1673897709_add_cascade_batch_spec_resolution_jobs/up.sql",
-        "frontend/1674047296_rename_roles_readonly_column_to_system/down.sql",
-        "frontend/1674047296_rename_roles_readonly_column_to_system/metadata.yaml",
-        "frontend/1674047296_rename_roles_readonly_column_to_system/up.sql",
+        "frontend/1674035302_remove_webhook_build_jobs_table/down.sql",
+        "frontend/1674035302_remove_webhook_build_jobs_table/metadata.yaml",
+        "frontend/1674035302_remove_webhook_build_jobs_table/up.sql",
         "frontend/1674041632_add_constraints_to_permission_sync_jobs_table/down.sql",
         "frontend/1674041632_add_constraints_to_permission_sync_jobs_table/metadata.yaml",
         "frontend/1674041632_add_constraints_to_permission_sync_jobs_table/up.sql",
+        "frontend/1674047296_rename_roles_readonly_column_to_system/down.sql",
+        "frontend/1674047296_rename_roles_readonly_column_to_system/metadata.yaml",
+        "frontend/1674047296_rename_roles_readonly_column_to_system/up.sql",
         "frontend/1674455760_add_cancellation_reason_to_permission_sync_jobs_table/down.sql",
         "frontend/1674455760_add_cancellation_reason_to_permission_sync_jobs_table/metadata.yaml",
         "frontend/1674455760_add_cancellation_reason_to_permission_sync_jobs_table/up.sql",
-        "frontend/1674035302_remove_webhook_build_jobs_table/down.sql",
-        "frontend/1674035302_remove_webhook_build_jobs_table/metadata.yaml",
-        "frontend/1674035302_remove_webhook_build_jobs_table/up.sql",
-        "codeinsights/1674474174_remove_dirty_queries_table/down.sql",
-        "codeinsights/1674474174_remove_dirty_queries_table/metadata.yaml",
-        "codeinsights/1674474174_remove_dirty_queries_table/up.sql",
         "frontend/1674480050_add_column_redacted_contents_to_critical_and_site_config/down.sql",
         "frontend/1674480050_add_column_redacted_contents_to_critical_and_site_config/metadata.yaml",
         "frontend/1674480050_add_column_redacted_contents_to_critical_and_site_config/up.sql",
         "frontend/1674642349_add_priority_to_permission_sync_jobs/down.sql",
         "frontend/1674642349_add_priority_to_permission_sync_jobs/metadata.yaml",
         "frontend/1674642349_add_priority_to_permission_sync_jobs/up.sql",
+        "frontend/1674669326_package_repos_separate_versions_table/down.sql",
+        "frontend/1674669326_package_repos_separate_versions_table/metadata.yaml",
+        "frontend/1674669326_package_repos_separate_versions_table/up.sql",
         "frontend/1674669794_add_foreign_keys_to_permission_sync_jobs/down.sql",
         "frontend/1674669794_add_foreign_keys_to_permission_sync_jobs/metadata.yaml",
         "frontend/1674669794_add_foreign_keys_to_permission_sync_jobs/up.sql",
-        "frontend/1671463799_teams/down.sql",
-        "frontend/1671463799_teams/metadata.yaml",
-        "frontend/1671463799_teams/up.sql",
-        "codeinsights/1675113463_backfill_repo_query_selector/down.sql",
-        "codeinsights/1675113463_backfill_repo_query_selector/metadata.yaml",
-        "codeinsights/1675113463_backfill_repo_query_selector/up.sql",
+        "frontend/1674754280_executor_job_tokens/down.sql",
+        "frontend/1674754280_executor_job_tokens/metadata.yaml",
+        "frontend/1674754280_executor_job_tokens/up.sql",
+        "frontend/1674814035_add_unified_source_perms_table/down.sql",
+        "frontend/1674814035_add_unified_source_perms_table/metadata.yaml",
+        "frontend/1674814035_add_unified_source_perms_table/up.sql",
         "frontend/1674952295_make_user_id_namespace_permissions_non_nullable/down.sql",
         "frontend/1674952295_make_user_id_namespace_permissions_non_nullable/metadata.yaml",
         "frontend/1674952295_make_user_id_namespace_permissions_non_nullable/up.sql",
         "frontend/1675155867_add_no_perms_column_to_permission_sync_jobs_table/down.sql",
         "frontend/1675155867_add_no_perms_column_to_permission_sync_jobs_table/metadata.yaml",
         "frontend/1675155867_add_no_perms_column_to_permission_sync_jobs_table/up.sql",
-        "frontend/1674814035_add_unified_source_perms_table/down.sql",
-        "frontend/1674814035_add_unified_source_perms_table/metadata.yaml",
-        "frontend/1674814035_add_unified_source_perms_table/up.sql",
         "frontend/1675194688_fix_should_reindex_in_views/down.sql",
         "frontend/1675194688_fix_should_reindex_in_views/metadata.yaml",
         "frontend/1675194688_fix_should_reindex_in_views/up.sql",
+        "frontend/1675257827_redis_key_value/down.sql",
+        "frontend/1675257827_redis_key_value/metadata.yaml",
+        "frontend/1675257827_redis_key_value/up.sql",
         "frontend/1675277218_add_lsif_uploads_uploaded_at_id/down.sql",
         "frontend/1675277218_add_lsif_uploads_uploaded_at_id/metadata.yaml",
         "frontend/1675277218_add_lsif_uploads_uploaded_at_id/up.sql",
@@ -661,27 +693,12 @@ go_library(
         "frontend/1675277968_drop_lsif_indexes_queued_at/down.sql",
         "frontend/1675277968_drop_lsif_indexes_queued_at/metadata.yaml",
         "frontend/1675277968_drop_lsif_indexes_queued_at/up.sql",
-        "frontend/1674669326_package_repos_separate_versions_table/down.sql",
-        "frontend/1674669326_package_repos_separate_versions_table/metadata.yaml",
-        "frontend/1674669326_package_repos_separate_versions_table/up.sql",
-        "frontend/1675257827_redis_key_value/down.sql",
-        "frontend/1675257827_redis_key_value/metadata.yaml",
-        "frontend/1675257827_redis_key_value/up.sql",
-        "frontend/1675367314_add_results_to_permission_sync_jobs/down.sql",
-        "frontend/1675367314_add_results_to_permission_sync_jobs/metadata.yaml",
-        "frontend/1675367314_add_results_to_permission_sync_jobs/up.sql",
-        "codeinsights/1675347548_add_insight_view_series_num_samples/down.sql",
-        "codeinsights/1675347548_add_insight_view_series_num_samples/metadata.yaml",
-        "codeinsights/1675347548_add_insight_view_series_num_samples/up.sql",
-        "codeintel/1676423214_remove_lsif_data/down.sql",
-        "codeintel/1676423214_remove_lsif_data/metadata.yaml",
-        "codeintel/1676423214_remove_lsif_data/up.sql",
-        "frontend/1674754280_executor_job_tokens/down.sql",
-        "frontend/1674754280_executor_job_tokens/metadata.yaml",
-        "frontend/1674754280_executor_job_tokens/up.sql",
         "frontend/1675296942_add_column_to_changesets_for_external_fork_name/down.sql",
         "frontend/1675296942_add_column_to_changesets_for_external_fork_name/metadata.yaml",
         "frontend/1675296942_add_column_to_changesets_for_external_fork_name/up.sql",
+        "frontend/1675367314_add_results_to_permission_sync_jobs/down.sql",
+        "frontend/1675367314_add_results_to_permission_sync_jobs/metadata.yaml",
+        "frontend/1675367314_add_results_to_permission_sync_jobs/up.sql",
         "frontend/1675647612_remove_roles_deleted_at/down.sql",
         "frontend/1675647612_remove_roles_deleted_at/metadata.yaml",
         "frontend/1675647612_remove_roles_deleted_at/up.sql",
@@ -700,6 +717,9 @@ go_library(
         "frontend/1676328864_add_cached_available_indexers/down.sql",
         "frontend/1676328864_add_cached_available_indexers/metadata.yaml",
         "frontend/1676328864_add_cached_available_indexers/up.sql",
+        "frontend/1676420496_frontend/down.sql",
+        "frontend/1676420496_frontend/metadata.yaml",
+        "frontend/1676420496_frontend/up.sql",
         "frontend/1676584791_add_index/down.sql",
         "frontend/1676584791_add_index/metadata.yaml",
         "frontend/1676584791_add_index/up.sql",
@@ -721,6 +741,9 @@ go_library(
         "frontend/1677104938_move_processed_flag_out_of_references_table/down.sql",
         "frontend/1677104938_move_processed_flag_out_of_references_table/metadata.yaml",
         "frontend/1677104938_move_processed_flag_out_of_references_table/up.sql",
+        "frontend/1677166643_package_repos_allowblock_lists/down.sql",
+        "frontend/1677166643_package_repos_allowblock_lists/metadata.yaml",
+        "frontend/1677166643_package_repos_allowblock_lists/up.sql",
         "frontend/1677242688_add_triggers_for_soft_deleted_perms_entities/down.sql",
         "frontend/1677242688_add_triggers_for_soft_deleted_perms_entities/metadata.yaml",
         "frontend/1677242688_add_triggers_for_soft_deleted_perms_entities/up.sql",
@@ -763,15 +786,15 @@ go_library(
         "frontend/1677811663_make_team_creator_nullable/down.sql",
         "frontend/1677811663_make_team_creator_nullable/metadata.yaml",
         "frontend/1677811663_make_team_creator_nullable/up.sql",
-        "codeintel/1678041507_cleanup_unused_functions/down.sql",
-        "codeintel/1678041507_cleanup_unused_functions/metadata.yaml",
-        "codeintel/1678041507_cleanup_unused_functions/up.sql",
         "frontend/1677878270_eric_is_bad_at_math/down.sql",
         "frontend/1677878270_eric_is_bad_at_math/metadata.yaml",
         "frontend/1677878270_eric_is_bad_at_math/up.sql",
         "frontend/1677944569_drop_unused_types/down.sql",
         "frontend/1677944569_drop_unused_types/metadata.yaml",
         "frontend/1677944569_drop_unused_types/up.sql",
+        "frontend/1677944752_drop_unused_lockfiles_tables/down.sql",
+        "frontend/1677944752_drop_unused_lockfiles_tables/metadata.yaml",
+        "frontend/1677944752_drop_unused_lockfiles_tables/up.sql",
         "frontend/1677945580_drop_unused_ranking_table/down.sql",
         "frontend/1677945580_drop_unused_ranking_table/metadata.yaml",
         "frontend/1677945580_drop_unused_ranking_table/up.sql",
@@ -784,18 +807,21 @@ go_library(
         "frontend/1678091683_add_migrated_column_to_user_permissions/down.sql",
         "frontend/1678091683_add_migrated_column_to_user_permissions/metadata.yaml",
         "frontend/1678091683_add_migrated_column_to_user_permissions/up.sql",
-        "frontend/1677944752_drop_unused_lockfiles_tables/down.sql",
-        "frontend/1677944752_drop_unused_lockfiles_tables/metadata.yaml",
-        "frontend/1677944752_drop_unused_lockfiles_tables/up.sql",
         "frontend/1678112318_add_external_accounts_scim_index/down.sql",
         "frontend/1678112318_add_external_accounts_scim_index/metadata.yaml",
         "frontend/1678112318_add_external_accounts_scim_index/up.sql",
+        "frontend/1678175532_index_github_topics/down.sql",
+        "frontend/1678175532_index_github_topics/metadata.yaml",
+        "frontend/1678175532_index_github_topics/up.sql",
+        "frontend/1678213774_sg_telemetry_allowlist/down.sql",
+        "frontend/1678213774_sg_telemetry_allowlist/metadata.yaml",
+        "frontend/1678213774_sg_telemetry_allowlist/up.sql",
         "frontend/1678214530_fix_indexes_on_ranking_tables/down.sql",
         "frontend/1678214530_fix_indexes_on_ranking_tables/metadata.yaml",
         "frontend/1678214530_fix_indexes_on_ranking_tables/up.sql",
-        "frontend/1677166643_package_repos_allowblock_lists/down.sql",
-        "frontend/1677166643_package_repos_allowblock_lists/metadata.yaml",
-        "frontend/1677166643_package_repos_allowblock_lists/up.sql",
+        "frontend/1678220614_sg_telemetry_allowlist/down.sql",
+        "frontend/1678220614_sg_telemetry_allowlist/metadata.yaml",
+        "frontend/1678220614_sg_telemetry_allowlist/up.sql",
         "frontend/1678290792_drop_unused_index_event_logs_user_id/down.sql",
         "frontend/1678290792_drop_unused_index_event_logs_user_id/metadata.yaml",
         "frontend/1678290792_drop_unused_index_event_logs_user_id/up.sql",
@@ -808,15 +834,6 @@ go_library(
         "frontend/1678291831_drop_unused_index_package_repo_versions_fk_idx/down.sql",
         "frontend/1678291831_drop_unused_index_package_repo_versions_fk_idx/metadata.yaml",
         "frontend/1678291831_drop_unused_index_package_repo_versions_fk_idx/up.sql",
-        "frontend/1678175532_index_github_topics/down.sql",
-        "frontend/1678175532_index_github_topics/metadata.yaml",
-        "frontend/1678175532_index_github_topics/up.sql",
-        "frontend/1678213774_sg_telemetry_allowlist/down.sql",
-        "frontend/1678213774_sg_telemetry_allowlist/metadata.yaml",
-        "frontend/1678213774_sg_telemetry_allowlist/up.sql",
-        "frontend/1678220614_sg_telemetry_allowlist/down.sql",
-        "frontend/1678220614_sg_telemetry_allowlist/metadata.yaml",
-        "frontend/1678220614_sg_telemetry_allowlist/up.sql",
         "frontend/1678320579_normalize_webhook_urns/down.sql",
         "frontend/1678320579_normalize_webhook_urns/metadata.yaml",
         "frontend/1678320579_normalize_webhook_urns/up.sql",
@@ -826,18 +843,6 @@ go_library(
         "frontend/1678409821_package_repos_missing_indexes/down.sql",
         "frontend/1678409821_package_repos_missing_indexes/metadata.yaml",
         "frontend/1678409821_package_repos_missing_indexes/up.sql",
-        "codeintel/1678898749_make_unreferenced_documents_index_usable/down.sql",
-        "codeintel/1678898749_make_unreferenced_documents_index_usable/metadata.yaml",
-        "codeintel/1678898749_make_unreferenced_documents_index_usable/up.sql",
-        "codeintel/1678899132_remove_unused_unreferenced_documents_index/down.sql",
-        "codeintel/1678899132_remove_unused_unreferenced_documents_index/metadata.yaml",
-        "codeintel/1678899132_remove_unused_unreferenced_documents_index/up.sql",
-        "codeintel/1679010276_add_missing_index/down.sql",
-        "codeintel/1679010276_add_missing_index/metadata.yaml",
-        "codeintel/1679010276_add_missing_index/up.sql",
-        "frontend/1676420496_frontend/down.sql",
-        "frontend/1676420496_frontend/metadata.yaml",
-        "frontend/1676420496_frontend/up.sql",
         "frontend/1678456448_make_role_name_citext/down.sql",
         "frontend/1678456448_make_role_name_citext/metadata.yaml",
         "frontend/1678456448_make_role_name_citext/up.sql",
@@ -853,6 +858,247 @@ go_library(
         "frontend/1678994673_package_repos_last_checked_at_index/down.sql",
         "frontend/1678994673_package_repos_last_checked_at_index/metadata.yaml",
         "frontend/1678994673_package_repos_last_checked_at_index/up.sql",
+        "frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/down.sql",
+        "frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/metadata.yaml",
+        "frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/up.sql",
+        "frontend/1679404397_add_missing_index_for_vacuum/down.sql",
+        "frontend/1679404397_add_missing_index_for_vacuum/metadata.yaml",
+        "frontend/1679404397_add_missing_index_for_vacuum/up.sql",
+        "frontend/1679426934_soft_deleted_repository_name_reconciling_names/down.sql",
+        "frontend/1679426934_soft_deleted_repository_name_reconciling_names/metadata.yaml",
+        "frontend/1679426934_soft_deleted_repository_name_reconciling_names/up.sql",
+        "frontend/1679428966_speed_up_deletes_from_ranking_table/down.sql",
+        "frontend/1679428966_speed_up_deletes_from_ranking_table/metadata.yaml",
+        "frontend/1679428966_speed_up_deletes_from_ranking_table/up.sql",
+        "frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/down.sql",
+        "frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/metadata.yaml",
+        "frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/up.sql",
+        "frontend/1679603787_keep_cloning_progress_in_gitserver_repos/down.sql",
+        "frontend/1679603787_keep_cloning_progress_in_gitserver_repos/metadata.yaml",
+        "frontend/1679603787_keep_cloning_progress_in_gitserver_repos/up.sql",
+        "frontend/1679690266_batch_initial_path_counts/down.sql",
+        "frontend/1679690266_batch_initial_path_counts/metadata.yaml",
+        "frontend/1679690266_batch_initial_path_counts/up.sql",
+        "frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/down.sql",
+        "frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/metadata.yaml",
+        "frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/up.sql",
+        "frontend/1680296731_package_repos_package_name_regex_match/down.sql",
+        "frontend/1680296731_package_repos_package_name_regex_match/metadata.yaml",
+        "frontend/1680296731_package_repos_package_name_regex_match/up.sql",
+        "frontend/1680707560_sg_telemetry_allowlist/down.sql",
+        "frontend/1680707560_sg_telemetry_allowlist/metadata.yaml",
+        "frontend/1680707560_sg_telemetry_allowlist/up.sql",
+        "frontend/1681300431_ownership_signals/down.sql",
+        "frontend/1681300431_ownership_signals/metadata.yaml",
+        "frontend/1681300431_ownership_signals/up.sql",
+        "frontend/1681807446_add_github_apps_table/down.sql",
+        "frontend/1681807446_add_github_apps_table/metadata.yaml",
+        "frontend/1681807446_add_github_apps_table/up.sql",
+        "frontend/1681923094_sg_telemetry_allowlist/down.sql",
+        "frontend/1681923094_sg_telemetry_allowlist/metadata.yaml",
+        "frontend/1681923094_sg_telemetry_allowlist/up.sql",
+        "frontend/1681982430_user_completions_quota/down.sql",
+        "frontend/1681982430_user_completions_quota/metadata.yaml",
+        "frontend/1681982430_user_completions_quota/up.sql",
+        "frontend/1682012624_own_background_jobs/down.sql",
+        "frontend/1682012624_own_background_jobs/metadata.yaml",
+        "frontend/1682012624_own_background_jobs/up.sql",
+        "frontend/1682114198_product_license_access_tokens/down.sql",
+        "frontend/1682114198_product_license_access_tokens/metadata.yaml",
+        "frontend/1682114198_product_license_access_tokens/up.sql",
+        "frontend/1682598027_add_github_app_installations_table/down.sql",
+        "frontend/1682598027_add_github_app_installations_table/metadata.yaml",
+        "frontend/1682598027_add_github_app_installations_table/up.sql",
+        "frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/down.sql",
+        "frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/metadata.yaml",
+        "frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/up.sql",
+        "frontend/1682626931_subscription_llm_proxy_state/down.sql",
+        "frontend/1682626931_subscription_llm_proxy_state/metadata.yaml",
+        "frontend/1682626931_subscription_llm_proxy_state/up.sql",
+        "frontend/1682683129_add_recent_view_ownership_signal/down.sql",
+        "frontend/1682683129_add_recent_view_ownership_signal/metadata.yaml",
+        "frontend/1682683129_add_recent_view_ownership_signal/up.sql",
+        "frontend/1682967255_add_ranking_graph_key_table/down.sql",
+        "frontend/1682967255_add_ranking_graph_key_table/metadata.yaml",
+        "frontend/1682967255_add_ranking_graph_key_table/up.sql",
+        "frontend/1683053825_sg_telemetry_allowlist/down.sql",
+        "frontend/1683053825_sg_telemetry_allowlist/metadata.yaml",
+        "frontend/1683053825_sg_telemetry_allowlist/up.sql",
+        "frontend/1683246005_llmproxynoaccesstokenenable/down.sql",
+        "frontend/1683246005_llmproxynoaccesstokenenable/metadata.yaml",
+        "frontend/1683246005_llmproxynoaccesstokenenable/up.sql",
+        "frontend/1683290474_user_code_completions_quota/down.sql",
+        "frontend/1683290474_user_code_completions_quota/metadata.yaml",
+        "frontend/1683290474_user_code_completions_quota/up.sql",
+        "frontend/1683295546_add_app_url_column_for_github_apps/down.sql",
+        "frontend/1683295546_add_app_url_column_for_github_apps/metadata.yaml",
+        "frontend/1683295546_add_app_url_column_for_github_apps/up.sql",
+        "frontend/1683561153_add_autoindexing_repo_exceptions_table/down.sql",
+        "frontend/1683561153_add_autoindexing_repo_exceptions_table/metadata.yaml",
+        "frontend/1683561153_add_autoindexing_repo_exceptions_table/up.sql",
+        "frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/down.sql",
+        "frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/metadata.yaml",
+        "frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/up.sql",
+        "frontend/1683640362_expand_ranking_unique_key/down.sql",
+        "frontend/1683640362_expand_ranking_unique_key/metadata.yaml",
+        "frontend/1683640362_expand_ranking_unique_key/up.sql",
+        "frontend/1683641757_sg_telemetry_allowlist/down.sql",
+        "frontend/1683641757_sg_telemetry_allowlist/metadata.yaml",
+        "frontend/1683641757_sg_telemetry_allowlist/up.sql",
+        "frontend/1683670271_remove_ranking_object_prefix/down.sql",
+        "frontend/1683670271_remove_ranking_object_prefix/metadata.yaml",
+        "frontend/1683670271_remove_ranking_object_prefix/up.sql",
+        "frontend/1683670735_move_deleted_fields_for_ranking/down.sql",
+        "frontend/1683670735_move_deleted_fields_for_ranking/metadata.yaml",
+        "frontend/1683670735_move_deleted_fields_for_ranking/up.sql",
+        "frontend/1683753933_move_upload_relation_in_ranking_export_data/down.sql",
+        "frontend/1683753933_move_upload_relation_in_ranking_export_data/metadata.yaml",
+        "frontend/1683753933_move_upload_relation_in_ranking_export_data/up.sql",
+        "frontend/1683782561_githubappwebhooks/down.sql",
+        "frontend/1683782561_githubappwebhooks/metadata.yaml",
+        "frontend/1683782561_githubappwebhooks/up.sql",
+        "frontend/1683913757_add_ranking_progress_columns/down.sql",
+        "frontend/1683913757_add_ranking_progress_columns/metadata.yaml",
+        "frontend/1683913757_add_ranking_progress_columns/up.sql",
+        "frontend/1683924275_own_signal_state/down.sql",
+        "frontend/1683924275_own_signal_state/metadata.yaml",
+        "frontend/1683924275_own_signal_state/up.sql",
+        "frontend/1684180461_sg_telemetry_allowlist/down.sql",
+        "frontend/1684180461_sg_telemetry_allowlist/metadata.yaml",
+        "frontend/1684180461_sg_telemetry_allowlist/up.sql",
+        "frontend/1684207923_embeddings_proxy/down.sql",
+        "frontend/1684207923_embeddings_proxy/metadata.yaml",
+        "frontend/1684207923_embeddings_proxy/up.sql",
+        "frontend/1684217409_create_assigned_owners_table/down.sql",
+        "frontend/1684217409_create_assigned_owners_table/metadata.yaml",
+        "frontend/1684217409_create_assigned_owners_table/up.sql",
+        "frontend/1684248574_upsize_id_columns/down.sql",
+        "frontend/1684248574_upsize_id_columns/metadata.yaml",
+        "frontend/1684248574_upsize_id_columns/up.sql",
+        "frontend/1684306784_make_assigned_owners_index_nonunique/down.sql",
+        "frontend/1684306784_make_assigned_owners_index_nonunique/metadata.yaml",
+        "frontend/1684306784_make_assigned_owners_index_nonunique/up.sql",
+        "frontend/1684396562_add_table_repo_commits_changelists/down.sql",
+        "frontend/1684396562_add_table_repo_commits_changelists/metadata.yaml",
+        "frontend/1684396562_add_table_repo_commits_changelists/up.sql",
+        "frontend/1684398004_drop_github_app_installs_table/down.sql",
+        "frontend/1684398004_drop_github_app_installs_table/metadata.yaml",
+        "frontend/1684398004_drop_github_app_installs_table/up.sql",
+        "frontend/1684429687_own_signal_config_view/down.sql",
+        "frontend/1684429687_own_signal_config_view/metadata.yaml",
+        "frontend/1684429687_own_signal_config_view/up.sql",
+        "frontend/1684632550_simplify_mapper_max_id/down.sql",
+        "frontend/1684632550_simplify_mapper_max_id/metadata.yaml",
+        "frontend/1684632550_simplify_mapper_max_id/up.sql",
+        "frontend/1684753192_set_repo_meta_empty_values_to_null/down.sql",
+        "frontend/1684753192_set_repo_meta_empty_values_to_null/metadata.yaml",
+        "frontend/1684753192_set_repo_meta_empty_values_to_null/up.sql",
+        "frontend/1684771948_add_domain_to_github_app/down.sql",
+        "frontend/1684771948_add_domain_to_github_app/metadata.yaml",
+        "frontend/1684771948_add_domain_to_github_app/up.sql",
+        "frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/down.sql",
+        "frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/metadata.yaml",
+        "frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/up.sql",
+        "frontend/1684854090_add_embeddings_to_policies/down.sql",
+        "frontend/1684854090_add_embeddings_to_policies/metadata.yaml",
+        "frontend/1684854090_add_embeddings_to_policies/up.sql",
+        "frontend/1684854389_llm_proxy_separate_rate_limits/down.sql",
+        "frontend/1684854389_llm_proxy_separate_rate_limits/metadata.yaml",
+        "frontend/1684854389_llm_proxy_separate_rate_limits/up.sql",
+        "frontend/1684858266_add_queuenames_column_to_executor_heartbeat/down.sql",
+        "frontend/1684858266_add_queuenames_column_to_executor_heartbeat/metadata.yaml",
+        "frontend/1684858266_add_queuenames_column_to_executor_heartbeat/up.sql",
+        "frontend/1684933018_add_ranking_mapper_index/down.sql",
+        "frontend/1684933018_add_ranking_mapper_index/metadata.yaml",
+        "frontend/1684933018_add_ranking_mapper_index/up.sql",
+        "frontend/1685103392_add_ranking_export_hash_key/down.sql",
+        "frontend/1685103392_add_ranking_export_hash_key/metadata.yaml",
+        "frontend/1685103392_add_ranking_export_hash_key/up.sql",
+        "frontend/1685105270_simplify_ranking_reducer_table/down.sql",
+        "frontend/1685105270_simplify_ranking_reducer_table/metadata.yaml",
+        "frontend/1685105270_simplify_ranking_reducer_table/up.sql",
+        "frontend/1685453088_create_github_apps_install_tables/down.sql",
+        "frontend/1685453088_create_github_apps_install_tables/metadata.yaml",
+        "frontend/1685453088_create_github_apps_install_tables/up.sql",
+        "frontend/1685495400_rename_llm_proxy_to_cody_gateway/down.sql",
+        "frontend/1685495400_rename_llm_proxy_to_cody_gateway/metadata.yaml",
+        "frontend/1685495400_rename_llm_proxy_to_cody_gateway/up.sql",
+        "frontend/1685525992_add_license_fields_to_support_auto_billing/down.sql",
+        "frontend/1685525992_add_license_fields_to_support_auto_billing/metadata.yaml",
+        "frontend/1685525992_add_license_fields_to_support_auto_billing/up.sql",
+        "frontend/1685562535_add_missing_ranking_index/down.sql",
+        "frontend/1685562535_add_missing_ranking_index/metadata.yaml",
+        "frontend/1685562535_add_missing_ranking_index/up.sql",
+        "frontend/1685570436_add_ranking_graph_key_table/down.sql",
+        "frontend/1685570436_add_ranking_graph_key_table/metadata.yaml",
+        "frontend/1685570436_add_ranking_graph_key_table/up.sql",
+        "frontend/1685645480_normalize_base_url/down.sql",
+        "frontend/1685645480_normalize_base_url/metadata.yaml",
+        "frontend/1685645480_normalize_base_url/up.sql",
+        "frontend/1685695443_codeowners_stats_and_counts/down.sql",
+        "frontend/1685695443_codeowners_stats_and_counts/metadata.yaml",
+        "frontend/1685695443_codeowners_stats_and_counts/up.sql",
+        "frontend/1685697346_add_unique_constraint_to_assigned_owners/down.sql",
+        "frontend/1685697346_add_unique_constraint_to_assigned_owners/metadata.yaml",
+        "frontend/1685697346_add_unique_constraint_to_assigned_owners/up.sql",
+        "frontend/1685712730_add_own_analytics_setting/down.sql",
+        "frontend/1685712730_add_own_analytics_setting/metadata.yaml",
+        "frontend/1685712730_add_own_analytics_setting/up.sql",
+        "frontend/1685727930_junk_cleanup/down.sql",
+        "frontend/1685727930_junk_cleanup/metadata.yaml",
+        "frontend/1685727930_junk_cleanup/up.sql",
+        "frontend/1685983690_make_path_count_inputs_unique_by_definition_id/down.sql",
+        "frontend/1685983690_make_path_count_inputs_unique_by_definition_id/metadata.yaml",
+        "frontend/1685983690_make_path_count_inputs_unique_by_definition_id/up.sql",
+        "frontend/1685984018_drop_duplicate_index/down.sql",
+        "frontend/1685984018_drop_duplicate_index/metadata.yaml",
+        "frontend/1685984018_drop_duplicate_index/up.sql",
+        "frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/down.sql",
+        "frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/metadata.yaml",
+        "frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/up.sql",
+        "frontend/1686042710_add_assigned_teams_table/down.sql",
+        "frontend/1686042710_add_assigned_teams_table/metadata.yaml",
+        "frontend/1686042710_add_assigned_teams_table/up.sql",
+        "frontend/1686169273_add_verification_to_changesets/down.sql",
+        "frontend/1686169273_add_verification_to_changesets/metadata.yaml",
+        "frontend/1686169273_add_verification_to_changesets/up.sql",
+        "frontend/1686169626_add_stats_to_embeddings_jobs/down.sql",
+        "frontend/1686169626_add_stats_to_embeddings_jobs/metadata.yaml",
+        "frontend/1686169626_add_stats_to_embeddings_jobs/up.sql",
+        "frontend/1686208766_add_revoke_reason_to_product_licenses_table/down.sql",
+        "frontend/1686208766_add_revoke_reason_to_product_licenses_table/metadata.yaml",
+        "frontend/1686208766_add_revoke_reason_to_product_licenses_table/up.sql",
+        "frontend/1686255261_add_own_analytics_setting_again/down.sql",
+        "frontend/1686255261_add_own_analytics_setting_again/metadata.yaml",
+        "frontend/1686255261_add_own_analytics_setting_again/up.sql",
+        "frontend/1686282228_add_installation_metadata/down.sql",
+        "frontend/1686282228_add_installation_metadata/metadata.yaml",
+        "frontend/1686282228_add_installation_metadata/up.sql",
+        "frontend/1686287028_add_unique_github_app_install_constraint/down.sql",
+        "frontend/1686287028_add_unique_github_app_install_constraint/metadata.yaml",
+        "frontend/1686287028_add_unique_github_app_install_constraint/up.sql",
+        "frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/down.sql",
+        "frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/metadata.yaml",
+        "frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/up.sql",
+        "frontend/1686580819_store_symbols_as_bytes/down.sql",
+        "frontend/1686580819_store_symbols_as_bytes/metadata.yaml",
+        "frontend/1686580819_store_symbols_as_bytes/up.sql",
+        "frontend/1686723014_own_analytics_assigned_ownership/down.sql",
+        "frontend/1686723014_own_analytics_assigned_ownership/metadata.yaml",
+        "frontend/1686723014_own_analytics_assigned_ownership/up.sql",
+        "frontend/1686749117_add_last_indexed_at_to_zoekt_repos/down.sql",
+        "frontend/1686749117_add_last_indexed_at_to_zoekt_repos/metadata.yaml",
+        "frontend/1686749117_add_last_indexed_at_to_zoekt_repos/up.sql",
+        "frontend/squashed.sql",
+        "frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/down.sql",
+        "frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/metadata.yaml",
+        "frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/up.sql",
+        "frontend/1690323910_add_chunks_excluded_embeddings_stats/down.sql",
+        "frontend/1690323910_add_chunks_excluded_embeddings_stats/metadata.yaml",
+        "frontend/1690323910_add_chunks_excluded_embeddings_stats/up.sql",
+        "frontend/1691043630_event_logs_indexing/down.sql",
+        "frontend/1691043630_event_logs_indexing/metadata.yaml",
+        "frontend/1691043630_event_logs_indexing/up.sql",
     ],
     importpath = "github.com/sourcegraph/sourcegraph/migrations",
     visibility = ["//visibility:public"],
diff --git a/migrations/codeinsights/1659572248_refresh_scoped_insights/down.sql b/migrations/codeinsights/1659572248_refresh_scoped_insights/down.sql
index 3164f6db35..f71333deb9 100644
--- a/migrations/codeinsights/1659572248_refresh_scoped_insights/down.sql
+++ b/migrations/codeinsights/1659572248_refresh_scoped_insights/down.sql
@@ -1,2 +1,2 @@
 -- take no action on down so that the next up will not trigger another refreshing of series data.
-
+ALTER TABLE insight_series DROP COLUMN IF EXISTS needs_migration;
diff --git a/migrations/codeinsights/1672921606_data_retention_jobs_series_metadata/down.sql b/migrations/codeinsights/1672921606_data_retention_jobs_series_metadata/down.sql
index 7e7c6b35a1..08538309e6 100644
--- a/migrations/codeinsights/1672921606_data_retention_jobs_series_metadata/down.sql
+++ b/migrations/codeinsights/1672921606_data_retention_jobs_series_metadata/down.sql
@@ -1,2 +1,4 @@
 ALTER TABLE IF EXISTS insight_data_retention_jobs
 DROP COLUMN IF EXISTS series_id_string;
+
+ALTER TABLE IF EXISTS insights_data_retention_jobs DROP COLUMN IF EXISTS series_id_string;
diff --git a/migrations/codeinsights/1672921606_data_retention_jobs_series_metadata/up.sql b/migrations/codeinsights/1672921606_data_retention_jobs_series_metadata/up.sql
index ec05c39d1c..ad3adb9816 100644
--- a/migrations/codeinsights/1672921606_data_retention_jobs_series_metadata/up.sql
+++ b/migrations/codeinsights/1672921606_data_retention_jobs_series_metadata/up.sql
@@ -1,2 +1,3 @@
 ALTER TABLE IF EXISTS insights_data_retention_jobs
 ADD COLUMN IF NOT EXISTS series_id_string text not null default '';
+
diff --git a/migrations/codeinsights/1679051112_remove_commit_index_tables/down.sql b/migrations/codeinsights/1679051112_remove_commit_index_tables/down.sql
new file mode 100644
index 0000000000..897149898b
--- /dev/null
+++ b/migrations/codeinsights/1679051112_remove_commit_index_tables/down.sql
@@ -0,0 +1,23 @@
+CREATE TABLE IF NOT EXISTS commit_index (
+    committed_at timestamp with time zone NOT NULL,
+    repo_id integer NOT NULL,
+    commit_bytea bytea NOT NULL,
+    indexed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
+    debug_field text
+);
+
+CREATE TABLE IF NOT EXISTS commit_index_metadata (
+   repo_id integer NOT NULL,
+   enabled boolean DEFAULT true NOT NULL,
+   last_indexed_at timestamp with time zone DEFAULT '1900-01-01 00:00:00+00'::timestamp with time zone NOT NULL
+);
+
+ALTER TABLE IF EXISTS commit_index_metadata DROP CONSTRAINT IF EXISTS commit_index_metadata_pkey;
+ALTER TABLE IF EXISTS ONLY commit_index_metadata
+    ADD CONSTRAINT commit_index_metadata_pkey PRIMARY KEY (repo_id);
+
+ALTER TABLE IF EXISTS commit_index DROP CONSTRAINT IF EXISTS commit_index_pkey;
+ALTER TABLE IF EXISTS ONLY commit_index
+    ADD CONSTRAINT commit_index_pkey PRIMARY KEY (committed_at, repo_id, commit_bytea);
+
+CREATE INDEX IF NOT EXISTS commit_index_repo_id_idx ON commit_index USING btree (repo_id, committed_at);
\ No newline at end of file
diff --git a/migrations/codeinsights/1679051112_remove_commit_index_tables/metadata.yaml b/migrations/codeinsights/1679051112_remove_commit_index_tables/metadata.yaml
new file mode 100644
index 0000000000..79fbfef3a5
--- /dev/null
+++ b/migrations/codeinsights/1679051112_remove_commit_index_tables/metadata.yaml
@@ -0,0 +1,2 @@
+name: remove_commit_index_tables
+parents: [1675347548]
diff --git a/migrations/codeinsights/1679051112_remove_commit_index_tables/up.sql b/migrations/codeinsights/1679051112_remove_commit_index_tables/up.sql
new file mode 100644
index 0000000000..3e5e5b624e
--- /dev/null
+++ b/migrations/codeinsights/1679051112_remove_commit_index_tables/up.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS commit_index, commit_index_metadata CASCADE;
\ No newline at end of file
diff --git a/migrations/codeinsights/squashed.sql b/migrations/codeinsights/squashed.sql
index a7be22c84c..2363ee9897 100755
--- a/migrations/codeinsights/squashed.sql
+++ b/migrations/codeinsights/squashed.sql
@@ -47,20 +47,6 @@ CREATE TABLE archived_series_points (
     CONSTRAINT check_repo_fields_specifity CHECK ((((repo_id IS NULL) AND (repo_name_id IS NULL) AND (original_repo_name_id IS NULL)) OR ((repo_id IS NOT NULL) AND (repo_name_id IS NOT NULL) AND (original_repo_name_id IS NOT NULL))))
 );
 
-CREATE TABLE commit_index (
-    committed_at timestamp with time zone NOT NULL,
-    repo_id integer NOT NULL,
-    commit_bytea bytea NOT NULL,
-    indexed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
-    debug_field text
-);
-
-CREATE TABLE commit_index_metadata (
-    repo_id integer NOT NULL,
-    enabled boolean DEFAULT true NOT NULL,
-    last_indexed_at timestamp with time zone DEFAULT '1900-01-01 00:00:00+00'::timestamp with time zone NOT NULL
-);
-
 CREATE TABLE dashboard (
     id integer NOT NULL,
     title text,
@@ -578,12 +564,6 @@ ALTER TABLE ONLY repo_names ALTER COLUMN id SET DEFAULT nextval('repo_names_id_s
 ALTER TABLE ONLY archived_insight_series_recording_times
     ADD CONSTRAINT archived_insight_series_recor_insight_series_id_recording_t_key UNIQUE (insight_series_id, recording_time);
 
-ALTER TABLE ONLY commit_index_metadata
-    ADD CONSTRAINT commit_index_metadata_pkey PRIMARY KEY (repo_id);
-
-ALTER TABLE ONLY commit_index
-    ADD CONSTRAINT commit_index_pkey PRIMARY KEY (committed_at, repo_id, commit_bytea);
-
 ALTER TABLE ONLY dashboard_grants
     ADD CONSTRAINT dashboard_grants_pk PRIMARY KEY (id);
 
@@ -635,8 +615,6 @@ ALTER TABLE ONLY repo_names
 ALTER TABLE ONLY dashboard_insight_view
     ADD CONSTRAINT unique_dashboard_id_insight_view_id UNIQUE (dashboard_id, insight_view_id);
 
-CREATE INDEX commit_index_repo_id_idx ON commit_index USING btree (repo_id, committed_at);
-
 CREATE INDEX dashboard_grants_dashboard_id_index ON dashboard_grants USING btree (dashboard_id);
 
 CREATE INDEX dashboard_grants_global_idx ON dashboard_grants USING btree (global) WHERE (global IS TRUE);
diff --git a/migrations/codeintel/1665531314_remove_api_docs_tables/down.sql b/migrations/codeintel/1665531314_remove_api_docs_tables/down.sql
index cf9f65e9bf..2df0522ad0 100644
--- a/migrations/codeintel/1665531314_remove_api_docs_tables/down.sql
+++ b/migrations/codeintel/1665531314_remove_api_docs_tables/down.sql
@@ -73,6 +73,14 @@ INSERT INTO lsif_data_apidocs_num_pages VALUES (0);
 INSERT INTO lsif_data_apidocs_num_search_results_private VALUES (0);
 INSERT INTO lsif_data_apidocs_num_search_results_public VALUES (0);
 
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_current_private_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_current_private (
     repo_id integer NOT NULL,
     dump_root text NOT NULL,
@@ -80,10 +88,18 @@ CREATE TABLE IF NOT EXISTS lsif_data_docs_search_current_private (
     dump_id integer NOT NULL,
     last_cleanup_scan_at timestamp with time zone DEFAULT now() NOT NULL,
     created_at timestamp with time zone DEFAULT now() NOT NULL,
-    id BIGSERIAL,
+    id int NOT NULL DEFAULT nextval('lsif_data_docs_search_current_private_id_seq'),
     PRIMARY KEY(id)
 );
 
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_current_public_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_current_public (
     repo_id integer NOT NULL,
     dump_root text NOT NULL,
@@ -91,28 +107,53 @@ CREATE TABLE IF NOT EXISTS lsif_data_docs_search_current_public (
     dump_id integer NOT NULL,
     last_cleanup_scan_at timestamp with time zone DEFAULT now() NOT NULL,
     created_at timestamp with time zone DEFAULT now() NOT NULL,
-    id BIGSERIAL,
+    id int NULL DEFAULT nextval('lsif_data_docs_search_current_public_id_seq'),
     PRIMARY KEY(id)
 );
 
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_lang_names_private_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_lang_names_private (
-    id BIGSERIAL,
+    id BIGINT NOT NULL DEFAULT nextval('lsif_data_docs_search_lang_names_private_id_seq'),
     lang_name text NOT NULL,
     tsv tsvector NOT NULL,
     PRIMARY KEY(id),
     UNIQUE(lang_name)
 );
 
+ALTER SEQUENCE lsif_data_docs_search_lang_names_private_id_seq OWNED BY lsif_data_docs_search_lang_names_private.id;
+
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_lang_names_public_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_lang_names_public (
-    id BIGSERIAL,
+    id BIGINT NOT NULL DEFAULT nextval('lsif_data_docs_search_lang_names_public_id_seq'),
     lang_name text NOT NULL,
     tsv tsvector NOT NULL,
     PRIMARY KEY(id),
     UNIQUE(lang_name)
 );
 
+ALTER SEQUENCE lsif_data_docs_search_lang_names_public_id_seq OWNED BY lsif_data_docs_search_lang_names_public.id;
+
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_private_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_private (
-    id BIGSERIAL,
+    id BIGINT NOT NULL DEFAULT nextval('lsif_data_docs_search_private_id_seq'),
     repo_id integer NOT NULL,
     dump_id integer NOT NULL,
     dump_root text NOT NULL,
@@ -130,8 +171,21 @@ CREATE TABLE IF NOT EXISTS lsif_data_docs_search_private (
     PRIMARY KEY(id)
 );
 
+ALTER TABLE lsif_data_docs_search_private
+    DROP CONSTRAINT IF EXISTS lsif_data_docs_search_private_lang_name_id_fk;
+ALTER TABLE lsif_data_docs_search_private ADD CONSTRAINT lsif_data_docs_search_private_lang_name_id_fk FOREIGN KEY (lang_name_id) REFERENCES lsif_data_docs_search_lang_names_private(id);
+
+ALTER SEQUENCE lsif_data_docs_search_private_id_seq OWNED BY lsif_data_docs_search_private.id;
+
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_public_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_public (
-    id BIGSERIAL,
+    id BIGINT NOT NULL DEFAULT nextval('lsif_data_docs_search_public_id_seq'),
     repo_id integer NOT NULL,
     dump_id integer NOT NULL,
     dump_root text NOT NULL,
@@ -149,8 +203,21 @@ CREATE TABLE IF NOT EXISTS lsif_data_docs_search_public (
     PRIMARY KEY(id)
 );
 
+ALTER TABLE lsif_data_docs_search_public
+    DROP CONSTRAINT IF EXISTS lsif_data_docs_search_public_lang_name_id_fk;
+ALTER TABLE lsif_data_docs_search_public ADD CONSTRAINT lsif_data_docs_search_public_lang_name_id_fk FOREIGN KEY (lang_name_id) REFERENCES lsif_data_docs_search_lang_names_public(id);
+
+ALTER SEQUENCE lsif_data_docs_search_public_id_seq OWNED BY lsif_data_docs_search_public.id;
+
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_repo_names_private_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_repo_names_private (
-    id BIGSERIAL,
+    id BIGINT NOT NULL DEFAULT nextval('lsif_data_docs_search_repo_names_private_id_seq'),
     repo_name text NOT NULL,
     tsv tsvector NOT NULL,
     reverse_tsv tsvector NOT NULL,
@@ -158,29 +225,69 @@ CREATE TABLE IF NOT EXISTS lsif_data_docs_search_repo_names_private (
     UNIQUE(repo_name)
 );
 
+ALTER TABLE lsif_data_docs_search_private
+    DROP CONSTRAINT IF EXISTS lsif_data_docs_search_private_repo_name_id_fk;
+ALTER TABLE lsif_data_docs_search_private ADD CONSTRAINT lsif_data_docs_search_private_repo_name_id_fk FOREIGN KEY (repo_name_id) REFERENCES lsif_data_docs_search_repo_names_private(id);
+
+ALTER SEQUENCE lsif_data_docs_search_repo_names_private_id_seq OWNED BY lsif_data_docs_search_repo_names_private.id;
+
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_repo_names_public_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_repo_names_public (
-    id BIGSERIAL,
+    id BIGINT NOT NULL DEFAULT nextval('lsif_data_docs_search_repo_names_public_id_seq'),
     repo_name text NOT NULL,
     tsv tsvector NOT NULL,
     reverse_tsv tsvector NOT NULL,
     PRIMARY KEY(id),
     UNIQUE(repo_name)
 );
+ALTER TABLE lsif_data_docs_search_public
+    DROP CONSTRAINT IF EXISTS lsif_data_docs_search_public_repo_name_id_fk;
+ALTER TABLE lsif_data_docs_search_public ADD CONSTRAINT lsif_data_docs_search_public_repo_name_id_fk FOREIGN KEY (repo_name_id) REFERENCES lsif_data_docs_search_repo_names_public(id);
+
+ALTER SEQUENCE lsif_data_docs_search_repo_names_public_id_seq OWNED BY lsif_data_docs_search_repo_names_public.id;
+
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_tags_private_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
 
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_tags_private (
-    id BIGSERIAL,
+    id BIGINT NOT NULL DEFAULT nextval('lsif_data_docs_search_tags_private_id_seq'),
     tags text NOT NULL UNIQUE,
     tsv tsvector NOT NULL,
     PRIMARY KEY(id)
 );
+ALTER TABLE lsif_data_docs_search_private DROP CONSTRAINT IF EXISTS lsif_data_docs_search_private_tags_id_fk;
+ALTER TABLE lsif_data_docs_search_private ADD CONSTRAINT lsif_data_docs_search_private_tags_id_fk FOREIGN KEY (tags_id) REFERENCES lsif_data_docs_search_tags_private(id);
+
+ALTER SEQUENCE lsif_data_docs_search_tags_private_id_seq OWNED BY lsif_data_docs_search_tags_private.id;
+
+CREATE SEQUENCE IF NOT EXISTS lsif_data_docs_search_tags_public_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
 
 CREATE TABLE IF NOT EXISTS lsif_data_docs_search_tags_public (
-    id BIGSERIAL,
+    id BIGINT NOT NULL DEFAULT nextval('lsif_data_docs_search_tags_public_id_seq'),
     tags text NOT NULL UNIQUE,
     tsv tsvector NOT NULL,
     PRIMARY KEY(id),
     UNIQUE(tags)
 );
+ALTER TABLE lsif_data_docs_search_public DROP CONSTRAINT IF EXISTS lsif_data_docs_search_public_tags_id_fk;
+ALTER TABLE lsif_data_docs_search_public ADD CONSTRAINT lsif_data_docs_search_public_tags_id_fk FOREIGN KEY (tags_id) REFERENCES lsif_data_docs_search_tags_public(id);
+
+ALTER SEQUENCE lsif_data_docs_search_tags_public_id_seq OWNED BY lsif_data_docs_search_tags_public.id;
 
 CREATE TABLE IF NOT EXISTS lsif_data_documentation_mappings (
     dump_id integer NOT NULL,
diff --git a/migrations/codeintel/1665531314_remove_api_docs_tables/up.sql b/migrations/codeintel/1665531314_remove_api_docs_tables/up.sql
index 3aad9edcaf..8597f7ec76 100644
--- a/migrations/codeintel/1665531314_remove_api_docs_tables/up.sql
+++ b/migrations/codeintel/1665531314_remove_api_docs_tables/up.sql
@@ -31,33 +31,49 @@ DROP TABLE IF EXISTS lsif_data_apidocs_num_dumps CASCADE;
 DROP TABLE IF EXISTS lsif_data_apidocs_num_dumps_indexed CASCADE;
 
 DROP TABLE IF EXISTS lsif_data_apidocs_num_pages CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_apidocs_num_pages_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_apidocs_num_search_results_private CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_apidocs_num_search_results_private_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_apidocs_num_search_results_public CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_apidocs_num_search_results_public_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_current_private CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_current_private_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_current_public CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_current_public_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_lang_names_private CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_lang_names_private_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_lang_names_public CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_lang_names_public_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_private CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_private_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_public CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_public_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_repo_names_private CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_repo_names_private_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_repo_names_public CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_repo_names_public_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_tags_private CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_tags_private_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_docs_search_tags_public CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_docs_search_tags_public_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_documentation_mappings CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_documentation_mappings_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_documentation_pages CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_documentation_pages_id_seq;
 
 DROP TABLE IF EXISTS lsif_data_documentation_path_info CASCADE;
+DROP SEQUENCE IF EXISTS lsif_data_documentation_path_info_id_seq;
diff --git a/migrations/codeintel/1670365552_fix_scip_document_schema_counting/down.sql b/migrations/codeintel/1670365552_fix_scip_document_schema_counting/down.sql
index 619a30b08c..04953dd983 100644
--- a/migrations/codeintel/1670365552_fix_scip_document_schema_counting/down.sql
+++ b/migrations/codeintel/1670365552_fix_scip_document_schema_counting/down.sql
@@ -32,8 +32,6 @@ END $$;
 
 DROP TRIGGER IF EXISTS codeintel_scip_documents_schema_versions_insert ON codeintel_scip_documents;
 DROP TRIGGER IF EXISTS codeintel_scip_documents_schema_versions_insert ON codeintel_scip_documents_schema_versions;
-CREATE TRIGGER codeintel_scip_documents_schema_versions_insert AFTER INSERT ON codeintel_scip_documents_schema_versions
-REFERENCING NEW TABLE AS newtab FOR EACH STATEMENT EXECUTE FUNCTION update_codeintel_scip_documents_schema_versions_insert();
 
 -- Restore documents table
 ALTER TABLE codeintel_scip_documents DROP COLUMN IF EXISTS metadata_shard_id;
diff --git a/migrations/codeintel/1686315964_clean_out_schema_versions_tables/down.sql b/migrations/codeintel/1686315964_clean_out_schema_versions_tables/down.sql
new file mode 100644
index 0000000000..8b869a5e67
--- /dev/null
+++ b/migrations/codeintel/1686315964_clean_out_schema_versions_tables/down.sql
@@ -0,0 +1,5 @@
+CREATE TABLE IF NOT EXISTS codeintel_scip_documents_schema_versions (
+    upload_id integer PRIMARY KEY,
+    min_schema_version integer,
+    max_schema_version integer
+);
diff --git a/migrations/codeintel/1686315964_clean_out_schema_versions_tables/metadata.yaml b/migrations/codeintel/1686315964_clean_out_schema_versions_tables/metadata.yaml
new file mode 100644
index 0000000000..33cdeb9dee
--- /dev/null
+++ b/migrations/codeintel/1686315964_clean_out_schema_versions_tables/metadata.yaml
@@ -0,0 +1,2 @@
+name: Clean out schema_versions tables
+parents: [1679010276]
diff --git a/migrations/codeintel/1686315964_clean_out_schema_versions_tables/up.sql b/migrations/codeintel/1686315964_clean_out_schema_versions_tables/up.sql
new file mode 100644
index 0000000000..4f6b2138bc
--- /dev/null
+++ b/migrations/codeintel/1686315964_clean_out_schema_versions_tables/up.sql
@@ -0,0 +1,5 @@
+DROP TABLE IF EXISTS codeintel_scip_documents_schema_versions;
+
+-- Clear data that we've been neglecting to clean up
+DELETE FROM codeintel_scip_symbols_schema_versions sv         WHERE NOT EXISTS (SELECT 1 FROM codeintel_scip_metadata m WHERE m.upload_id = sv.upload_id);
+DELETE FROM codeintel_scip_document_lookup_schema_versions sv WHERE NOT EXISTS (SELECT 1 FROM codeintel_scip_metadata m WHERE m.upload_id = sv.upload_id);
diff --git a/migrations/codeintel/squashed.sql b/migrations/codeintel/squashed.sql
index ceafe68b19..33e0a28a3c 100755
--- a/migrations/codeintel/squashed.sql
+++ b/migrations/codeintel/squashed.sql
@@ -176,20 +176,6 @@ CREATE SEQUENCE codeintel_scip_documents_id_seq
 
 ALTER SEQUENCE codeintel_scip_documents_id_seq OWNED BY codeintel_scip_documents.id;
 
-CREATE TABLE codeintel_scip_documents_schema_versions (
-    upload_id integer NOT NULL,
-    min_schema_version integer,
-    max_schema_version integer
-);
-
-COMMENT ON TABLE codeintel_scip_documents_schema_versions IS 'Tracks the range of `schema_versions` values associated with each document referenced from the [`codeintel_scip_document_lookup`](#table-publiccodeintel_scip_document_lookup) table.';
-
-COMMENT ON COLUMN codeintel_scip_documents_schema_versions.upload_id IS 'The identifier of the associated SCIP index.';
-
-COMMENT ON COLUMN codeintel_scip_documents_schema_versions.min_schema_version IS 'A lower-bound on the `schema_version` values of the document records referenced from the table [`codeintel_scip_document_lookup`](#table-publiccodeintel_scip_document_lookup) where the `upload_id` column matches the associated SCIP index.';
-
-COMMENT ON COLUMN codeintel_scip_documents_schema_versions.max_schema_version IS 'An upper-bound on the `schema_version` values of the document records referenced from the table [`codeintel_scip_document_lookup`](#table-publiccodeintel_scip_document_lookup) where the `upload_id` column matches the associated SCIP index.';
-
 CREATE TABLE codeintel_scip_metadata (
     id bigint NOT NULL,
     upload_id integer NOT NULL,
@@ -373,9 +359,6 @@ ALTER TABLE ONLY codeintel_scip_documents
 ALTER TABLE ONLY codeintel_scip_documents
     ADD CONSTRAINT codeintel_scip_documents_pkey PRIMARY KEY (id);
 
-ALTER TABLE ONLY codeintel_scip_documents_schema_versions
-    ADD CONSTRAINT codeintel_scip_documents_schema_versions_pkey PRIMARY KEY (upload_id);
-
 ALTER TABLE ONLY codeintel_scip_metadata
     ADD CONSTRAINT codeintel_scip_metadata_pkey PRIMARY KEY (id);
 
diff --git a/migrations/frontend/1648195639_squashed_migrations_unprivileged/up.sql b/migrations/frontend/1648195639_squashed_migrations_unprivileged/up.sql
index 63d60cd0da..616298cea8 100644
--- a/migrations/frontend/1648195639_squashed_migrations_unprivileged/up.sql
+++ b/migrations/frontend/1648195639_squashed_migrations_unprivileged/up.sql
@@ -1166,7 +1166,7 @@ CREATE TABLE insights_query_runner_jobs (
     queued_at timestamp with time zone DEFAULT now()
 );
 
-COMMENT ON TABLE insights_query_runner_jobs IS 'See [enterprise/internal/insights/background/queryrunner/worker.go:Job](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+file:enterprise/internal/insights/background/queryrunner/worker.go+type+Job&patternType=literal)';
+COMMENT ON TABLE insights_query_runner_jobs IS 'See [internal/insights/background/queryrunner/worker.go:Job](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+file:internal/insights/background/queryrunner/worker.go+type+Job&patternType=literal)';
 
 COMMENT ON COLUMN insights_query_runner_jobs.priority IS 'Integer representing a category of priority for this query. Priority in this context is ambiguously defined for consumers to decide an interpretation.';
 
diff --git a/migrations/frontend/1648628900_rename_localclone_worker_table/down.sql b/migrations/frontend/1648628900_rename_localclone_worker_table/down.sql
index 3b111d6a01..82e893f10e 100644
--- a/migrations/frontend/1648628900_rename_localclone_worker_table/down.sql
+++ b/migrations/frontend/1648628900_rename_localclone_worker_table/down.sql
@@ -26,7 +26,22 @@ CREATE TABLE IF NOT EXISTS gitserver_localclone_jobs (
 );
 
 -- create the old view
-CREATE OR REPLACE VIEW gitserver_localclone_jobs_with_repo_name AS
-  SELECT glj.*, r.name AS repo_name
-  FROM gitserver_localclone_jobs glj
-  JOIN repo r ON r.id = glj.repo_id;
+CREATE OR REPLACE VIEW gitserver_localclone_jobs_with_repo_name AS SELECT glj.id,
+  glj.state,
+  glj.failure_message,
+  glj.started_at,
+  glj.finished_at,
+  glj.process_after,
+  glj.num_resets,
+  glj.num_failures,
+  glj.last_heartbeat_at,
+  glj.execution_logs,
+  glj.worker_hostname,
+  glj.repo_id,
+  glj.source_hostname,
+  glj.dest_hostname,
+  glj.delete_source,
+  glj.queued_at,
+  r.name AS repo_name
+FROM (gitserver_localclone_jobs glj
+JOIN repo r ON ((r.id = glj.repo_id)));
diff --git a/migrations/frontend/1652707934_add_last_check_at_to_codeintel_lockfile_references/down.sql b/migrations/frontend/1652707934_add_last_check_at_to_codeintel_lockfile_references/down.sql
index 65012b52fa..6fd40d4921 100644
--- a/migrations/frontend/1652707934_add_last_check_at_to_codeintel_lockfile_references/down.sql
+++ b/migrations/frontend/1652707934_add_last_check_at_to_codeintel_lockfile_references/down.sql
@@ -2,3 +2,9 @@ ALTER TABLE
     codeintel_lockfile_references
 DROP
     COLUMN IF EXISTS last_check_at;
+
+DROP INDEX codeintel_lockfile_references_repository_id_commit_bytea;
+CREATE UNIQUE INDEX codeintel_lockfile_references_repository_id_commit_bytea
+ON codeintel_lockfile_references
+USING btree (repository_id, commit_bytea)
+WHERE repository_id IS NOT NULL AND commit_bytea IS NOT NULL;
diff --git a/migrations/frontend/1655157509_no_more_ssbc_access_tokens/down.sql b/migrations/frontend/1655157509_no_more_ssbc_access_tokens/down.sql
index fcb088004a..3aa7e6aca3 100644
--- a/migrations/frontend/1655157509_no_more_ssbc_access_tokens/down.sql
+++ b/migrations/frontend/1655157509_no_more_ssbc_access_tokens/down.sql
@@ -1,12 +1,31 @@
-ALTER TABLE batch_spec_workspace_execution_jobs ADD COLUMN IF NOT EXISTS access_token_id integer REFERENCES access_tokens(id);
+ALTER TABLE batch_spec_workspace_execution_jobs ADD COLUMN IF NOT EXISTS access_token_id bigint REFERENCES access_tokens(id);
 
-DROP VIEW IF EXISTS batch_spec_workspace_execution_jobs_with_rank;
-CREATE VIEW batch_spec_workspace_execution_jobs_with_rank AS (
-    SELECT
-        j.*,
-        q.place_in_global_queue,
-        q.place_in_user_queue
-    FROM
-        batch_spec_workspace_execution_jobs j
-    LEFT JOIN batch_spec_workspace_execution_queue q ON j.id = q.id
-);
+ALTER TABLE batch_spec_workspace_execution_jobs DROP CONSTRAINT batch_spec_workspace_execution_jobs_access_token_id_fkey;
+ALTER TABLE batch_spec_workspace_execution_jobs
+ADD CONSTRAINT batch_spec_workspace_execution_jobs_access_token_id_fkey
+FOREIGN KEY (access_token_id)
+REFERENCES access_tokens(id) ON DELETE SET NULL DEFERRABLE;
+
+DROP VIEW batch_spec_workspace_execution_jobs_with_rank;
+CREATE VIEW batch_spec_workspace_execution_jobs_with_rank AS SELECT j.id,
+  j.batch_spec_workspace_id,
+  j.state,
+  j.failure_message,
+  j.started_at,
+  j.finished_at,
+  j.process_after,
+  j.num_resets,
+  j.num_failures,
+  j.execution_logs,
+  j.worker_hostname,
+  j.last_heartbeat_at,
+  j.created_at,
+  j.updated_at,
+  j.cancel,
+  j.access_token_id,
+  j.queued_at,
+  j.user_id,
+  q.place_in_global_queue,
+  q.place_in_user_queue
+ FROM (batch_spec_workspace_execution_jobs j
+ LEFT JOIN batch_spec_workspace_execution_queue q ON ((j.id = q.id)));
diff --git a/migrations/frontend/1667220626_rename_codeintel_path_ranks_key/down.sql b/migrations/frontend/1667220626_rename_codeintel_path_ranks_key/down.sql
index a6be77a796..55a45c1c35 100644
--- a/migrations/frontend/1667220626_rename_codeintel_path_ranks_key/down.sql
+++ b/migrations/frontend/1667220626_rename_codeintel_path_ranks_key/down.sql
@@ -1,3 +1,3 @@
--- Note: same as up.sql
 ALTER TABLE codeintel_path_ranks DROP CONSTRAINT IF EXISTS codeintel_path_ranks_repository_id_key;
-CREATE UNIQUE INDEX IF NOT EXISTS codeintel_path_ranks_repository_id ON codeintel_path_ranks (repository_id);
+ALTER TABLE codeintel_path_ranks ADD CONSTRAINT codeintel_path_ranks_repository_id_key UNIQUE (repository_id);
+DROP INDEX IF EXISTS codeintel_path_ranks_repository_id;
diff --git a/migrations/frontend/1670934184_add_gitserver_corruption_columns/down.sql b/migrations/frontend/1670934184_add_gitserver_corruption_columns/down.sql
index df26d5e9ee..bd7c7b2669 100644
--- a/migrations/frontend/1670934184_add_gitserver_corruption_columns/down.sql
+++ b/migrations/frontend/1670934184_add_gitserver_corruption_columns/down.sql
@@ -1,4 +1,7 @@
 ALTER TABLE gitserver_repos
-    DROP COLUMN IF EXISTS corrupted_at,
+    DROP COLUMN IF EXISTS corrupted_at;
+
+ALTER TABLE gitserver_repos
     DROP COLUMN IF EXISTS corrupted_logs;
 
+ALTER TABLE gitserver_repos DROP COLUMN IF EXISTS corruption_logs;
diff --git a/migrations/frontend/1674455760_add_cancellation_reason_to_permission_sync_jobs_table/down.sql b/migrations/frontend/1674455760_add_cancellation_reason_to_permission_sync_jobs_table/down.sql
index 5dddd05efd..27c31758d2 100644
--- a/migrations/frontend/1674455760_add_cancellation_reason_to_permission_sync_jobs_table/down.sql
+++ b/migrations/frontend/1674455760_add_cancellation_reason_to_permission_sync_jobs_table/down.sql
@@ -1,3 +1 @@
-ALTER TABLE permission_sync_jobs
-    DROP COLUMN IF EXISTS reason,
-    DROP COLUMN IF EXISTS triggered_by_user_id;
+ALTER TABLE permission_sync_jobs DROP COLUMN IF EXISTS cancellation_reason;
diff --git a/migrations/frontend/1675962678_remove_action_namespace_perms/down.sql b/migrations/frontend/1675962678_remove_action_namespace_perms/down.sql
index 5b5cf457d3..a5d912be38 100644
--- a/migrations/frontend/1675962678_remove_action_namespace_perms/down.sql
+++ b/migrations/frontend/1675962678_remove_action_namespace_perms/down.sql
@@ -4,3 +4,9 @@ ALTER TABLE namespace_permissions
 ALTER TABLE namespace_permissions DROP CONSTRAINT IF EXISTS unique_resource_permission;
 
 CREATE UNIQUE INDEX IF NOT EXISTS unique_resource_permission ON namespace_permissions (namespace, resource_id, action, user_id);
+
+DROP INDEX IF EXISTS unique_resource_permission;
+ALTER TABLE namespace_permissions DROP CONSTRAINT IF EXISTS unique_resource_permission;
+ALTER TABLE namespace_permissions ADD CONSTRAINT unique_resource_permission UNIQUE (namespace, resource_id, action, user_id);
+ALTER TABLE namespace_permissions DROP CONSTRAINT IF EXISTS action_not_blank;
+ALTER TABLE namespace_permissions ADD CONSTRAINT action_not_blank CHECK (action <> ''::text);
diff --git a/migrations/frontend/1676420496_frontend/down.sql b/migrations/frontend/1676420496_frontend/down.sql
index b07cbfdd8f..106fc46ae2 100644
--- a/migrations/frontend/1676420496_frontend/down.sql
+++ b/migrations/frontend/1676420496_frontend/down.sql
@@ -13,53 +13,55 @@ DROP COLUMN IF EXISTS
 
 CREATE VIEW reconciler_changesets AS
 SELECT c.id,
-    c.batch_change_ids,
-    c.repo_id,
-    c.queued_at,
-    c.created_at,
-    c.updated_at,
-    c.metadata,
-    c.external_id,
-    c.external_service_type,
-    c.external_deleted_at,
-    c.external_branch,
-    c.external_updated_at,
-    c.external_state,
-    c.external_review_state,
-    c.external_check_state,
-    c.diff_stat_added,
-    c.diff_stat_deleted,
-    c.sync_state,
-    c.current_spec_id,
-    c.previous_spec_id,
-    c.publication_state,
-    c.owned_by_batch_change_id,
-    c.reconciler_state,
-    c.computed_state,
-    c.failure_message,
-    c.started_at,
-    c.finished_at,
-    c.process_after,
-    c.num_resets,
-    c.closing,
-    c.num_failures,
-    c.log_contents,
-    c.execution_logs,
-    c.syncer_error,
-    c.external_title,
-    c.worker_hostname,
-    c.ui_publication_state,
-    c.last_heartbeat_at,
-    c.external_fork_namespace,
-    c.detached_at
-FROM changesets c
-JOIN repo r ON r.id = c.repo_id
-WHERE r.deleted_at IS NULL AND EXISTS (
+  c.batch_change_ids,
+  c.repo_id,
+  c.queued_at,
+  c.created_at,
+  c.updated_at,
+  c.metadata,
+  c.external_id,
+  c.external_service_type,
+  c.external_deleted_at,
+  c.external_branch,
+  c.external_updated_at,
+  c.external_state,
+  c.external_review_state,
+  c.external_check_state,
+  c.diff_stat_added,
+  c.diff_stat_deleted,
+  c.sync_state,
+  c.current_spec_id,
+  c.previous_spec_id,
+  c.publication_state,
+  c.owned_by_batch_change_id,
+  c.reconciler_state,
+  c.computed_state,
+  c.failure_message,
+  c.started_at,
+  c.finished_at,
+  c.process_after,
+  c.num_resets,
+  c.closing,
+  c.num_failures,
+  c.log_contents,
+  c.execution_logs,
+  c.syncer_error,
+  c.external_title,
+  c.worker_hostname,
+  c.ui_publication_state,
+  c.last_heartbeat_at,
+  c.external_fork_name,
+  c.external_fork_namespace,
+  c.detached_at
+FROM (changesets c
+JOIN repo r ON ((r.id = c.repo_id)))
+WHERE ((r.deleted_at IS NULL) AND (EXISTS (
     SELECT 1
-    FROM batch_changes
-        LEFT JOIN users namespace_user ON batch_changes.namespace_user_id = namespace_user.id
-        LEFT JOIN orgs namespace_org ON batch_changes.namespace_org_id = namespace_org.id
-    WHERE c.batch_change_ids ? batch_changes.id::text AND namespace_user.deleted_at IS NULL AND namespace_org.deleted_at IS NULL
-    );
+    FROM ((batch_changes
+        LEFT JOIN users namespace_user ON ((batch_changes.namespace_user_id = namespace_user.id)))
+        LEFT JOIN orgs namespace_org ON ((batch_changes.namespace_org_id = namespace_org.id)))
+        WHERE ((c.batch_change_ids ? (batch_changes.id)::text) AND (namespace_user.deleted_at IS NULL) AND (namespace_org.deleted_at IS NULL
+    ))
+)));
 
 COMMIT;
diff --git a/migrations/frontend/1677003167_package_repos_separate_versions_table_stage2/down.sql b/migrations/frontend/1677003167_package_repos_separate_versions_table_stage2/down.sql
index 4248eed6cd..c00cf2cb70 100644
--- a/migrations/frontend/1677003167_package_repos_separate_versions_table_stage2/down.sql
+++ b/migrations/frontend/1677003167_package_repos_separate_versions_table_stage2/down.sql
@@ -1,4 +1,5 @@
 ALTER TABLE lsif_dependency_repos ADD COLUMN IF NOT EXISTS version TEXT DEFAULT '👁️temporary_sentinel_value👁️';
+ALTER TABLE lsif_dependency_repos ALTER COLUMN version SET NOT NULL;
 
 CREATE OR REPLACE FUNCTION func_lsif_dependency_repos_backfill() RETURNS TRIGGER AS $$
     BEGIN
@@ -14,3 +15,6 @@ CREATE TRIGGER lsif_dependency_repos_backfill AFTER INSERT ON lsif_dependency_re
 FOR EACH ROW
 WHEN (NEW.version <> '👁️temporary_sentinel_value👁️')
 EXECUTE FUNCTION func_lsif_dependency_repos_backfill();
+
+ALTER TABLE lsif_dependency_repos DROP CONSTRAINT IF EXISTS lsif_dependency_repos_unique_triplet;
+ALTER TABLE lsif_dependency_repos ADD CONSTRAINT lsif_dependency_repos_unique_triplet UNIQUE (scheme, name, version);
diff --git a/migrations/frontend/1677944752_drop_unused_lockfiles_tables/down.sql b/migrations/frontend/1677944752_drop_unused_lockfiles_tables/down.sql
index 0964e7f934..d5d75ba2b0 100644
--- a/migrations/frontend/1677944752_drop_unused_lockfiles_tables/down.sql
+++ b/migrations/frontend/1677944752_drop_unused_lockfiles_tables/down.sql
@@ -31,3 +31,12 @@ CREATE UNIQUE INDEX IF NOT EXISTS codeintel_lockfile_references_repository_name_
 CREATE INDEX IF NOT EXISTS codeintel_lockfiles_codeintel_lockfile_reference_ids ON codeintel_lockfiles USING gin (codeintel_lockfile_reference_ids gin__int_ops);
 CREATE INDEX IF NOT EXISTS codeintel_lockfiles_references_depends_on ON codeintel_lockfile_references USING gin (depends_on gin__int_ops);
 CREATE UNIQUE INDEX IF NOT EXISTS codeintel_lockfiles_repository_id_commit_bytea_lockfile ON codeintel_lockfiles USING btree (repository_id, commit_bytea, lockfile);
+
+CREATE TABLE IF NOT EXISTS last_lockfile_scan (
+    repository_id integer NOT NULL PRIMARY KEY,
+    last_lockfile_scan_at timestamp with time zone NOT NULL
+);
+
+COMMENT ON TABLE last_lockfile_scan IS 'Tracks the last time repository was checked for lockfile indexing.';
+
+COMMENT ON COLUMN last_lockfile_scan.last_lockfile_scan_at IS 'The last time this repository was considered for lockfile indexing.';
diff --git a/migrations/frontend/1678214530_fix_indexes_on_ranking_tables/down.sql b/migrations/frontend/1678214530_fix_indexes_on_ranking_tables/down.sql
index 367f60d821..0a997d6e8b 100644
--- a/migrations/frontend/1678214530_fix_indexes_on_ranking_tables/down.sql
+++ b/migrations/frontend/1678214530_fix_indexes_on_ranking_tables/down.sql
@@ -3,6 +3,7 @@ DROP INDEX IF EXISTS codeintel_ranking_references_graph_key_id;
 DROP INDEX IF EXISTS codeintel_ranking_definitions_graph_key_symbol_search;
 DROP INDEX IF EXISTS codeintel_path_ranks_graph_key;
 DROP INDEX IF EXISTS codeintel_path_ranks_repository_id_updated_at_id;
+DROP INDEX IF EXISTS codeintel_path_ranks_updated_at;
 
 TRUNCATE codeintel_ranking_definitions CASCADE;
 TRUNCATE codeintel_ranking_path_counts_inputs CASCADE;
@@ -14,4 +15,4 @@ CREATE INDEX IF NOT EXISTS codeintel_ranking_path_counts_inputs_graph_key_reposi
 CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_upload_id ON codeintel_ranking_definitions(upload_id);
 CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_symbol_name ON codeintel_ranking_definitions(symbol_name);
 CREATE INDEX IF NOT EXISTS codeintel_path_ranks_repository_id ON codeintel_path_ranks(repository_id);
-CREATE INDEX IF NOT EXISTS codeintel_path_ranks_updated_at ON codeintel_path_ranks(updated_at);
+CREATE INDEX IF NOT EXISTS codeintel_path_ranks_updated_at ON codeintel_path_ranks USING btree (updated_at) INCLUDE (repository_id);
diff --git a/migrations/frontend/1678456448_make_role_name_citext/down.sql b/migrations/frontend/1678456448_make_role_name_citext/down.sql
index 2cb8c607de..cf825dcfe4 100644
--- a/migrations/frontend/1678456448_make_role_name_citext/down.sql
+++ b/migrations/frontend/1678456448_make_role_name_citext/down.sql
@@ -18,3 +18,6 @@ EXCEPTION
     WHEN undefined_column THEN RAISE NOTICE 'column name_text does not exist in table roles';
     WHEN duplicate_object THEN RAISE NOTICE 'constrant roles_name already exists';
 END $$;
+
+ALTER TABLE roles ALTER COLUMN name SET NOT NULL;
+ALTER TABLE roles ADD CONSTRAINT name_not_blank CHECK (name <> ''::text);
diff --git a/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/down.sql b/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/down.sql
new file mode 100644
index 0000000000..d3f5ed96a8
--- /dev/null
+++ b/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/down.sql
@@ -0,0 +1,15 @@
+-- Hey you know what, deal with it.
+
+DROP SEQUENCE IF EXISTS codeintel_ranking_references_processed_id_seq CASCADE;
+CREATE SEQUENCE codeintel_ranking_references_processed_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+-- ALTER SEQUENCE codeintel_ranking_references_processed_id_seq OWNED BY codeintel_ranking_references_processed.id;
+ALTER SEQUENCE codeintel_ranking_references_processed_id_seq as integer MAXVALUE 2147483647;
+ALTER TABLE ONLY codeintel_ranking_references_processed ALTER COLUMN id TYPE integer USING (id::integer);
+ALTER TABLE ONLY codeintel_ranking_references_processed ALTER COLUMN id SET DEFAULT nextval('codeintel_ranking_references_processed_id_seq'::regclass);
+-- ALTER SEQUENCE codeintel_ranking_references_processed_id_seq as bigint MAXVALUE 2147483647;
diff --git a/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/metadata.yaml b/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/metadata.yaml
new file mode 100644
index 0000000000..b3b0e2875f
--- /dev/null
+++ b/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/metadata.yaml
@@ -0,0 +1,2 @@
+name: Upsize codeintel_ranking_references_processed datatype
+parents: [1678601228, 1678832491]
diff --git a/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/up.sql b/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/up.sql
new file mode 100644
index 0000000000..53c0d9e9fb
--- /dev/null
+++ b/migrations/frontend/1679058200_upsize_codeintel_ranking_references_processed_datatype/up.sql
@@ -0,0 +1,20 @@
+-- Create and backfill new bigint identity column (with temporary name)
+ALTER TABLE codeintel_ranking_references_processed ADD COLUMN idx bigint;
+UPDATE codeintel_ranking_references_processed SET idx = id;
+
+-- Alter integer sequence to be backed by bigint
+ALTER SEQUENCE codeintel_ranking_references_processed_id_seq as bigint MAXVALUE 9223372036854775807;
+
+-- Register sequence as column default (POST BACKFILL)
+ALTER TABLE codeintel_ranking_references_processed ALTER COLUMN idx SET DEFAULT nextval('codeintel_ranking_references_processed_id_seq'::regclass);
+
+-- Swap primary key constraint
+ALTER TABLE codeintel_ranking_references_processed DROP CONSTRAINT codeintel_ranking_references_processed_pkey;
+ALTER TABLE codeintel_ranking_references_processed ADD PRIMARY KEY (idx);
+
+-- Swap ownership (sequence can't be owned by id before we drop it)
+ALTER SEQUENCE codeintel_ranking_references_processed_id_seq OWNED BY codeintel_ranking_references_processed.idx;
+
+-- Swap id columns
+ALTER TABLE codeintel_ranking_references_processed DROP COLUMN id;
+ALTER TABLE codeintel_ranking_references_processed RENAME COLUMN idx TO id;
diff --git a/migrations/frontend/1679404397_add_missing_index_for_vacuum/down.sql b/migrations/frontend/1679404397_add_missing_index_for_vacuum/down.sql
new file mode 100644
index 0000000000..7c72f266f5
--- /dev/null
+++ b/migrations/frontend/1679404397_add_missing_index_for_vacuum/down.sql
@@ -0,0 +1 @@
+DROP INDEX IF EXISTS codeintel_ranking_path_counts_inputs_graph_key_id;
diff --git a/migrations/frontend/1679404397_add_missing_index_for_vacuum/metadata.yaml b/migrations/frontend/1679404397_add_missing_index_for_vacuum/metadata.yaml
new file mode 100644
index 0000000000..9974a75652
--- /dev/null
+++ b/migrations/frontend/1679404397_add_missing_index_for_vacuum/metadata.yaml
@@ -0,0 +1,3 @@
+name: Add missing index for vacuum
+parents: [1678899992, 1678994673, 1679058200]
+createIndexConcurrently: true
diff --git a/migrations/frontend/1679404397_add_missing_index_for_vacuum/up.sql b/migrations/frontend/1679404397_add_missing_index_for_vacuum/up.sql
new file mode 100644
index 0000000000..1eae14a5c4
--- /dev/null
+++ b/migrations/frontend/1679404397_add_missing_index_for_vacuum/up.sql
@@ -0,0 +1 @@
+CREATE INDEX CONCURRENTLY IF NOT EXISTS codeintel_ranking_path_counts_inputs_graph_key_id ON codeintel_ranking_path_counts_inputs(graph_key, id);
diff --git a/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/down.sql b/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/down.sql
new file mode 100644
index 0000000000..0021076f98
--- /dev/null
+++ b/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/down.sql
@@ -0,0 +1,7 @@
+CREATE OR REPLACE FUNCTION soft_deleted_repository_name(name text) RETURNS text
+    LANGUAGE plpgsql STRICT
+    AS $$
+BEGIN
+    RETURN 'DELETED-' || extract(epoch from transaction_timestamp()) || '-' || name;
+END;
+$$;
diff --git a/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/metadata.yaml b/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/metadata.yaml
new file mode 100644
index 0000000000..a8292bd29a
--- /dev/null
+++ b/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/metadata.yaml
@@ -0,0 +1,2 @@
+name: soft_deleted_repository_name_reconciling_names
+parents: [1679404397]
diff --git a/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/up.sql b/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/up.sql
new file mode 100644
index 0000000000..d4a1865ff7
--- /dev/null
+++ b/migrations/frontend/1679426934_soft_deleted_repository_name_reconciling_names/up.sql
@@ -0,0 +1,11 @@
+CREATE OR REPLACE FUNCTION soft_deleted_repository_name(name text) RETURNS text
+    LANGUAGE plpgsql
+    AS $$
+BEGIN
+    IF name LIKE 'DELETED-%' THEN
+        RETURN name;
+    ELSE
+        RETURN 'DELETED-' || extract(epoch from transaction_timestamp()) || '-' || name;
+    END IF;
+END;
+$$;
diff --git a/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/down.sql b/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/down.sql
new file mode 100644
index 0000000000..7a35e8fab7
--- /dev/null
+++ b/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/down.sql
@@ -0,0 +1 @@
+DROP INDEX IF EXISTS codeintel_ranking_references_processed_reference_id;
diff --git a/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/metadata.yaml b/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/metadata.yaml
new file mode 100644
index 0000000000..8e5b92f4cb
--- /dev/null
+++ b/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/metadata.yaml
@@ -0,0 +1,3 @@
+name: Speed up deletes from ranking table
+parents: [1679404397]
+createIndexConcurrently: true
diff --git a/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/up.sql b/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/up.sql
new file mode 100644
index 0000000000..0f6dc0ef58
--- /dev/null
+++ b/migrations/frontend/1679428966_speed_up_deletes_from_ranking_table/up.sql
@@ -0,0 +1 @@
+CREATE INDEX CONCURRENTLY IF NOT EXISTS codeintel_ranking_references_processed_reference_id ON codeintel_ranking_references_processed (codeintel_ranking_reference_id);
diff --git a/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/down.sql b/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/down.sql
new file mode 100644
index 0000000000..c813fb34da
--- /dev/null
+++ b/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/down.sql
@@ -0,0 +1 @@
+DROP INDEX IF EXISTS cm_action_jobs_trigger_event;
diff --git a/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/metadata.yaml b/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/metadata.yaml
new file mode 100644
index 0000000000..ee71d23ef8
--- /dev/null
+++ b/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/metadata.yaml
@@ -0,0 +1,3 @@
+name: Speed up deletes from cm_trigger_jobs
+parents: [1679428966]
+createIndexConcurrently: true
diff --git a/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/up.sql b/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/up.sql
new file mode 100644
index 0000000000..4f8848eee4
--- /dev/null
+++ b/migrations/frontend/1679432506_speed_up_deletes_from_cm_trigger_jobs/up.sql
@@ -0,0 +1 @@
+CREATE INDEX CONCURRENTLY IF NOT EXISTS cm_action_jobs_trigger_event ON cm_action_jobs (trigger_event);
diff --git a/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/down.sql b/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/down.sql
new file mode 100644
index 0000000000..4effc8a12e
--- /dev/null
+++ b/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/down.sql
@@ -0,0 +1,2 @@
+ALTER TABLE IF EXISTS gitserver_repos
+DROP COLUMN IF EXISTS cloning_progress;
diff --git a/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/metadata.yaml b/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/metadata.yaml
new file mode 100644
index 0000000000..01d318adc6
--- /dev/null
+++ b/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/metadata.yaml
@@ -0,0 +1,2 @@
+name: keep_cloning_progress_in_gitserver_repos
+parents: [1679426934, 1679432506]
diff --git a/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/up.sql b/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/up.sql
new file mode 100644
index 0000000000..cb305fe388
--- /dev/null
+++ b/migrations/frontend/1679603787_keep_cloning_progress_in_gitserver_repos/up.sql
@@ -0,0 +1,2 @@
+ALTER TABLE IF EXISTS gitserver_repos
+ADD COLUMN IF NOT EXISTS cloning_progress text DEFAULT '';
diff --git a/migrations/frontend/1679690266_batch_initial_path_counts/down.sql b/migrations/frontend/1679690266_batch_initial_path_counts/down.sql
new file mode 100644
index 0000000000..a75946bf2a
--- /dev/null
+++ b/migrations/frontend/1679690266_batch_initial_path_counts/down.sql
@@ -0,0 +1,2 @@
+ALTER TABLE codeintel_initial_path_ranks DROP COLUMN IF EXISTS document_paths;
+ALTER TABLE codeintel_initial_path_ranks ALTER COLUMN document_path DROP DEFAULT;
diff --git a/migrations/frontend/1679690266_batch_initial_path_counts/metadata.yaml b/migrations/frontend/1679690266_batch_initial_path_counts/metadata.yaml
new file mode 100644
index 0000000000..5cb1a14767
--- /dev/null
+++ b/migrations/frontend/1679690266_batch_initial_path_counts/metadata.yaml
@@ -0,0 +1,2 @@
+name: Batch initial path counts
+parents: [1679603787]
diff --git a/migrations/frontend/1679690266_batch_initial_path_counts/up.sql b/migrations/frontend/1679690266_batch_initial_path_counts/up.sql
new file mode 100644
index 0000000000..b679212af6
--- /dev/null
+++ b/migrations/frontend/1679690266_batch_initial_path_counts/up.sql
@@ -0,0 +1,2 @@
+ALTER TABLE codeintel_initial_path_ranks ALTER COLUMN document_path SET DEFAULT '';
+ALTER TABLE codeintel_initial_path_ranks ADD COLUMN IF NOT EXISTS document_paths TEXT[] NOT NULL DEFAULT '{}';
diff --git a/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/down.sql b/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/down.sql
new file mode 100644
index 0000000000..d68686e071
--- /dev/null
+++ b/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/down.sql
@@ -0,0 +1,2 @@
+ALTER TABLE IF EXISTS permission_sync_jobs
+    DROP COLUMN IF EXISTS is_partial_success;
diff --git a/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/metadata.yaml b/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/metadata.yaml
new file mode 100644
index 0000000000..968f9b5e65
--- /dev/null
+++ b/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/metadata.yaml
@@ -0,0 +1,2 @@
+name: add is_partial_success to permission_sync_jobs
+parents: [1679690266]
diff --git a/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/up.sql b/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/up.sql
new file mode 100644
index 0000000000..f247362cde
--- /dev/null
+++ b/migrations/frontend/1680088638_add_is_partial_success_to_permission_sync_jobs/up.sql
@@ -0,0 +1,2 @@
+ALTER TABLE IF EXISTS permission_sync_jobs
+    ADD COLUMN IF NOT EXISTS is_partial_success BOOLEAN DEFAULT FALSE;
diff --git a/migrations/frontend/1680296731_package_repos_package_name_regex_match/down.sql b/migrations/frontend/1680296731_package_repos_package_name_regex_match/down.sql
new file mode 100644
index 0000000000..fcf40556cd
--- /dev/null
+++ b/migrations/frontend/1680296731_package_repos_package_name_regex_match/down.sql
@@ -0,0 +1 @@
+DROP INDEX IF EXISTS lsif_dependency_repos_name_gin;
diff --git a/migrations/frontend/1680296731_package_repos_package_name_regex_match/metadata.yaml b/migrations/frontend/1680296731_package_repos_package_name_regex_match/metadata.yaml
new file mode 100644
index 0000000000..4214ed3bd9
--- /dev/null
+++ b/migrations/frontend/1680296731_package_repos_package_name_regex_match/metadata.yaml
@@ -0,0 +1,2 @@
+name: package_repos_package_name_regex_match
+parents: [1679426934, 1679432506]
diff --git a/migrations/frontend/1680296731_package_repos_package_name_regex_match/up.sql b/migrations/frontend/1680296731_package_repos_package_name_regex_match/up.sql
new file mode 100644
index 0000000000..712fb636bd
--- /dev/null
+++ b/migrations/frontend/1680296731_package_repos_package_name_regex_match/up.sql
@@ -0,0 +1,3 @@
+CREATE INDEX IF NOT EXISTS lsif_dependency_repos_name_gin
+ON lsif_dependency_repos
+USING gin (name gin_trgm_ops)
diff --git a/migrations/frontend/1680707560_sg_telemetry_allowlist/down.sql b/migrations/frontend/1680707560_sg_telemetry_allowlist/down.sql
new file mode 100644
index 0000000000..8504fca15d
--- /dev/null
+++ b/migrations/frontend/1680707560_sg_telemetry_allowlist/down.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry add`
+DELETE FROM event_logs_export_allowlist WHERE event_name IN (SELECT * FROM UNNEST('{AccessRequestsPageViewed,AccessRequestFailed,CreateAccessRequestSucceeded,AccessRequestRejected,AccessRequestApproved,SearchInputAdd,SearchInputGoto,SearchInputCommand}'::TEXT[]));
diff --git a/migrations/frontend/1680707560_sg_telemetry_allowlist/metadata.yaml b/migrations/frontend/1680707560_sg_telemetry_allowlist/metadata.yaml
new file mode 100644
index 0000000000..8f661489e2
--- /dev/null
+++ b/migrations/frontend/1680707560_sg_telemetry_allowlist/metadata.yaml
@@ -0,0 +1,2 @@
+name: sg_telemetry_allowlist
+parents: [1678899992, 1678994673]
diff --git a/migrations/frontend/1680707560_sg_telemetry_allowlist/up.sql b/migrations/frontend/1680707560_sg_telemetry_allowlist/up.sql
new file mode 100644
index 0000000000..4ab8077e84
--- /dev/null
+++ b/migrations/frontend/1680707560_sg_telemetry_allowlist/up.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry add`
+INSERT INTO event_logs_export_allowlist (event_name) VALUES (UNNEST('{AccessRequestsPageViewed,AccessRequestFailed,CreateAccessRequestSucceeded,AccessRequestRejected,AccessRequestApproved,SearchInputAdd,SearchInputGoto,SearchInputCommand}'::TEXT[])) ON CONFLICT DO NOTHING;
diff --git a/migrations/frontend/1681300431_ownership_signals/down.sql b/migrations/frontend/1681300431_ownership_signals/down.sql
new file mode 100644
index 0000000000..b03b507c6c
--- /dev/null
+++ b/migrations/frontend/1681300431_ownership_signals/down.sql
@@ -0,0 +1,13 @@
+DROP TRIGGER IF EXISTS update_own_aggregate_recent_contribution ON own_signal_recent_contribution;
+DROP FUNCTION IF EXISTS update_own_aggregate_recent_contribution();
+
+DROP INDEX IF EXISTS own_aggregate_recent_contribution_file_author;
+DROP TABLE IF EXISTS own_aggregate_recent_contribution;
+
+DROP TABLE IF EXISTS own_signal_recent_contribution;
+
+DROP INDEX IF EXISTS commit_authors_email_name;
+DROP TABLE IF EXISTS commit_authors;
+
+DROP INDEX IF EXISTS repo_paths_index_absolute_path;
+DROP TABLE IF EXISTS repo_paths;
diff --git a/migrations/frontend/1681300431_ownership_signals/metadata.yaml b/migrations/frontend/1681300431_ownership_signals/metadata.yaml
new file mode 100644
index 0000000000..0b6f69923c
--- /dev/null
+++ b/migrations/frontend/1681300431_ownership_signals/metadata.yaml
@@ -0,0 +1,2 @@
+name: ownership_signals
+parents: [1680707560, 1680088638]
diff --git a/migrations/frontend/1681300431_ownership_signals/up.sql b/migrations/frontend/1681300431_ownership_signals/up.sql
new file mode 100644
index 0000000000..b1420c3b45
--- /dev/null
+++ b/migrations/frontend/1681300431_ownership_signals/up.sql
@@ -0,0 +1,106 @@
+CREATE TABLE IF NOT EXISTS repo_paths (
+    id SERIAL PRIMARY KEY,
+    repo_id INTEGER NOT NULL REFERENCES repo(id) ON DELETE CASCADE DEFERRABLE,
+    absolute_path TEXT NOT NULL,
+    parent_id INTEGER NULL REFERENCES repo_paths(id)
+);
+
+COMMENT ON COLUMN repo_paths.absolute_path
+IS 'Absolute path does not start or end with forward slash. Example: "a/b/c". Root directory is empty path "".';
+
+CREATE UNIQUE INDEX IF NOT EXISTS repo_paths_index_absolute_path
+ON repo_paths
+USING btree (repo_id, absolute_path);
+
+CREATE TABLE IF NOT EXISTS commit_authors (
+    id SERIAL PRIMARY KEY,
+    email TEXT NOT NULL,
+    name TEXT NOT NULL
+);
+
+CREATE UNIQUE INDEX IF NOT EXISTS commit_authors_email_name
+ON commit_authors
+USING btree (email, name);
+
+CREATE TABLE IF NOT EXISTS own_signal_recent_contribution (
+    id SERIAL PRIMARY KEY,
+    commit_author_id INTEGER NOT NULL REFERENCES commit_authors(id),
+    changed_file_path_id INTEGER NOT NULL REFERENCES repo_paths(id),
+    commit_timestamp TIMESTAMP NOT NULL,
+    commit_id bytea NOT NULL
+);
+
+COMMENT ON TABLE own_signal_recent_contribution
+IS 'One entry per file changed in every commit that classifies as a contribution signal.';
+
+CREATE TABLE IF NOT EXISTS own_aggregate_recent_contribution (
+    id SERIAL PRIMARY KEY,
+    commit_author_id INTEGER NOT NULL REFERENCES commit_authors(id),
+    changed_file_path_id INTEGER NOT NULL REFERENCES repo_paths(id),
+    contributions_count INTEGER DEFAULT 0
+);
+
+CREATE UNIQUE INDEX IF NOT EXISTS own_aggregate_recent_contribution_file_author
+ON own_aggregate_recent_contribution
+USING btree (changed_file_path_id, commit_author_id);
+
+CREATE OR REPLACE FUNCTION update_own_aggregate_recent_contribution() RETURNS TRIGGER AS $$
+BEGIN
+    WITH RECURSIVE ancestors AS (
+        SELECT id, parent_id, 1 AS level
+        FROM repo_paths
+        WHERE id = NEW.changed_file_path_id
+        UNION ALL
+        SELECT p.id, p.parent_id, a.level + 1
+        FROM repo_paths p
+        JOIN ancestors a ON p.id = a.parent_id
+    )
+    UPDATE own_aggregate_recent_contribution
+    SET contributions_count = contributions_count + 1
+    WHERE commit_author_id = NEW.commit_author_id AND changed_file_path_id IN (
+        SELECT id FROM ancestors
+    );
+
+    WITH RECURSIVE ancestors AS (
+        SELECT id, parent_id, 1 AS level
+        FROM repo_paths
+        WHERE id = NEW.changed_file_path_id
+        UNION ALL
+        SELECT p.id, p.parent_id, a.level + 1
+        FROM repo_paths p
+        JOIN ancestors a ON p.id = a.parent_id
+    )
+    INSERT INTO own_aggregate_recent_contribution (commit_author_id, changed_file_path_id, contributions_count)
+    SELECT NEW.commit_author_id, id, 1
+    FROM ancestors
+    WHERE NOT EXISTS (
+        SELECT 1 FROM own_aggregate_recent_contribution
+        WHERE commit_author_id = NEW.commit_author_id AND changed_file_path_id = ancestors.id
+    );
+
+    RETURN NEW;
+END;
+$$ LANGUAGE plpgsql;
+
+DO $$
+DECLARE
+    trigger_exists INTEGER;
+BEGIN
+    -- Check if the trigger already exists
+    SELECT COUNT(*)
+    INTO trigger_exists
+    FROM pg_trigger
+    WHERE tgname = 'update_own_aggregate_recent_contribution';
+
+    -- If the trigger exists, drop it
+    IF trigger_exists > 0 THEN
+        EXECUTE 'DROP TRIGGER update_own_aggregate_recent_contribution ON own_signal_recent_contribution';
+    END IF;
+
+    -- Create the trigger
+    EXECUTE 'CREATE TRIGGER update_own_aggregate_recent_contribution
+        AFTER INSERT
+        ON own_signal_recent_contribution
+        FOR EACH ROW
+        EXECUTE FUNCTION update_own_aggregate_recent_contribution()';
+END $$;
diff --git a/migrations/frontend/1681807446_add_github_apps_table/down.sql b/migrations/frontend/1681807446_add_github_apps_table/down.sql
new file mode 100644
index 0000000000..ca5e33ecdb
--- /dev/null
+++ b/migrations/frontend/1681807446_add_github_apps_table/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS github_apps;
\ No newline at end of file
diff --git a/migrations/frontend/1681807446_add_github_apps_table/metadata.yaml b/migrations/frontend/1681807446_add_github_apps_table/metadata.yaml
new file mode 100644
index 0000000000..a05b56db46
--- /dev/null
+++ b/migrations/frontend/1681807446_add_github_apps_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: add github_apps table
+parents: [1680707560, 1680088638]
diff --git a/migrations/frontend/1681807446_add_github_apps_table/up.sql b/migrations/frontend/1681807446_add_github_apps_table/up.sql
new file mode 100644
index 0000000000..d6e27c9209
--- /dev/null
+++ b/migrations/frontend/1681807446_add_github_apps_table/up.sql
@@ -0,0 +1,18 @@
+CREATE TABLE IF NOT EXISTS github_apps (
+    id SERIAL PRIMARY KEY,
+    app_id INT NOT NULL,
+    name TEXT NOT NULL,
+    slug TEXT NOT NULL,
+    base_url TEXT NOT NULL,
+    client_id TEXT NOT NULL,
+    client_secret TEXT NOT NULL,
+    private_key TEXT NOT NULL,
+    encryption_key_id TEXT NOT NULL,
+    logo TEXT,
+    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
+    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
+);
+
+CREATE UNIQUE INDEX IF NOT EXISTS github_apps_app_id_slug_base_url_unique
+ON github_apps USING btree (app_id, slug, base_url);
+
diff --git a/migrations/frontend/1681923094_sg_telemetry_allowlist/down.sql b/migrations/frontend/1681923094_sg_telemetry_allowlist/down.sql
new file mode 100644
index 0000000000..bbc29939ed
--- /dev/null
+++ b/migrations/frontend/1681923094_sg_telemetry_allowlist/down.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry add`
+DELETE FROM event_logs_export_allowlist WHERE event_name IN (SELECT * FROM UNNEST('{CodyVSCodeExtension:recipe:rewrite-to-functional:executed,CodyVSCodeExtension:recipe:improve-variable-names:executed,CodyVSCodeExtension:recipe:replace:executed,CodyVSCodeExtension:recipe:generate-docstring:executed,CodyVSCodeExtension:recipe:generate-unit-test:executed,CodyVSCodeExtension:recipe:rewrite-functional:executed,CodyVSCodeExtension:recipe:code-refactor:executed,CodyVSCodeExtension:recipe:fixup:executed,CodyVSCodeExtension:recipe:explain-code-high-level:executed,CodyVSCodeExtension:recipe:explain-code-detailed:executed,CodyVSCodeExtension:recipe:find-code-smells:executed,CodyVSCodeExtension:recipe:git-history:executed,CodyVSCodeExtension:recipe:rate-code:executed,CodyVSCodeExtension:recipe:chat-question:executed,CodyVSCodeExtension:recipe:translate-to-language:executed}'::TEXT[]));
diff --git a/migrations/frontend/1681923094_sg_telemetry_allowlist/metadata.yaml b/migrations/frontend/1681923094_sg_telemetry_allowlist/metadata.yaml
new file mode 100644
index 0000000000..d38faa5a0d
--- /dev/null
+++ b/migrations/frontend/1681923094_sg_telemetry_allowlist/metadata.yaml
@@ -0,0 +1,2 @@
+name: sg_telemetry_allowlist
+parents: [1680707560, 1680088638]
diff --git a/migrations/frontend/1681923094_sg_telemetry_allowlist/up.sql b/migrations/frontend/1681923094_sg_telemetry_allowlist/up.sql
new file mode 100644
index 0000000000..e631345b76
--- /dev/null
+++ b/migrations/frontend/1681923094_sg_telemetry_allowlist/up.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry add`
+INSERT INTO event_logs_export_allowlist (event_name) VALUES (UNNEST('{CodyVSCodeExtension:recipe:rewrite-to-functional:executed,CodyVSCodeExtension:recipe:improve-variable-names:executed,CodyVSCodeExtension:recipe:replace:executed,CodyVSCodeExtension:recipe:generate-docstring:executed,CodyVSCodeExtension:recipe:generate-unit-test:executed,CodyVSCodeExtension:recipe:rewrite-functional:executed,CodyVSCodeExtension:recipe:code-refactor:executed,CodyVSCodeExtension:recipe:fixup:executed,CodyVSCodeExtension:recipe:explain-code-high-level:executed,CodyVSCodeExtension:recipe:explain-code-detailed:executed,CodyVSCodeExtension:recipe:find-code-smells:executed,CodyVSCodeExtension:recipe:git-history:executed,CodyVSCodeExtension:recipe:rate-code:executed,CodyVSCodeExtension:recipe:chat-question:executed,CodyVSCodeExtension:recipe:translate-to-language:executed}'::TEXT[])) ON CONFLICT DO NOTHING;
diff --git a/migrations/frontend/1681982430_user_completions_quota/down.sql b/migrations/frontend/1681982430_user_completions_quota/down.sql
new file mode 100644
index 0000000000..714cae4b7d
--- /dev/null
+++ b/migrations/frontend/1681982430_user_completions_quota/down.sql
@@ -0,0 +1 @@
+ALTER TABLE users DROP COLUMN IF EXISTS completions_quota;
diff --git a/migrations/frontend/1681982430_user_completions_quota/metadata.yaml b/migrations/frontend/1681982430_user_completions_quota/metadata.yaml
new file mode 100644
index 0000000000..cd4cefec01
--- /dev/null
+++ b/migrations/frontend/1681982430_user_completions_quota/metadata.yaml
@@ -0,0 +1,2 @@
+name: user_completions_quota
+parents: [1680707560, 1680088638]
diff --git a/migrations/frontend/1681982430_user_completions_quota/up.sql b/migrations/frontend/1681982430_user_completions_quota/up.sql
new file mode 100644
index 0000000000..1faa85ae0f
--- /dev/null
+++ b/migrations/frontend/1681982430_user_completions_quota/up.sql
@@ -0,0 +1 @@
+ALTER TABLE users ADD COLUMN IF NOT EXISTS completions_quota INTEGER;
diff --git a/migrations/frontend/1682012624_own_background_jobs/down.sql b/migrations/frontend/1682012624_own_background_jobs/down.sql
new file mode 100644
index 0000000000..16a143859e
--- /dev/null
+++ b/migrations/frontend/1682012624_own_background_jobs/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS own_background_jobs;
diff --git a/migrations/frontend/1682012624_own_background_jobs/metadata.yaml b/migrations/frontend/1682012624_own_background_jobs/metadata.yaml
new file mode 100644
index 0000000000..5b6d5201dc
--- /dev/null
+++ b/migrations/frontend/1682012624_own_background_jobs/metadata.yaml
@@ -0,0 +1,2 @@
+name: own_background_jobs
+parents: [1681807446, 1681923094]
diff --git a/migrations/frontend/1682012624_own_background_jobs/up.sql b/migrations/frontend/1682012624_own_background_jobs/up.sql
new file mode 100644
index 0000000000..46f7fe9258
--- /dev/null
+++ b/migrations/frontend/1682012624_own_background_jobs/up.sql
@@ -0,0 +1,21 @@
+CREATE TABLE IF NOT EXISTS own_background_jobs
+(
+    id                SERIAL PRIMARY KEY,
+    state             TEXT                     DEFAULT 'queued',
+    failure_message   TEXT,
+    queued_at         TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
+    started_at        TIMESTAMP WITH TIME ZONE,
+    finished_at       TIMESTAMP WITH TIME ZONE,
+    process_after     TIMESTAMP WITH TIME ZONE,
+    num_resets        INTEGER NOT NULL         DEFAULT 0,
+    num_failures      INTEGER NOT NULL         DEFAULT 0,
+    last_heartbeat_at TIMESTAMP WITH TIME ZONE,
+    execution_logs    JSON[],
+    worker_hostname   TEXT    NOT NULL         DEFAULT '',
+    cancel            BOOLEAN NOT NULL         DEFAULT FALSE,
+    repo_id           INT     NOT NULL,
+    job_type          INT     NOT NULL
+);
+
+CREATE INDEX IF NOT EXISTS own_background_jobs_state_idx ON own_background_jobs (state);
+CREATE INDEX IF NOT EXISTS own_background_jobs_repo_id_idx ON own_background_jobs (repo_id);
diff --git a/migrations/frontend/1682114198_product_license_access_tokens/down.sql b/migrations/frontend/1682114198_product_license_access_tokens/down.sql
new file mode 100644
index 0000000000..b8ad222c2d
--- /dev/null
+++ b/migrations/frontend/1682114198_product_license_access_tokens/down.sql
@@ -0,0 +1,2 @@
+ALTER TABLE product_licenses
+DROP COLUMN IF EXISTS access_token_enabled;
diff --git a/migrations/frontend/1682114198_product_license_access_tokens/metadata.yaml b/migrations/frontend/1682114198_product_license_access_tokens/metadata.yaml
new file mode 100644
index 0000000000..ac85a83f53
--- /dev/null
+++ b/migrations/frontend/1682114198_product_license_access_tokens/metadata.yaml
@@ -0,0 +1,2 @@
+name: product_license_access_tokens
+parents: [1681982430]
diff --git a/migrations/frontend/1682114198_product_license_access_tokens/up.sql b/migrations/frontend/1682114198_product_license_access_tokens/up.sql
new file mode 100644
index 0000000000..ab837adf4d
--- /dev/null
+++ b/migrations/frontend/1682114198_product_license_access_tokens/up.sql
@@ -0,0 +1,12 @@
+-- Add toggle
+ALTER TABLE product_licenses
+ADD COLUMN IF NOT EXISTS access_token_enabled BOOLEAN NOT NULL DEFAULT false;
+
+-- Documentation!
+COMMENT ON COLUMN product_licenses.access_token_enabled
+IS 'Whether this license key can be used as an access token to authenticate API requests';
+
+-- In-band migration to enable usage as access tokens for existing, active license keys
+UPDATE product_licenses
+SET access_token_enabled = true
+WHERE license_expires_at > NOW();
diff --git a/migrations/frontend/1682598027_add_github_app_installations_table/down.sql b/migrations/frontend/1682598027_add_github_app_installations_table/down.sql
new file mode 100644
index 0000000000..7eb029f94a
--- /dev/null
+++ b/migrations/frontend/1682598027_add_github_app_installations_table/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS github_app_installs;
diff --git a/migrations/frontend/1682598027_add_github_app_installations_table/metadata.yaml b/migrations/frontend/1682598027_add_github_app_installations_table/metadata.yaml
new file mode 100644
index 0000000000..4a04821011
--- /dev/null
+++ b/migrations/frontend/1682598027_add_github_app_installations_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: add github app installations table
+parents: [1682012624, 1681982430]
diff --git a/migrations/frontend/1682598027_add_github_app_installations_table/up.sql b/migrations/frontend/1682598027_add_github_app_installations_table/up.sql
new file mode 100644
index 0000000000..fbbee96913
--- /dev/null
+++ b/migrations/frontend/1682598027_add_github_app_installations_table/up.sql
@@ -0,0 +1,9 @@
+CREATE TABLE IF NOT EXISTS github_app_installs (
+    id SERIAL PRIMARY KEY,
+    app_id INT NOT NULL REFERENCES github_apps(id) ON DELETE CASCADE,
+    installation_id INT NOT NULL,
+    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
+);
+
+CREATE INDEX IF NOT EXISTS installation_id_idx ON github_app_installs USING btree (installation_id);
+CREATE INDEX IF NOT EXISTS app_id_idx ON github_app_installs USING btree (app_id);
\ No newline at end of file
diff --git a/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/down.sql b/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/down.sql
new file mode 100644
index 0000000000..b92d62c8f6
--- /dev/null
+++ b/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/down.sql
@@ -0,0 +1,3 @@
+AlTER TABLE codeintel_ranking_definitions DROP COLUMN IF EXISTS deleted_at;
+AlTER TABLE codeintel_ranking_references DROP COLUMN IF EXISTS deleted_at;
+AlTER TABLE codeintel_initial_path_ranks DROP COLUMN IF EXISTS deleted_at;
diff --git a/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/metadata.yaml b/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/metadata.yaml
new file mode 100644
index 0000000000..8b0ffb631b
--- /dev/null
+++ b/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add soft-delete timestamp to ranking exports
+parents: [1681300431, 1682012624, 1681982430]
diff --git a/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/up.sql b/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/up.sql
new file mode 100644
index 0000000000..c3f02d2d5d
--- /dev/null
+++ b/migrations/frontend/1682604499_add_softdelete_timestamp_to_ranking_exports/up.sql
@@ -0,0 +1,3 @@
+AlTER TABLE codeintel_ranking_definitions ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ;
+AlTER TABLE codeintel_ranking_references ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ;
+AlTER TABLE codeintel_initial_path_ranks ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ;
diff --git a/migrations/frontend/1682626931_subscription_llm_proxy_state/down.sql b/migrations/frontend/1682626931_subscription_llm_proxy_state/down.sql
new file mode 100644
index 0000000000..ca31b38fb9
--- /dev/null
+++ b/migrations/frontend/1682626931_subscription_llm_proxy_state/down.sql
@@ -0,0 +1,4 @@
+ALTER TABLE product_subscriptions
+DROP COLUMN IF EXISTS llm_proxy_enabled,
+DROP COLUMN IF EXISTS llm_proxy_rate_limit,
+DROP COLUMN IF EXISTS llm_proxy_rate_interval_seconds;
diff --git a/migrations/frontend/1682626931_subscription_llm_proxy_state/metadata.yaml b/migrations/frontend/1682626931_subscription_llm_proxy_state/metadata.yaml
new file mode 100644
index 0000000000..3bc307df09
--- /dev/null
+++ b/migrations/frontend/1682626931_subscription_llm_proxy_state/metadata.yaml
@@ -0,0 +1,2 @@
+name: subscription_llm_proxy_state
+parents: [1682012624]
diff --git a/migrations/frontend/1682626931_subscription_llm_proxy_state/up.sql b/migrations/frontend/1682626931_subscription_llm_proxy_state/up.sql
new file mode 100644
index 0000000000..fd6adbbf66
--- /dev/null
+++ b/migrations/frontend/1682626931_subscription_llm_proxy_state/up.sql
@@ -0,0 +1,20 @@
+ALTER TABLE product_subscriptions
+ADD COLUMN IF NOT EXISTS llm_proxy_enabled BOOLEAN NOT NULL DEFAULT TRUE,
+ADD COLUMN IF NOT EXISTS llm_proxy_rate_limit INTEGER,
+ADD COLUMN IF NOT EXISTS llm_proxy_rate_interval_seconds INTEGER;
+
+COMMENT ON COLUMN product_subscriptions.llm_proxy_enabled IS 'Whether or not this subscription has access to LLM-proxy';
+COMMENT ON COLUMN product_subscriptions.llm_proxy_rate_limit IS 'Custom requests per time interval allowed for LLM-proxy';
+COMMENT ON COLUMN product_subscriptions.llm_proxy_rate_interval_seconds IS 'Custom time interval over which the for LLM-proxy rate limit is applied';
+
+-- Initially, mark any subscription that has no active license as without LLM-proxy access,
+-- since there are a lot of old subscriptions out there.
+UPDATE product_subscriptions
+SET llm_proxy_enabled = false
+WHERE id IN (
+    SELECT product_subscription_id
+    FROM product_licenses
+    WHERE license_expires_at > NOW()
+    GROUP BY product_subscription_id
+    HAVING COUNT(*) = 0
+);
diff --git a/migrations/frontend/1682683129_add_recent_view_ownership_signal/down.sql b/migrations/frontend/1682683129_add_recent_view_ownership_signal/down.sql
new file mode 100644
index 0000000000..399ad4847b
--- /dev/null
+++ b/migrations/frontend/1682683129_add_recent_view_ownership_signal/down.sql
@@ -0,0 +1,2 @@
+DROP TABLE IF EXISTS own_aggregate_recent_view;
+DROP TABLE IF EXISTS event_logs_scrape_state_own;
diff --git a/migrations/frontend/1682683129_add_recent_view_ownership_signal/metadata.yaml b/migrations/frontend/1682683129_add_recent_view_ownership_signal/metadata.yaml
new file mode 100644
index 0000000000..b1ea8fbcbb
--- /dev/null
+++ b/migrations/frontend/1682683129_add_recent_view_ownership_signal/metadata.yaml
@@ -0,0 +1,2 @@
+name: add recent view ownership signal
+parents: [1681300431, 1682012624, 1682114198]
diff --git a/migrations/frontend/1682683129_add_recent_view_ownership_signal/up.sql b/migrations/frontend/1682683129_add_recent_view_ownership_signal/up.sql
new file mode 100644
index 0000000000..1cc4271d70
--- /dev/null
+++ b/migrations/frontend/1682683129_add_recent_view_ownership_signal/up.sql
@@ -0,0 +1,26 @@
+CREATE TABLE IF NOT EXISTS own_aggregate_recent_view
+(
+    id                  SERIAL PRIMARY KEY,
+    viewer_id           INTEGER NOT NULL REFERENCES users (id) ON DELETE CASCADE DEFERRABLE,
+    viewed_file_path_id INTEGER NOT NULL REFERENCES repo_paths (id),
+    views_count         INTEGER DEFAULT 0
+);
+
+CREATE UNIQUE INDEX IF NOT EXISTS own_aggregate_recent_view_viewer
+    ON own_aggregate_recent_view
+        USING btree (viewed_file_path_id, viewer_id);
+
+COMMENT ON TABLE own_aggregate_recent_view
+    IS 'One entry contains a number of views of a single file by a given viewer.';
+
+CREATE TABLE IF NOT EXISTS event_logs_scrape_state_own
+(
+    id          SERIAL
+        CONSTRAINT event_logs_scrape_state_own_pk
+            PRIMARY KEY,
+    bookmark_id INT NOT NULL,
+    job_type    INT NOT NULL
+);
+
+COMMENT ON TABLE event_logs_scrape_state_own IS 'Contains state for own jobs that scrape events if enabled.';
+COMMENT ON COLUMN event_logs_scrape_state_own.bookmark_id IS 'Bookmarks the maximum most recent successful event_logs.id that was scraped';
diff --git a/migrations/frontend/1682967255_add_ranking_graph_key_table/down.sql b/migrations/frontend/1682967255_add_ranking_graph_key_table/down.sql
new file mode 100644
index 0000000000..30883e17c7
--- /dev/null
+++ b/migrations/frontend/1682967255_add_ranking_graph_key_table/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS codeintel_ranking_progress;
diff --git a/migrations/frontend/1682967255_add_ranking_graph_key_table/metadata.yaml b/migrations/frontend/1682967255_add_ranking_graph_key_table/metadata.yaml
new file mode 100644
index 0000000000..5d0d36d861
--- /dev/null
+++ b/migrations/frontend/1682967255_add_ranking_graph_key_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add ranking graph key table
+parents: [1682114198, 1682604499]
diff --git a/migrations/frontend/1682967255_add_ranking_graph_key_table/up.sql b/migrations/frontend/1682967255_add_ranking_graph_key_table/up.sql
new file mode 100644
index 0000000000..53e3126cb7
--- /dev/null
+++ b/migrations/frontend/1682967255_add_ranking_graph_key_table/up.sql
@@ -0,0 +1,12 @@
+CREATE TABLE IF NOT EXISTS codeintel_ranking_progress (
+    id                          BIGSERIAL PRIMARY KEY,
+    graph_key                   TEXT NOT NULL UNIQUE,
+    max_definition_id           INTEGER NOT NULL,
+    max_reference_id            INTEGER NOT NULL,
+    max_path_id                 INTEGER NOT NULL,
+    mappers_started_at          TIMESTAMP WITH TIME ZONE NOT NULL,
+    mapper_completed_at         TIMESTAMP WITH TIME ZONE,
+    seed_mapper_completed_at    TIMESTAMP WITH TIME ZONE,
+    reducer_started_at          TIMESTAMP WITH TIME ZONE,
+    reducer_completed_at        TIMESTAMP WITH TIME ZONE
+);
diff --git a/migrations/frontend/1683053825_sg_telemetry_allowlist/down.sql b/migrations/frontend/1683053825_sg_telemetry_allowlist/down.sql
new file mode 100644
index 0000000000..ec260e9023
--- /dev/null
+++ b/migrations/frontend/1683053825_sg_telemetry_allowlist/down.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry remove`
+INSERT INTO event_logs_export_allowlist (event_name) VALUES (UNNEST('{SearchSubmitted,AccessRequestApproved,AccessRequestRejected}'::TEXT[])) ON CONFLICT DO NOTHING;
diff --git a/migrations/frontend/1683053825_sg_telemetry_allowlist/metadata.yaml b/migrations/frontend/1683053825_sg_telemetry_allowlist/metadata.yaml
new file mode 100644
index 0000000000..e75628298d
--- /dev/null
+++ b/migrations/frontend/1683053825_sg_telemetry_allowlist/metadata.yaml
@@ -0,0 +1,2 @@
+name: sg_telemetry_allowlist
+parents: [1681300431, 1682626931, 1682114198]
diff --git a/migrations/frontend/1683053825_sg_telemetry_allowlist/up.sql b/migrations/frontend/1683053825_sg_telemetry_allowlist/up.sql
new file mode 100644
index 0000000000..4ee0addb0c
--- /dev/null
+++ b/migrations/frontend/1683053825_sg_telemetry_allowlist/up.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry remove`
+DELETE FROM event_logs_export_allowlist WHERE event_name IN (SELECT * FROM UNNEST('{SearchSubmitted,AccessRequestApproved,AccessRequestRejected}'::TEXT[]));
diff --git a/migrations/frontend/1683246005_llmproxynoaccesstokenenable/down.sql b/migrations/frontend/1683246005_llmproxynoaccesstokenenable/down.sql
new file mode 100644
index 0000000000..07abfb0142
--- /dev/null
+++ b/migrations/frontend/1683246005_llmproxynoaccesstokenenable/down.sql
@@ -0,0 +1,19 @@
+ALTER TABLE product_licenses ALTER COLUMN access_token_enabled SET DEFAULT FALSE;
+-- One time migration to disable all licenses again.
+UPDATE product_licenses SET access_token_enabled = FALSE;
+
+ALTER TABLE product_subscriptions ALTER COLUMN llm_proxy_enabled SET DEFAULT TRUE;
+
+UPDATE product_subscriptions
+SET llm_proxy_enabled = TRUE;
+-- Initially, mark any subscription that has no active license as without LLM-proxy access,
+-- since there are a lot of old subscriptions out there.
+UPDATE product_subscriptions
+SET llm_proxy_enabled = false
+WHERE id IN (
+    SELECT product_subscription_id
+    FROM product_licenses
+    WHERE license_expires_at > NOW()
+    GROUP BY product_subscription_id
+    HAVING COUNT(*) = 0
+);
diff --git a/migrations/frontend/1683246005_llmproxynoaccesstokenenable/metadata.yaml b/migrations/frontend/1683246005_llmproxynoaccesstokenenable/metadata.yaml
new file mode 100644
index 0000000000..253695f753
--- /dev/null
+++ b/migrations/frontend/1683246005_llmproxynoaccesstokenenable/metadata.yaml
@@ -0,0 +1,2 @@
+name: llm-proxy-no-access-token-enable
+parents: [1683053825, 1682598027]
diff --git a/migrations/frontend/1683246005_llmproxynoaccesstokenenable/up.sql b/migrations/frontend/1683246005_llmproxynoaccesstokenenable/up.sql
new file mode 100644
index 0000000000..b4feecf77a
--- /dev/null
+++ b/migrations/frontend/1683246005_llmproxynoaccesstokenenable/up.sql
@@ -0,0 +1,6 @@
+ALTER TABLE product_licenses ALTER COLUMN access_token_enabled SET DEFAULT TRUE;
+
+ALTER TABLE product_subscriptions ALTER COLUMN llm_proxy_enabled SET DEFAULT FALSE;
+
+-- One time migration to disable all licenses again, we want to enable them manually.
+UPDATE product_subscriptions SET llm_proxy_enabled = FALSE;
diff --git a/migrations/frontend/1683290474_user_code_completions_quota/down.sql b/migrations/frontend/1683290474_user_code_completions_quota/down.sql
new file mode 100644
index 0000000000..8922bd5836
--- /dev/null
+++ b/migrations/frontend/1683290474_user_code_completions_quota/down.sql
@@ -0,0 +1 @@
+ALTER TABLE users DROP COLUMN IF EXISTS code_completions_quota;
diff --git a/migrations/frontend/1683290474_user_code_completions_quota/metadata.yaml b/migrations/frontend/1683290474_user_code_completions_quota/metadata.yaml
new file mode 100644
index 0000000000..c5e752380c
--- /dev/null
+++ b/migrations/frontend/1683290474_user_code_completions_quota/metadata.yaml
@@ -0,0 +1,2 @@
+name: user_code_completions_quota
+parents: [1682683129, 1683053825, 1682598027]
diff --git a/migrations/frontend/1683290474_user_code_completions_quota/up.sql b/migrations/frontend/1683290474_user_code_completions_quota/up.sql
new file mode 100644
index 0000000000..db05422c34
--- /dev/null
+++ b/migrations/frontend/1683290474_user_code_completions_quota/up.sql
@@ -0,0 +1 @@
+ALTER TABLE users ADD COLUMN IF NOT EXISTS code_completions_quota INTEGER;
diff --git a/migrations/frontend/1683295546_add_app_url_column_for_github_apps/down.sql b/migrations/frontend/1683295546_add_app_url_column_for_github_apps/down.sql
new file mode 100644
index 0000000000..21c3dbbcea
--- /dev/null
+++ b/migrations/frontend/1683295546_add_app_url_column_for_github_apps/down.sql
@@ -0,0 +1 @@
+ALTER TABLE github_apps DROP COLUMN IF EXISTS app_url;
diff --git a/migrations/frontend/1683295546_add_app_url_column_for_github_apps/metadata.yaml b/migrations/frontend/1683295546_add_app_url_column_for_github_apps/metadata.yaml
new file mode 100644
index 0000000000..48d13bca82
--- /dev/null
+++ b/migrations/frontend/1683295546_add_app_url_column_for_github_apps/metadata.yaml
@@ -0,0 +1,2 @@
+name: add app_url column for github_apps
+parents: [1682683129, 1683053825, 1682598027]
diff --git a/migrations/frontend/1683295546_add_app_url_column_for_github_apps/up.sql b/migrations/frontend/1683295546_add_app_url_column_for_github_apps/up.sql
new file mode 100644
index 0000000000..60eb0a4256
--- /dev/null
+++ b/migrations/frontend/1683295546_add_app_url_column_for_github_apps/up.sql
@@ -0,0 +1,2 @@
+ALTER TABLE github_apps
+    ADD COLUMN IF NOT EXISTS app_url TEXT NOT NULL DEFAULT '';
diff --git a/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/down.sql b/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/down.sql
new file mode 100644
index 0000000000..5751103c14
--- /dev/null
+++ b/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS codeintel_autoindexing_exceptions;
diff --git a/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/metadata.yaml b/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/metadata.yaml
new file mode 100644
index 0000000000..6e609a3c1b
--- /dev/null
+++ b/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add autoindexing repo exceptions table
+parents: [1683290474, 1683295546]
diff --git a/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/up.sql b/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/up.sql
new file mode 100644
index 0000000000..fad9cd4864
--- /dev/null
+++ b/migrations/frontend/1683561153_add_autoindexing_repo_exceptions_table/up.sql
@@ -0,0 +1,7 @@
+CREATE TABLE IF NOT EXISTS codeintel_autoindexing_exceptions(
+    id                  SERIAL PRIMARY KEY,
+    repository_id       INTEGER NOT NULL UNIQUE,
+    disable_scheduling  BOOLEAN NOT NULL DEFAULT FALSE,
+    disable_inference   BOOLEAN NOT NULL DEFAULT FALSE,
+    FOREIGN KEY (repository_id) REFERENCES repo(id) ON DELETE CASCADE
+);
diff --git a/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/down.sql b/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/down.sql
new file mode 100644
index 0000000000..f06cb4eb50
--- /dev/null
+++ b/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/down.sql
@@ -0,0 +1,2 @@
+-- Undo the changes made in the up migration
+DROP TABLE IF EXISTS gitserver_repos_sync_output;
diff --git a/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/metadata.yaml b/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/metadata.yaml
new file mode 100644
index 0000000000..953efe678a
--- /dev/null
+++ b/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/metadata.yaml
@@ -0,0 +1,2 @@
+name: add table for storing the most recent output from gitserver clones
+parents: [1683290474, 1683295546]
diff --git a/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/up.sql b/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/up.sql
new file mode 100644
index 0000000000..ae77fa810a
--- /dev/null
+++ b/migrations/frontend/1683593618_add_table_for_storing_the_most_recent_output_from_gitserver_clones/up.sql
@@ -0,0 +1,22 @@
+-- Perform migration here.
+--
+-- See /migrations/README.md. Highlights:
+--  * Make migrations idempotent (use IF EXISTS)
+--  * Make migrations backwards-compatible (old readers/writers must continue to work)
+--  * If you are using CREATE INDEX CONCURRENTLY, then make sure that only one statement
+--    is defined per file, and that each such statement is NOT wrapped in a transaction.
+--    Each such migration must also declare "createIndexConcurrently: true" in their
+--    associated metadata.yaml file.
+--  * If you are modifying Postgres extensions, you must also declare "privileged: true"
+--    in the associated metadata.yaml file.
+CREATE TABLE IF NOT EXISTS gitserver_repos_sync_output (
+    repo_id integer primary key,
+    last_output text DEFAULT ''::text NOT NULL,
+    updated_at timestamp with time zone DEFAULT now() NOT NULL,
+    CONSTRAINT gitserver_repos_sync_output_repo_id_fkey FOREIGN KEY (repo_id)
+        REFERENCES repo (id) MATCH SIMPLE
+        ON UPDATE NO ACTION
+        ON DELETE CASCADE
+);
+
+COMMENT ON TABLE gitserver_repos_sync_output IS 'Contains the most recent output from gitserver repository sync jobs.';
diff --git a/migrations/frontend/1683640362_expand_ranking_unique_key/down.sql b/migrations/frontend/1683640362_expand_ranking_unique_key/down.sql
new file mode 100644
index 0000000000..c50eb2acb9
--- /dev/null
+++ b/migrations/frontend/1683640362_expand_ranking_unique_key/down.sql
@@ -0,0 +1,3 @@
+CREATE UNIQUE INDEX IF NOT EXISTS codeintel_path_ranks_repository_id ON codeintel_path_ranks(repository_id);
+DROP INDEX IF EXISTS codeintel_path_ranks_graph_key_repository_id;
+ALTER TABLE codeintel_path_ranks ALTER COLUMN graph_key DROP NOT NULL;
diff --git a/migrations/frontend/1683640362_expand_ranking_unique_key/metadata.yaml b/migrations/frontend/1683640362_expand_ranking_unique_key/metadata.yaml
new file mode 100644
index 0000000000..7aba1d99b4
--- /dev/null
+++ b/migrations/frontend/1683640362_expand_ranking_unique_key/metadata.yaml
@@ -0,0 +1,2 @@
+name: Expand ranking unique key
+parents: [1682967255]
diff --git a/migrations/frontend/1683640362_expand_ranking_unique_key/up.sql b/migrations/frontend/1683640362_expand_ranking_unique_key/up.sql
new file mode 100644
index 0000000000..3faa3c66f1
--- /dev/null
+++ b/migrations/frontend/1683640362_expand_ranking_unique_key/up.sql
@@ -0,0 +1,4 @@
+DELETE FROM codeintel_path_ranks WHERE graph_key IS NULL;
+ALTER TABLE codeintel_path_ranks ALTER COLUMN graph_key SET NOT NULL;
+CREATE UNIQUE INDEX IF NOT EXISTS codeintel_path_ranks_graph_key_repository_id ON codeintel_path_ranks(graph_key, repository_id);
+DROP INDEX IF EXISTS codeintel_path_ranks_repository_id;
diff --git a/migrations/frontend/1683641757_sg_telemetry_allowlist/down.sql b/migrations/frontend/1683641757_sg_telemetry_allowlist/down.sql
new file mode 100644
index 0000000000..514b43ffd9
--- /dev/null
+++ b/migrations/frontend/1683641757_sg_telemetry_allowlist/down.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry add`
+DELETE FROM event_logs_export_allowlist WHERE event_name IN (SELECT * FROM UNNEST('{CodySignup,VSCodeInstall,VSCodeMarketplace,TryCodyWeb,TryCodyWebOnboardingDisplayed}'::TEXT[]));
diff --git a/migrations/frontend/1683641757_sg_telemetry_allowlist/metadata.yaml b/migrations/frontend/1683641757_sg_telemetry_allowlist/metadata.yaml
new file mode 100644
index 0000000000..d79ab12333
--- /dev/null
+++ b/migrations/frontend/1683641757_sg_telemetry_allowlist/metadata.yaml
@@ -0,0 +1,2 @@
+name: sg_telemetry_allowlist
+parents: [1683246005, 1683561153, 1683640362, 1683290474, 1683295546]
diff --git a/migrations/frontend/1683641757_sg_telemetry_allowlist/up.sql b/migrations/frontend/1683641757_sg_telemetry_allowlist/up.sql
new file mode 100644
index 0000000000..ba35e6c3a8
--- /dev/null
+++ b/migrations/frontend/1683641757_sg_telemetry_allowlist/up.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry add`
+INSERT INTO event_logs_export_allowlist (event_name) VALUES (UNNEST('{CodySignup,VSCodeInstall,VSCodeMarketplace,TryCodyWeb,TryCodyWebOnboardingDisplayed}'::TEXT[])) ON CONFLICT DO NOTHING;
diff --git a/migrations/frontend/1683670271_remove_ranking_object_prefix/down.sql b/migrations/frontend/1683670271_remove_ranking_object_prefix/down.sql
new file mode 100644
index 0000000000..ef2e570ac2
--- /dev/null
+++ b/migrations/frontend/1683670271_remove_ranking_object_prefix/down.sql
@@ -0,0 +1 @@
+ALTER TABLE codeintel_ranking_exports ADD COLUMN IF NOT EXISTS object_prefix TEXT;
diff --git a/migrations/frontend/1683670271_remove_ranking_object_prefix/metadata.yaml b/migrations/frontend/1683670271_remove_ranking_object_prefix/metadata.yaml
new file mode 100644
index 0000000000..dc0e7ed883
--- /dev/null
+++ b/migrations/frontend/1683670271_remove_ranking_object_prefix/metadata.yaml
@@ -0,0 +1,2 @@
+name: Remove ranking object_prefix
+parents: [1683246005, 1683561153, 1683640362]
diff --git a/migrations/frontend/1683670271_remove_ranking_object_prefix/up.sql b/migrations/frontend/1683670271_remove_ranking_object_prefix/up.sql
new file mode 100644
index 0000000000..a3647c6a9f
--- /dev/null
+++ b/migrations/frontend/1683670271_remove_ranking_object_prefix/up.sql
@@ -0,0 +1 @@
+ALTER TABLE codeintel_ranking_exports DROP COLUMN IF EXISTS object_prefix;
diff --git a/migrations/frontend/1683670735_move_deleted_fields_for_ranking/down.sql b/migrations/frontend/1683670735_move_deleted_fields_for_ranking/down.sql
new file mode 100644
index 0000000000..088a6b7aaa
--- /dev/null
+++ b/migrations/frontend/1683670735_move_deleted_fields_for_ranking/down.sql
@@ -0,0 +1,19 @@
+ALTER TABLE codeintel_ranking_exports DROP COLUMN IF EXISTS last_scanned_at;
+ALTER TABLE codeintel_ranking_exports DROP COLUMN IF EXISTS deleted_at;
+
+ALTER TABLE codeintel_ranking_definitions ADD COLUMN IF NOT EXISTS last_scanned_at TIMESTAMP WITH TIME ZONE;
+CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_graph_key_last_scanned_at ON codeintel_ranking_definitions(graph_key, last_scanned_at NULLS FIRST, id);
+ALTER TABLE codeintel_ranking_definitions ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMP WITH TIME ZONE;
+
+ALTER TABLE codeintel_ranking_references ADD COLUMN IF NOT EXISTS last_scanned_at TIMESTAMP WITH TIME ZONE;
+CREATE INDEX IF NOT EXISTS codeintel_ranking_references_graph_key_last_scanned_at ON codeintel_ranking_references(graph_key, last_scanned_at NULLS FIRST, id);
+ALTER TABLE codeintel_ranking_references ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMP WITH TIME ZONE;
+
+ALTER TABLE codeintel_initial_path_ranks ADD COLUMN IF NOT EXISTS last_scanned_at TIMESTAMP WITH TIME ZONE;
+CREATE INDEX IF NOT EXISTS codeintel_initial_path_ranks_graph_key_last_scanned_at ON codeintel_initial_path_ranks(graph_key, last_scanned_at NULLS FIRST, id);
+ALTER TABLE codeintel_initial_path_ranks ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMP WITH TIME ZONE;
+
+DROP INDEX codeintel_ranking_definitions_graph_key_last_scanned_at;
+CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_graph_key_last_scanned_at_id ON codeintel_ranking_definitions USING btree (graph_key, last_scanned_at NULLS FIRST, id);
+DROP INDEX codeintel_ranking_references_graph_key_last_scanned_at;
+CREATE INDEX IF NOT EXISTS codeintel_ranking_references_graph_key_last_scanned_at_id ON codeintel_ranking_references USING btree (graph_key, last_scanned_at NULLS FIRST, id);
diff --git a/migrations/frontend/1683670735_move_deleted_fields_for_ranking/metadata.yaml b/migrations/frontend/1683670735_move_deleted_fields_for_ranking/metadata.yaml
new file mode 100644
index 0000000000..2ec64f7c66
--- /dev/null
+++ b/migrations/frontend/1683670735_move_deleted_fields_for_ranking/metadata.yaml
@@ -0,0 +1,2 @@
+name: Move deleted fields for ranking
+parents: [1683670271]
diff --git a/migrations/frontend/1683670735_move_deleted_fields_for_ranking/up.sql b/migrations/frontend/1683670735_move_deleted_fields_for_ranking/up.sql
new file mode 100644
index 0000000000..dfa902f7f1
--- /dev/null
+++ b/migrations/frontend/1683670735_move_deleted_fields_for_ranking/up.sql
@@ -0,0 +1,12 @@
+ALTER TABLE codeintel_ranking_definitions DROP COLUMN IF EXISTS last_scanned_at;
+ALTER TABLE codeintel_ranking_definitions DROP COLUMN IF EXISTS deleted_at;
+
+ALTER TABLE codeintel_ranking_references DROP COLUMN IF EXISTS last_scanned_at;
+ALTER TABLE codeintel_ranking_references DROP COLUMN IF EXISTS deleted_at;
+
+ALTER TABLE codeintel_initial_path_ranks DROP COLUMN IF EXISTS last_scanned_at;
+ALTER TABLE codeintel_initial_path_ranks DROP COLUMN IF EXISTS deleted_at;
+
+ALTER TABLE codeintel_ranking_exports ADD COLUMN IF NOT EXISTS last_scanned_at TIMESTAMP WITH TIME ZONE;
+CREATE INDEX IF NOT EXISTS codeintel_ranking_exports_graph_key_last_scanned_at ON codeintel_ranking_exports(graph_key, last_scanned_at NULLS FIRST, id);
+ALTER TABLE codeintel_ranking_exports ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMP WITH TIME ZONE;
diff --git a/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/down.sql b/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/down.sql
new file mode 100644
index 0000000000..88f893835e
--- /dev/null
+++ b/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/down.sql
@@ -0,0 +1,17 @@
+TRUNCATE codeintel_ranking_definitions CASCADE;
+TRUNCATE codeintel_ranking_references CASCADE;
+TRUNCATE codeintel_initial_path_ranks CASCADE;
+
+ALTER TABLE codeintel_ranking_definitions DROP COLUMN IF EXISTS exported_upload_id;
+ALTER TABLE codeintel_ranking_references DROP COLUMN IF EXISTS exported_upload_id;
+ALTER TABLE codeintel_initial_path_ranks DROP COLUMN IF EXISTS exported_upload_id;
+
+ALTER TABLE codeintel_ranking_definitions ADD COLUMN IF NOT EXISTS upload_id INTEGER NOT NULL;
+ALTER TABLE codeintel_ranking_references ADD COLUMN IF NOT EXISTS upload_id INTEGER NOT NULL;
+ALTER TABLE codeintel_initial_path_ranks ADD COLUMN IF NOT EXISTS upload_id INTEGER NOT NULL;
+
+CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_graph_key_symbol_search ON codeintel_ranking_definitions(graph_key, symbol_name, upload_id, document_path);
+CREATE INDEX IF NOT EXISTS codeintel_ranking_references_upload_id ON codeintel_ranking_references(upload_id);
+CREATE INDEX IF NOT EXISTS codeintel_initial_path_ranks_upload_id ON codeintel_initial_path_ranks(upload_id);
+CREATE INDEX IF NOT EXISTS codeintel_initial_path_upload_id ON codeintel_initial_path_ranks USING btree (upload_id);
+DROP INDEX codeintel_initial_path_ranks_upload_id;
diff --git a/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/metadata.yaml b/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/metadata.yaml
new file mode 100644
index 0000000000..1f31f756d1
--- /dev/null
+++ b/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/metadata.yaml
@@ -0,0 +1,2 @@
+name: Move upload relation in ranking export data
+parents: [1683670735]
diff --git a/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/up.sql b/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/up.sql
new file mode 100644
index 0000000000..2493048124
--- /dev/null
+++ b/migrations/frontend/1683753933_move_upload_relation_in_ranking_export_data/up.sql
@@ -0,0 +1,16 @@
+TRUNCATE codeintel_ranking_definitions CASCADE;
+TRUNCATE codeintel_ranking_references CASCADE;
+TRUNCATE codeintel_initial_path_ranks CASCADE;
+
+ALTER TABLE codeintel_ranking_definitions DROP COLUMN IF EXISTS upload_id;
+ALTER TABLE codeintel_ranking_references DROP COLUMN IF EXISTS upload_id;
+ALTER TABLE codeintel_initial_path_ranks DROP COLUMN IF EXISTS upload_id;
+
+ALTER TABLE codeintel_ranking_definitions ADD COLUMN IF NOT EXISTS exported_upload_id INTEGER NOT NULL REFERENCES codeintel_ranking_exports(id) ON DELETE CASCADE;
+ALTER TABLE codeintel_ranking_references ADD COLUMN IF NOT EXISTS exported_upload_id INTEGER NOT NULL REFERENCES codeintel_ranking_exports(id) ON DELETE CASCADE;
+ALTER TABLE codeintel_initial_path_ranks ADD COLUMN IF NOT EXISTS exported_upload_id INTEGER NOT NULL REFERENCES codeintel_ranking_exports(id) ON DELETE CASCADE;
+
+CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_exported_upload_id ON codeintel_ranking_definitions(exported_upload_id);
+CREATE INDEX IF NOT EXISTS codeintel_ranking_references_exported_upload_id ON codeintel_ranking_references(exported_upload_id);
+CREATE INDEX IF NOT EXISTS codeintel_initial_path_ranks_exported_upload_id ON codeintel_initial_path_ranks(exported_upload_id);
+CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_graph_key_symbol_search ON codeintel_ranking_definitions(graph_key, symbol_name, exported_upload_id, document_path);
diff --git a/migrations/frontend/1683782561_githubappwebhooks/down.sql b/migrations/frontend/1683782561_githubappwebhooks/down.sql
new file mode 100644
index 0000000000..efabf95784
--- /dev/null
+++ b/migrations/frontend/1683782561_githubappwebhooks/down.sql
@@ -0,0 +1,2 @@
+ALTER TABLE github_apps
+    DROP COLUMN IF EXISTS webhook_id;
diff --git a/migrations/frontend/1683782561_githubappwebhooks/metadata.yaml b/migrations/frontend/1683782561_githubappwebhooks/metadata.yaml
new file mode 100644
index 0000000000..90de317767
--- /dev/null
+++ b/migrations/frontend/1683782561_githubappwebhooks/metadata.yaml
@@ -0,0 +1,2 @@
+name: github-app-webhooks
+parents: [1683246005, 1683561153, 1683640362]
diff --git a/migrations/frontend/1683782561_githubappwebhooks/up.sql b/migrations/frontend/1683782561_githubappwebhooks/up.sql
new file mode 100644
index 0000000000..bc3ef183a1
--- /dev/null
+++ b/migrations/frontend/1683782561_githubappwebhooks/up.sql
@@ -0,0 +1,2 @@
+ALTER TABLE github_apps
+    ADD COLUMN IF NOT EXISTS webhook_id INTEGER REFERENCES webhooks(id) ON DELETE SET NULL;
diff --git a/migrations/frontend/1683913757_add_ranking_progress_columns/down.sql b/migrations/frontend/1683913757_add_ranking_progress_columns/down.sql
new file mode 100644
index 0000000000..331d12e62c
--- /dev/null
+++ b/migrations/frontend/1683913757_add_ranking_progress_columns/down.sql
@@ -0,0 +1,6 @@
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS num_path_records_total;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS num_reference_records_total;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS num_count_records_total;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS num_path_records_processed;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS num_reference_records_processed;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS num_count_records_processed;
diff --git a/migrations/frontend/1683913757_add_ranking_progress_columns/metadata.yaml b/migrations/frontend/1683913757_add_ranking_progress_columns/metadata.yaml
new file mode 100644
index 0000000000..58e0ef7282
--- /dev/null
+++ b/migrations/frontend/1683913757_add_ranking_progress_columns/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add ranking progress columns
+parents: [1683641757, 1683753933, 1683782561]
diff --git a/migrations/frontend/1683913757_add_ranking_progress_columns/up.sql b/migrations/frontend/1683913757_add_ranking_progress_columns/up.sql
new file mode 100644
index 0000000000..aaab155229
--- /dev/null
+++ b/migrations/frontend/1683913757_add_ranking_progress_columns/up.sql
@@ -0,0 +1,6 @@
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS num_path_records_total INT;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS num_reference_records_total INT;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS num_count_records_total INT;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS num_path_records_processed INT;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS num_reference_records_processed INT;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS num_count_records_processed INT;
diff --git a/migrations/frontend/1683924275_own_signal_state/down.sql b/migrations/frontend/1683924275_own_signal_state/down.sql
new file mode 100644
index 0000000000..b86f694b1f
--- /dev/null
+++ b/migrations/frontend/1683924275_own_signal_state/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS own_signal_configurations;
diff --git a/migrations/frontend/1683924275_own_signal_state/metadata.yaml b/migrations/frontend/1683924275_own_signal_state/metadata.yaml
new file mode 100644
index 0000000000..97037c40e9
--- /dev/null
+++ b/migrations/frontend/1683924275_own_signal_state/metadata.yaml
@@ -0,0 +1,2 @@
+name: own_signal_state
+parents: [1683246005, 1683561153, 1683640362]
diff --git a/migrations/frontend/1683924275_own_signal_state/up.sql b/migrations/frontend/1683924275_own_signal_state/up.sql
new file mode 100644
index 0000000000..aad181adfb
--- /dev/null
+++ b/migrations/frontend/1683924275_own_signal_state/up.sql
@@ -0,0 +1,18 @@
+CREATE TABLE IF NOT EXISTS own_signal_configurations
+(
+    id                     SERIAL PRIMARY KEY,
+    name                   TEXT    NOT NULL,
+    description            TEXT    NOT NULL DEFAULT '',
+    excluded_repo_patterns TEXT[]  NULL,
+    enabled                BOOLEAN NOT NULL DEFAULT FALSE
+);
+
+CREATE UNIQUE INDEX IF NOT EXISTS own_signal_configurations_name_uidx ON own_signal_configurations(name);
+
+INSERT INTO own_signal_configurations (id, name, enabled, description)
+VALUES (1, 'recent-contributors', FALSE, 'Indexes contributors in each file using repository history.')
+ON CONFLICT DO NOTHING;
+INSERT INTO own_signal_configurations (id, name, enabled, description)
+VALUES (2, 'recent-views', FALSE, 'Indexes users that recently viewed files in Sourcegraph.')
+ON CONFLICT DO NOTHING;
+
diff --git a/migrations/frontend/1684180461_sg_telemetry_allowlist/down.sql b/migrations/frontend/1684180461_sg_telemetry_allowlist/down.sql
new file mode 100644
index 0000000000..06287cf809
--- /dev/null
+++ b/migrations/frontend/1684180461_sg_telemetry_allowlist/down.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry add`
+DELETE FROM event_logs_export_allowlist WHERE event_name IN (SELECT * FROM UNNEST('{SearchSubmitted,AccessRequestApproved,AccessRequestRejected}'::TEXT[]));
\ No newline at end of file
diff --git a/migrations/frontend/1684180461_sg_telemetry_allowlist/metadata.yaml b/migrations/frontend/1684180461_sg_telemetry_allowlist/metadata.yaml
new file mode 100644
index 0000000000..9866eb6323
--- /dev/null
+++ b/migrations/frontend/1684180461_sg_telemetry_allowlist/metadata.yaml
@@ -0,0 +1,2 @@
+name: sg_telemetry_allowlist
+parents: [1683641757, 1683753933, 1683782561]
diff --git a/migrations/frontend/1684180461_sg_telemetry_allowlist/up.sql b/migrations/frontend/1684180461_sg_telemetry_allowlist/up.sql
new file mode 100644
index 0000000000..438483f828
--- /dev/null
+++ b/migrations/frontend/1684180461_sg_telemetry_allowlist/up.sql
@@ -0,0 +1,2 @@
+-- This migration was generated by the command `sg telemetry add`
+INSERT INTO event_logs_export_allowlist (event_name) VALUES (UNNEST('{SearchSubmitted,AccessRequestApproved,AccessRequestRejected}'::TEXT[])) ON CONFLICT DO NOTHING;
\ No newline at end of file
diff --git a/migrations/frontend/1684207923_embeddings_proxy/down.sql b/migrations/frontend/1684207923_embeddings_proxy/down.sql
new file mode 100644
index 0000000000..98911dd8af
--- /dev/null
+++ b/migrations/frontend/1684207923_embeddings_proxy/down.sql
@@ -0,0 +1,4 @@
+ALTER TABLE product_subscriptions
+    DROP COLUMN IF EXISTS cody_gateway_embeddings_api_rate_limit,
+    DROP COLUMN IF EXISTS cody_gateway_embeddings_api_rate_interval_seconds,
+    DROP COLUMN IF EXISTS cody_gateway_embeddings_api_allowed_models;
diff --git a/migrations/frontend/1684207923_embeddings_proxy/metadata.yaml b/migrations/frontend/1684207923_embeddings_proxy/metadata.yaml
new file mode 100644
index 0000000000..64e497bd0c
--- /dev/null
+++ b/migrations/frontend/1684207923_embeddings_proxy/metadata.yaml
@@ -0,0 +1,2 @@
+name: Embeddings Proxy
+parents: [1683641757, 1683753933, 1683782561]
diff --git a/migrations/frontend/1684207923_embeddings_proxy/up.sql b/migrations/frontend/1684207923_embeddings_proxy/up.sql
new file mode 100644
index 0000000000..34797a1fdb
--- /dev/null
+++ b/migrations/frontend/1684207923_embeddings_proxy/up.sql
@@ -0,0 +1,8 @@
+ALTER TABLE product_subscriptions
+    ADD COLUMN IF NOT EXISTS cody_gateway_embeddings_api_rate_limit INTEGER,
+    ADD COLUMN IF NOT EXISTS cody_gateway_embeddings_api_rate_interval_seconds INTEGER,
+    ADD COLUMN IF NOT EXISTS cody_gateway_embeddings_api_allowed_models TEXT[];
+
+COMMENT ON COLUMN product_subscriptions.cody_gateway_embeddings_api_rate_limit IS 'Custom requests per time interval allowed for embeddings';
+COMMENT ON COLUMN product_subscriptions.cody_gateway_embeddings_api_rate_interval_seconds IS 'Custom time interval over which the embeddings rate limit is applied';
+COMMENT ON COLUMN product_subscriptions.cody_gateway_embeddings_api_allowed_models IS 'Custom override for the set of models allowed for embedding';
diff --git a/migrations/frontend/1684217409_create_assigned_owners_table/down.sql b/migrations/frontend/1684217409_create_assigned_owners_table/down.sql
new file mode 100644
index 0000000000..2b07d82610
--- /dev/null
+++ b/migrations/frontend/1684217409_create_assigned_owners_table/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS assigned_owners
diff --git a/migrations/frontend/1684217409_create_assigned_owners_table/metadata.yaml b/migrations/frontend/1684217409_create_assigned_owners_table/metadata.yaml
new file mode 100644
index 0000000000..6b61b4643a
--- /dev/null
+++ b/migrations/frontend/1684217409_create_assigned_owners_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: create assigned_owners table
+parents: [1683641757, 1683753933, 1683782561]
diff --git a/migrations/frontend/1684217409_create_assigned_owners_table/up.sql b/migrations/frontend/1684217409_create_assigned_owners_table/up.sql
new file mode 100644
index 0000000000..0eef682820
--- /dev/null
+++ b/migrations/frontend/1684217409_create_assigned_owners_table/up.sql
@@ -0,0 +1,15 @@
+CREATE TABLE IF NOT EXISTS assigned_owners
+(
+    id                   SERIAL PRIMARY KEY,
+    owner_user_id        INTEGER   NOT NULL REFERENCES users (id) ON DELETE CASCADE DEFERRABLE,
+    file_path_id         INTEGER   NOT NULL REFERENCES repo_paths (id),
+    who_assigned_user_id INTEGER   NULL REFERENCES users (id) ON DELETE SET NULL DEFERRABLE,
+    assigned_at          TIMESTAMP NOT NULL DEFAULT NOW()
+);
+
+CREATE UNIQUE INDEX IF NOT EXISTS assigned_owners_file_path
+    ON assigned_owners
+        USING btree (file_path_id);
+
+COMMENT ON TABLE assigned_owners
+    IS 'Table for ownership assignments, one entry contains an assigned user ID, which repo_path is assigned and the date and user who assigned the owner.';
diff --git a/migrations/frontend/1684248574_upsize_id_columns/down.sql b/migrations/frontend/1684248574_upsize_id_columns/down.sql
new file mode 100644
index 0000000000..3c3b9f5ce2
--- /dev/null
+++ b/migrations/frontend/1684248574_upsize_id_columns/down.sql
@@ -0,0 +1,22 @@
+ALTER TABLE codeintel_ranking_progress
+    ADD COLUMN new_max_definition_id INTEGER,
+    ADD COLUMN new_max_reference_id INTEGER,
+    ADD COLUMN new_max_path_id INTEGER;
+
+UPDATE codeintel_ranking_progress
+SET
+    new_max_definition_id = max_definition_id,
+    new_max_reference_id = max_reference_id,
+    new_max_path_id = max_path_id;
+
+ALTER TABLE codeintel_ranking_progress
+    DROP COLUMN max_definition_id,
+    DROP COLUMN max_reference_id,
+    DROP COLUMN max_path_id,
+    ALTER COLUMN new_max_definition_id SET NOT NULL,
+    ALTER COLUMN new_max_reference_id SET NOT NULL,
+    ALTER COLUMN new_max_path_id SET NOT NULL;
+
+ALTER TABLE codeintel_ranking_progress RENAME new_max_definition_id TO max_definition_id;
+ALTER TABLE codeintel_ranking_progress RENAME new_max_reference_id TO max_reference_id;
+ALTER TABLE codeintel_ranking_progress RENAME new_max_path_id TO max_path_id;
diff --git a/migrations/frontend/1684248574_upsize_id_columns/metadata.yaml b/migrations/frontend/1684248574_upsize_id_columns/metadata.yaml
new file mode 100644
index 0000000000..c84fa32e46
--- /dev/null
+++ b/migrations/frontend/1684248574_upsize_id_columns/metadata.yaml
@@ -0,0 +1,2 @@
+name: Upsize id columns
+parents: [1683641757, 1683753933, 1683782561]
diff --git a/migrations/frontend/1684248574_upsize_id_columns/up.sql b/migrations/frontend/1684248574_upsize_id_columns/up.sql
new file mode 100644
index 0000000000..e3b397f7e9
--- /dev/null
+++ b/migrations/frontend/1684248574_upsize_id_columns/up.sql
@@ -0,0 +1,22 @@
+ALTER TABLE codeintel_ranking_progress
+    ADD COLUMN new_max_definition_id BIGINT,
+    ADD COLUMN new_max_reference_id BIGINT,
+    ADD COLUMN new_max_path_id BIGINT;
+
+UPDATE codeintel_ranking_progress
+SET
+    new_max_definition_id = max_definition_id,
+    new_max_reference_id = max_reference_id,
+    new_max_path_id = max_path_id;
+
+ALTER TABLE codeintel_ranking_progress
+    DROP COLUMN max_definition_id,
+    DROP COLUMN max_reference_id,
+    DROP COLUMN max_path_id,
+    ALTER COLUMN new_max_definition_id SET NOT NULL,
+    ALTER COLUMN new_max_reference_id SET NOT NULL,
+    ALTER COLUMN new_max_path_id SET NOT NULL;
+
+ALTER TABLE codeintel_ranking_progress RENAME new_max_definition_id TO max_definition_id;
+ALTER TABLE codeintel_ranking_progress RENAME new_max_reference_id TO max_reference_id;
+ALTER TABLE codeintel_ranking_progress RENAME new_max_path_id TO max_path_id;
diff --git a/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/down.sql b/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/down.sql
new file mode 100644
index 0000000000..89b9c52f36
--- /dev/null
+++ b/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/down.sql
@@ -0,0 +1,5 @@
+DROP INDEX IF EXISTS assigned_owners_file_path;
+
+CREATE UNIQUE INDEX IF NOT EXISTS assigned_owners_file_path
+    ON assigned_owners
+        USING btree (file_path_id);
diff --git a/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/metadata.yaml b/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/metadata.yaml
new file mode 100644
index 0000000000..39b7f7b74f
--- /dev/null
+++ b/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/metadata.yaml
@@ -0,0 +1,2 @@
+name: make assigned_owners index non-unique
+parents: [1684180461, 1684217409, 1684248574]
diff --git a/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/up.sql b/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/up.sql
new file mode 100644
index 0000000000..d4aa50eed5
--- /dev/null
+++ b/migrations/frontend/1684306784_make_assigned_owners_index_nonunique/up.sql
@@ -0,0 +1,5 @@
+DROP INDEX IF EXISTS assigned_owners_file_path;
+
+CREATE INDEX IF NOT EXISTS assigned_owners_file_path
+    ON assigned_owners
+        USING btree (file_path_id);
diff --git a/migrations/frontend/1684396562_add_table_repo_commits_changelists/down.sql b/migrations/frontend/1684396562_add_table_repo_commits_changelists/down.sql
new file mode 100644
index 0000000000..a82d9f71cd
--- /dev/null
+++ b/migrations/frontend/1684396562_add_table_repo_commits_changelists/down.sql
@@ -0,0 +1,3 @@
+DROP INDEX IF EXISTS repo_id_perforce_changelist_id_unique;
+
+DROP TABLE IF EXISTS repo_commits_changelists;
diff --git a/migrations/frontend/1684396562_add_table_repo_commits_changelists/metadata.yaml b/migrations/frontend/1684396562_add_table_repo_commits_changelists/metadata.yaml
new file mode 100644
index 0000000000..a6e1b58193
--- /dev/null
+++ b/migrations/frontend/1684396562_add_table_repo_commits_changelists/metadata.yaml
@@ -0,0 +1,2 @@
+name: add table repo_commits_changelists
+parents: [1683913757, 1684306784, 1683924275]
diff --git a/migrations/frontend/1684396562_add_table_repo_commits_changelists/up.sql b/migrations/frontend/1684396562_add_table_repo_commits_changelists/up.sql
new file mode 100644
index 0000000000..5c26632acb
--- /dev/null
+++ b/migrations/frontend/1684396562_add_table_repo_commits_changelists/up.sql
@@ -0,0 +1,9 @@
+CREATE TABLE IF NOT EXISTS repo_commits_changelists (
+    id SERIAL PRIMARY KEY,
+    repo_id integer NOT NULL REFERENCES repo(id) ON DELETE CASCADE DEFERRABLE,
+    commit_sha bytea NOT NULL,
+    perforce_changelist_id integer NOT NULL,
+    created_at timestamp WITH TIME ZONE NOT NULL DEFAULT now()
+);
+
+CREATE UNIQUE INDEX IF NOT EXISTS repo_id_perforce_changelist_id_unique ON repo_commits_changelists USING btree (repo_id, perforce_changelist_id);
diff --git a/migrations/frontend/1684398004_drop_github_app_installs_table/down.sql b/migrations/frontend/1684398004_drop_github_app_installs_table/down.sql
new file mode 100644
index 0000000000..5cd8ff9154
--- /dev/null
+++ b/migrations/frontend/1684398004_drop_github_app_installs_table/down.sql
@@ -0,0 +1,10 @@
+-- This repeats migration 1682598027 that introduced the table
+CREATE TABLE IF NOT EXISTS github_app_installs (
+    id SERIAL PRIMARY KEY,
+    app_id INT NOT NULL REFERENCES github_apps(id) ON DELETE CASCADE,
+    installation_id INT NOT NULL,
+    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
+);
+
+CREATE INDEX IF NOT EXISTS installation_id_idx ON github_app_installs USING btree (installation_id);
+CREATE INDEX IF NOT EXISTS app_id_idx ON github_app_installs USING btree (app_id);
diff --git a/migrations/frontend/1684398004_drop_github_app_installs_table/metadata.yaml b/migrations/frontend/1684398004_drop_github_app_installs_table/metadata.yaml
new file mode 100644
index 0000000000..5b760c1e24
--- /dev/null
+++ b/migrations/frontend/1684398004_drop_github_app_installs_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: drop github_app_installs table
+parents: [1683913757, 1684306784, 1683924275]
diff --git a/migrations/frontend/1684398004_drop_github_app_installs_table/up.sql b/migrations/frontend/1684398004_drop_github_app_installs_table/up.sql
new file mode 100644
index 0000000000..5291aeb625
--- /dev/null
+++ b/migrations/frontend/1684398004_drop_github_app_installs_table/up.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS github_app_installs;
\ No newline at end of file
diff --git a/migrations/frontend/1684429687_own_signal_config_view/down.sql b/migrations/frontend/1684429687_own_signal_config_view/down.sql
new file mode 100644
index 0000000000..b600452fa9
--- /dev/null
+++ b/migrations/frontend/1684429687_own_signal_config_view/down.sql
@@ -0,0 +1 @@
+DROP VIEW IF EXISTS own_background_jobs_config_aware;
diff --git a/migrations/frontend/1684429687_own_signal_config_view/metadata.yaml b/migrations/frontend/1684429687_own_signal_config_view/metadata.yaml
new file mode 100644
index 0000000000..b1fd5bc3c7
--- /dev/null
+++ b/migrations/frontend/1684429687_own_signal_config_view/metadata.yaml
@@ -0,0 +1,2 @@
+name: own_signal_config_view
+parents: [1683913757, 1684306784, 1683924275]
diff --git a/migrations/frontend/1684429687_own_signal_config_view/up.sql b/migrations/frontend/1684429687_own_signal_config_view/up.sql
new file mode 100644
index 0000000000..472ee39bb9
--- /dev/null
+++ b/migrations/frontend/1684429687_own_signal_config_view/up.sql
@@ -0,0 +1,5 @@
+CREATE OR REPLACE VIEW own_background_jobs_config_aware AS
+SELECT obj.*, osc.name AS config_name
+FROM own_background_jobs obj
+         JOIN own_signal_configurations osc ON obj.job_type = osc.id
+WHERE osc.enabled IS TRUE;
diff --git a/migrations/frontend/1684632550_simplify_mapper_max_id/down.sql b/migrations/frontend/1684632550_simplify_mapper_max_id/down.sql
new file mode 100644
index 0000000000..6be3bd5714
--- /dev/null
+++ b/migrations/frontend/1684632550_simplify_mapper_max_id/down.sql
@@ -0,0 +1,14 @@
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS max_export_id;
+
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS max_definition_id BIGINT;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS max_reference_id BIGINT;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS max_path_id BIGINT;
+
+UPDATE codeintel_ranking_progress SET
+    max_definition_id = 0,
+    max_reference_id = 0,
+    max_path_id = 0;
+
+ALTER TABLE codeintel_ranking_progress ALTER COLUMN max_definition_id SET NOT NULL;
+ALTER TABLE codeintel_ranking_progress ALTER COLUMN max_reference_id SET NOT NULL;
+ALTER TABLE codeintel_ranking_progress ALTER COLUMN max_path_id SET NOT NULL;
diff --git a/migrations/frontend/1684632550_simplify_mapper_max_id/metadata.yaml b/migrations/frontend/1684632550_simplify_mapper_max_id/metadata.yaml
new file mode 100644
index 0000000000..4df609fe9c
--- /dev/null
+++ b/migrations/frontend/1684632550_simplify_mapper_max_id/metadata.yaml
@@ -0,0 +1,2 @@
+name: Simplify mapper max id
+parents: [1684398004, 1684429687]
diff --git a/migrations/frontend/1684632550_simplify_mapper_max_id/up.sql b/migrations/frontend/1684632550_simplify_mapper_max_id/up.sql
new file mode 100644
index 0000000000..7079c4a781
--- /dev/null
+++ b/migrations/frontend/1684632550_simplify_mapper_max_id/up.sql
@@ -0,0 +1,7 @@
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS max_definition_id;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS max_reference_id;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS max_path_id;
+
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS max_export_id BIGINT;
+UPDATE codeintel_ranking_progress SET max_export_id = 0;
+ALTER TABLE codeintel_ranking_progress ALTER COLUMN max_export_id SET NOT NULL;
diff --git a/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/down.sql b/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/down.sql
new file mode 100644
index 0000000000..ad5abb4e6a
--- /dev/null
+++ b/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/down.sql
@@ -0,0 +1 @@
+-- Update cannot be reverted, because this is actually a fix.
\ No newline at end of file
diff --git a/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/metadata.yaml b/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/metadata.yaml
new file mode 100644
index 0000000000..3e930a941c
--- /dev/null
+++ b/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/metadata.yaml
@@ -0,0 +1,2 @@
+name: set repo meta empty values to null
+parents: [1684398004, 1684429687]
diff --git a/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/up.sql b/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/up.sql
new file mode 100644
index 0000000000..fc8698456d
--- /dev/null
+++ b/migrations/frontend/1684753192_set_repo_meta_empty_values_to_null/up.sql
@@ -0,0 +1,15 @@
+-- Perform migration here.
+--
+-- See /migrations/README.md. Highlights:
+--  * Make migrations idempotent (use IF EXISTS)
+--  * Make migrations backwards-compatible (old readers/writers must continue to work)
+--  * If you are using CREATE INDEX CONCURRENTLY, then make sure that only one statement
+--    is defined per file, and that each such statement is NOT wrapped in a transaction.
+--    Each such migration must also declare "createIndexConcurrently: true" in their
+--    associated metadata.yaml file.
+--  * If you are modifying Postgres extensions, you must also declare "privileged: true"
+--    in the associated metadata.yaml file.
+
+UPDATE repo_kvps
+    SET value = NULL
+WHERE TRIM(value) = '';
diff --git a/migrations/frontend/1684771948_add_domain_to_github_app/down.sql b/migrations/frontend/1684771948_add_domain_to_github_app/down.sql
new file mode 100644
index 0000000000..131d67860d
--- /dev/null
+++ b/migrations/frontend/1684771948_add_domain_to_github_app/down.sql
@@ -0,0 +1,2 @@
+ALTER TABLE github_apps
+    DROP COLUMN IF EXISTS domain;
diff --git a/migrations/frontend/1684771948_add_domain_to_github_app/metadata.yaml b/migrations/frontend/1684771948_add_domain_to_github_app/metadata.yaml
new file mode 100644
index 0000000000..cdc030cd8b
--- /dev/null
+++ b/migrations/frontend/1684771948_add_domain_to_github_app/metadata.yaml
@@ -0,0 +1,2 @@
+name: add_domain_to_github_app
+parents: [1684396562, 1684632550]
diff --git a/migrations/frontend/1684771948_add_domain_to_github_app/up.sql b/migrations/frontend/1684771948_add_domain_to_github_app/up.sql
new file mode 100644
index 0000000000..8ac6eb15a4
--- /dev/null
+++ b/migrations/frontend/1684771948_add_domain_to_github_app/up.sql
@@ -0,0 +1,2 @@
+ALTER TABLE github_apps
+    ADD COLUMN IF NOT EXISTS domain TEXT NOT NULL DEFAULT 'repos';
diff --git a/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/down.sql b/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/down.sql
new file mode 100644
index 0000000000..bf83b1422d
--- /dev/null
+++ b/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/down.sql
@@ -0,0 +1,19 @@
+LOCK user_repo_permissions IN EXCLUSIVE MODE;
+
+-- drop primary key constraint first
+ALTER TABLE IF EXISTS user_repo_permissions 
+DROP CONSTRAINT IF EXISTS user_repo_permissions_pkey;
+
+-- change the id column back to plain int
+ALTER TABLE IF EXISTS user_repo_permissions 
+ALTER COLUMN id TYPE INT;
+
+-- update the sequence
+ALTER SEQUENCE IF EXISTS user_repo_permissions_id_seq AS INT OWNED BY user_repo_permissions.id RESTART WITH 1;
+
+-- reassign all the primary keys
+UPDATE user_repo_permissions 
+SET id = nextval('user_repo_permissions_id_seq');
+
+-- add back the primary key constraint
+ALTER TABLE IF EXISTS user_repo_permissions ADD CONSTRAINT user_repo_permissions_pkey PRIMARY KEY (id);
diff --git a/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/metadata.yaml b/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/metadata.yaml
new file mode 100644
index 0000000000..aed27d1c8b
--- /dev/null
+++ b/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: switch to bigserial on user_repo_permissions table
+parents: [1684396562, 1684632550]
diff --git a/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/up.sql b/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/up.sql
new file mode 100644
index 0000000000..bddb3689b6
--- /dev/null
+++ b/migrations/frontend/1684831743_switch_to_bigserial_on_user_repo_permissions_table/up.sql
@@ -0,0 +1,6 @@
+-- change the id column to bigint
+ALTER TABLE IF EXISTS user_repo_permissions 
+ALTER COLUMN id TYPE BIGINT;
+
+-- update the sequence
+ALTER SEQUENCE IF EXISTS user_repo_permissions_id_seq AS BIGINT OWNED BY user_repo_permissions.id;
diff --git a/migrations/frontend/1684854090_add_embeddings_to_policies/down.sql b/migrations/frontend/1684854090_add_embeddings_to_policies/down.sql
new file mode 100644
index 0000000000..467dcdf201
--- /dev/null
+++ b/migrations/frontend/1684854090_add_embeddings_to_policies/down.sql
@@ -0,0 +1,5 @@
+DROP VIEW IF EXISTS codeintel_configuration_policies;
+DROP VIEW IF EXISTS codeintel_configuration_policies_repository_pattern_lookup;
+
+ALTER TABLE lsif_configuration_policies DROP COLUMN IF EXISTS embeddings_enabled;
+ALTER TABLE lsif_configuration_policies ADD COLUMN IF NOT EXISTS lockfile_indexing_enabled BOOLEAN NOT NULL DEFAULT false;
diff --git a/migrations/frontend/1684854090_add_embeddings_to_policies/metadata.yaml b/migrations/frontend/1684854090_add_embeddings_to_policies/metadata.yaml
new file mode 100644
index 0000000000..0534296a21
--- /dev/null
+++ b/migrations/frontend/1684854090_add_embeddings_to_policies/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add embeddings to policies
+parents: [1684831743, 1684753192]
diff --git a/migrations/frontend/1684854090_add_embeddings_to_policies/up.sql b/migrations/frontend/1684854090_add_embeddings_to_policies/up.sql
new file mode 100644
index 0000000000..e7e2c06026
--- /dev/null
+++ b/migrations/frontend/1684854090_add_embeddings_to_policies/up.sql
@@ -0,0 +1,27 @@
+ALTER TABLE lsif_configuration_policies DROP COLUMN IF EXISTS lockfile_indexing_enabled;
+ALTER TABLE lsif_configuration_policies ADD COLUMN IF NOT EXISTS embeddings_enabled BOOLEAN NOT NULL DEFAULT false;
+
+CREATE OR REPLACE VIEW codeintel_configuration_policies AS
+SELECT
+    id,
+    repository_id,
+    name,
+    type,
+    pattern,
+    retention_enabled,
+    retention_duration_hours,
+    retain_intermediate_commits,
+    indexing_enabled,
+    index_commit_max_age_hours,
+    index_intermediate_commits,
+    protected,
+    repository_patterns,
+    last_resolved_at,
+    embeddings_enabled
+FROM lsif_configuration_policies;
+
+CREATE OR REPLACE VIEW codeintel_configuration_policies_repository_pattern_lookup AS
+SELECT
+    policy_id,
+    repo_id
+FROM lsif_configuration_policies_repository_pattern_lookup;
diff --git a/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/down.sql b/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/down.sql
new file mode 100644
index 0000000000..42d9a87529
--- /dev/null
+++ b/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/down.sql
@@ -0,0 +1,19 @@
+DO $$
+BEGIN
+    ALTER TABLE product_subscriptions RENAME COLUMN llm_proxy_chat_rate_limit TO llm_proxy_rate_limit;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_chat_rate_limit does not exist in table product_subscriptions';
+END $$;
+
+DO $$
+BEGIN
+    ALTER TABLE product_subscriptions RENAME COLUMN llm_proxy_chat_rate_interval_seconds TO llm_proxy_rate_interval_seconds;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_rate_interval_seconds does not exist in table product_subscriptions';
+END $$;
+
+ALTER TABLE product_subscriptions
+    DROP COLUMN IF EXISTS llm_proxy_chat_rate_limit_allowed_models,
+    DROP COLUMN IF EXISTS llm_proxy_code_rate_limit,
+	DROP COLUMN IF EXISTS llm_proxy_code_rate_interval_seconds,
+	DROP COLUMN IF EXISTS llm_proxy_code_rate_limit_allowed_models;
diff --git a/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/metadata.yaml b/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/metadata.yaml
new file mode 100644
index 0000000000..3e8dd14e79
--- /dev/null
+++ b/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/metadata.yaml
@@ -0,0 +1,2 @@
+name: LLM Proxy separate rate limits
+parents: [1684831743, 1684753192]
diff --git a/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/up.sql b/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/up.sql
new file mode 100644
index 0000000000..f931f466cd
--- /dev/null
+++ b/migrations/frontend/1684854389_llm_proxy_separate_rate_limits/up.sql
@@ -0,0 +1,19 @@
+DO $$
+BEGIN
+    ALTER TABLE product_subscriptions RENAME COLUMN llm_proxy_rate_limit TO llm_proxy_chat_rate_limit;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_rate_limit does not exist in table product_subscriptions';
+END $$;
+
+DO $$
+BEGIN
+    ALTER TABLE product_subscriptions RENAME COLUMN llm_proxy_rate_interval_seconds TO llm_proxy_chat_rate_interval_seconds;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_rate_interval_seconds does not exist in table product_subscriptions';
+END $$;
+
+ALTER TABLE product_subscriptions
+    ADD COLUMN IF NOT EXISTS llm_proxy_chat_rate_limit_allowed_models TEXT[],
+    ADD COLUMN IF NOT EXISTS llm_proxy_code_rate_limit INTEGER,
+	ADD COLUMN IF NOT EXISTS llm_proxy_code_rate_interval_seconds INTEGER,
+	ADD COLUMN IF NOT EXISTS llm_proxy_code_rate_limit_allowed_models TEXT[];
diff --git a/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/down.sql b/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/down.sql
new file mode 100644
index 0000000000..08c9cf82d2
--- /dev/null
+++ b/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/down.sql
@@ -0,0 +1,12 @@
+-- multi-queue executors are not implemented in the version that this down migration reverts to, so
+-- delete all heartbeats that contain multiple queue names due to queue_name being NULL for those rows
+DO $$
+BEGIN
+    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'executor_heartbeats' AND column_name = 'queue_names') THEN
+        DELETE FROM executor_heartbeats WHERE queue_name IS NULL AND queue_names IS NOT NULL;
+    END IF;
+END $$;
+
+ALTER TABLE executor_heartbeats DROP CONSTRAINT IF EXISTS one_of_queue_name_queue_names;
+ALTER TABLE executor_heartbeats DROP COLUMN IF EXISTS queue_names;
+ALTER TABLE executor_heartbeats ALTER COLUMN queue_name SET NOT NULL;
diff --git a/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/metadata.yaml b/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/metadata.yaml
new file mode 100644
index 0000000000..4be7b5a7b8
--- /dev/null
+++ b/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/metadata.yaml
@@ -0,0 +1,2 @@
+name: add queuenames column to executor heartbeat
+parents: [1684396562, 1684398004, 1684429687]
diff --git a/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/up.sql b/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/up.sql
new file mode 100644
index 0000000000..8d1b50ad20
--- /dev/null
+++ b/migrations/frontend/1684858266_add_queuenames_column_to_executor_heartbeat/up.sql
@@ -0,0 +1,17 @@
+ALTER TABLE executor_heartbeats ALTER COLUMN queue_name DROP NOT NULL;
+ALTER TABLE executor_heartbeats ADD COLUMN IF NOT EXISTS queue_names TEXT[];
+
+DO $$
+BEGIN
+    IF NOT EXISTS(SELECT 1 FROM pg_constraint WHERE conname = 'one_of_queue_name_queue_names') THEN
+        ALTER TABLE executor_heartbeats
+            ADD CONSTRAINT one_of_queue_name_queue_names
+                CHECK (
+                        (queue_name IS NOT NULL AND queue_names IS NULL)
+                        OR
+                        (queue_names IS NOT NULL AND queue_name IS NULL)
+                    );
+    END IF;
+END $$;
+
+COMMENT ON COLUMN executor_heartbeats.queue_names IS 'The list of queue names that the executor polls for work.';
diff --git a/migrations/frontend/1684933018_add_ranking_mapper_index/down.sql b/migrations/frontend/1684933018_add_ranking_mapper_index/down.sql
new file mode 100644
index 0000000000..65a7ae4f4f
--- /dev/null
+++ b/migrations/frontend/1684933018_add_ranking_mapper_index/down.sql
@@ -0,0 +1 @@
+DROP INDEX IF EXISTS codeintel_ranking_exports_graph_key_deleted_at_id;
diff --git a/migrations/frontend/1684933018_add_ranking_mapper_index/metadata.yaml b/migrations/frontend/1684933018_add_ranking_mapper_index/metadata.yaml
new file mode 100644
index 0000000000..7d1d50e8e2
--- /dev/null
+++ b/migrations/frontend/1684933018_add_ranking_mapper_index/metadata.yaml
@@ -0,0 +1,3 @@
+name: Add ranking mapper index
+parents: [1684831743, 1684753192]
+createIndexConcurrently: true
diff --git a/migrations/frontend/1684933018_add_ranking_mapper_index/up.sql b/migrations/frontend/1684933018_add_ranking_mapper_index/up.sql
new file mode 100644
index 0000000000..74cd749a93
--- /dev/null
+++ b/migrations/frontend/1684933018_add_ranking_mapper_index/up.sql
@@ -0,0 +1 @@
+CREATE INDEX CONCURRENTLY IF NOT EXISTS codeintel_ranking_exports_graph_key_deleted_at_id ON codeintel_ranking_exports(graph_key, deleted_at DESC NULLS FIRST, id);
diff --git a/migrations/frontend/1685103392_add_ranking_export_hash_key/down.sql b/migrations/frontend/1685103392_add_ranking_export_hash_key/down.sql
new file mode 100644
index 0000000000..1dd69fe70d
--- /dev/null
+++ b/migrations/frontend/1685103392_add_ranking_export_hash_key/down.sql
@@ -0,0 +1 @@
+ALTER TABLE codeintel_ranking_exports DROP COLUMN IF EXISTS upload_key;
diff --git a/migrations/frontend/1685103392_add_ranking_export_hash_key/metadata.yaml b/migrations/frontend/1685103392_add_ranking_export_hash_key/metadata.yaml
new file mode 100644
index 0000000000..ce642ea00d
--- /dev/null
+++ b/migrations/frontend/1685103392_add_ranking_export_hash_key/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add ranking export hash key
+parents: [1684854090, 1684933018]
diff --git a/migrations/frontend/1685103392_add_ranking_export_hash_key/up.sql b/migrations/frontend/1685103392_add_ranking_export_hash_key/up.sql
new file mode 100644
index 0000000000..031e574441
--- /dev/null
+++ b/migrations/frontend/1685103392_add_ranking_export_hash_key/up.sql
@@ -0,0 +1,7 @@
+ALTER TABLE codeintel_ranking_exports ADD COLUMN IF NOT EXISTS upload_key TEXT;
+
+UPDATE codeintel_ranking_exports SET upload_key = (
+    SELECT md5(u.repository_id || ':' || u.root || ':' || u.indexer)
+    FROM lsif_uploads u
+    WHERE u.id = upload_id
+) WHERE upload_key IS NULL;
diff --git a/migrations/frontend/1685105270_simplify_ranking_reducer_table/down.sql b/migrations/frontend/1685105270_simplify_ranking_reducer_table/down.sql
new file mode 100644
index 0000000000..8593bf3ec2
--- /dev/null
+++ b/migrations/frontend/1685105270_simplify_ranking_reducer_table/down.sql
@@ -0,0 +1,5 @@
+ALTER TABLE codeintel_ranking_path_counts_inputs DROP COLUMN IF EXISTS definition_id;
+ALTER TABLE codeintel_ranking_path_counts_inputs ADD COLUMN IF NOT EXISTS document_path TEXT NOT NULL;
+ALTER TABLE codeintel_ranking_path_counts_inputs ADD COLUMN IF NOT EXISTS repository_id INTEGER NOT NULL;
+
+CREATE INDEX IF NOT EXISTS codeintel_ranking_path_counts_inputs_graph_key_repository_id_id ON codeintel_ranking_path_counts_inputs(graph_key, repository_id, id) WHERE NOT processed;
diff --git a/migrations/frontend/1685105270_simplify_ranking_reducer_table/metadata.yaml b/migrations/frontend/1685105270_simplify_ranking_reducer_table/metadata.yaml
new file mode 100644
index 0000000000..375f5e16c3
--- /dev/null
+++ b/migrations/frontend/1685105270_simplify_ranking_reducer_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: Simplify ranking reducer table
+parents: [1685103392]
diff --git a/migrations/frontend/1685105270_simplify_ranking_reducer_table/up.sql b/migrations/frontend/1685105270_simplify_ranking_reducer_table/up.sql
new file mode 100644
index 0000000000..2ec3aeee40
--- /dev/null
+++ b/migrations/frontend/1685105270_simplify_ranking_reducer_table/up.sql
@@ -0,0 +1,5 @@
+ALTER TABLE codeintel_ranking_path_counts_inputs DROP COLUMN IF EXISTS document_path;
+ALTER TABLE codeintel_ranking_path_counts_inputs DROP COLUMN IF EXISTS repository_id;
+ALTER TABLE codeintel_ranking_path_counts_inputs ADD COLUMN IF NOT EXISTS definition_id BIGINT;
+
+CREATE INDEX IF NOT EXISTS codeintel_ranking_path_counts_inputs_graph_key_definition_id ON codeintel_ranking_path_counts_inputs(graph_key, definition_id, id) WHERE NOT processed;
diff --git a/migrations/frontend/1685453088_create_github_apps_install_tables/down.sql b/migrations/frontend/1685453088_create_github_apps_install_tables/down.sql
new file mode 100644
index 0000000000..7eb029f94a
--- /dev/null
+++ b/migrations/frontend/1685453088_create_github_apps_install_tables/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS github_app_installs;
diff --git a/migrations/frontend/1685453088_create_github_apps_install_tables/metadata.yaml b/migrations/frontend/1685453088_create_github_apps_install_tables/metadata.yaml
new file mode 100644
index 0000000000..d9e7e7f105
--- /dev/null
+++ b/migrations/frontend/1685453088_create_github_apps_install_tables/metadata.yaml
@@ -0,0 +1,2 @@
+name: create_github_apps_install_tables
+parents: [1684771948, 1685105270]
diff --git a/migrations/frontend/1685453088_create_github_apps_install_tables/up.sql b/migrations/frontend/1685453088_create_github_apps_install_tables/up.sql
new file mode 100644
index 0000000000..9a715e2246
--- /dev/null
+++ b/migrations/frontend/1685453088_create_github_apps_install_tables/up.sql
@@ -0,0 +1,9 @@
+CREATE TABLE IF NOT EXISTS github_app_installs (
+    id SERIAL PRIMARY KEY,
+    app_id INT NOT NULL REFERENCES github_apps(id) ON DELETE CASCADE,
+    installation_id INT NOT NULL,
+    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
+);
+
+CREATE INDEX IF NOT EXISTS installation_id_idx ON github_app_installs USING btree (installation_id);
+CREATE INDEX IF NOT EXISTS app_id_idx ON github_app_installs USING btree (app_id);
diff --git a/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/down.sql b/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/down.sql
new file mode 100644
index 0000000000..26dbc73c13
--- /dev/null
+++ b/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/down.sql
@@ -0,0 +1,55 @@
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+            RENAME COLUMN cody_gateway_enabled TO llm_proxy_enabled;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column cody_gateway_enabled does not exist in table product_subscriptions';
+END $$;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN cody_gateway_chat_rate_limit TO llm_proxy_chat_rate_limit;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column cody_gateway_chat_rate_limit does not exist in table product_subscriptions';
+END $$;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN cody_gateway_chat_rate_interval_seconds TO llm_proxy_chat_rate_interval_seconds;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column cody_gateway_chat_rate_interval_seconds does not exist in table product_subscriptions';
+END $$;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN cody_gateway_chat_rate_limit_allowed_models TO llm_proxy_chat_rate_limit_allowed_models;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column cody_gateway_chat_rate_limit_allowed_models does not exist in table product_subscriptions';
+END $$;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN cody_gateway_code_rate_limit TO llm_proxy_code_rate_limit;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column cody_gateway_code_rate_limit does not exist in table product_subscriptions';
+END $$;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN cody_gateway_code_rate_interval_seconds TO llm_proxy_code_rate_interval_seconds;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column cody_gateway_code_rate_interval_seconds does not exist in table product_subscriptions';
+END $$;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN cody_gateway_code_rate_limit_allowed_models TO llm_proxy_code_rate_limit_allowed_models;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column cody_gateway_code_rate_limit_allowed_models does not exist in table product_subscriptions';
+END $$;
diff --git a/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/metadata.yaml b/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/metadata.yaml
new file mode 100644
index 0000000000..3e78f29048
--- /dev/null
+++ b/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/metadata.yaml
@@ -0,0 +1,2 @@
+name: Rename LLM Proxy to Cody Gateway
+parents: [1684854389, 1685105270]
diff --git a/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/up.sql b/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/up.sql
new file mode 100644
index 0000000000..66153fcb46
--- /dev/null
+++ b/migrations/frontend/1685495400_rename_llm_proxy_to_cody_gateway/up.sql
@@ -0,0 +1,69 @@
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN llm_proxy_enabled TO cody_gateway_enabled;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_enabled does not exist in table product_subscriptions';
+END $$;
+
+COMMENT ON COLUMN public.product_subscriptions.cody_gateway_enabled IS NULL;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN llm_proxy_chat_rate_limit TO cody_gateway_chat_rate_limit;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_chat_rate_limit does not exist in table product_subscriptions';
+END $$;
+
+COMMENT ON COLUMN public.product_subscriptions.cody_gateway_chat_rate_limit IS NULL;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN llm_proxy_chat_rate_interval_seconds TO cody_gateway_chat_rate_interval_seconds;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_chat_rate_interval_seconds does not exist in table product_subscriptions';
+END $$;
+
+COMMENT ON COLUMN public.product_subscriptions.cody_gateway_chat_rate_interval_seconds IS NULL;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN llm_proxy_chat_rate_limit_allowed_models TO cody_gateway_chat_rate_limit_allowed_models;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_chat_rate_limit_allowed_models does not exist in table product_subscriptions';
+END $$;
+
+COMMENT ON COLUMN public.product_subscriptions.cody_gateway_chat_rate_limit_allowed_models IS NULL;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN llm_proxy_code_rate_limit TO cody_gateway_code_rate_limit;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_code_rate_limit does not exist in table product_subscriptions';
+END $$;
+
+COMMENT ON COLUMN public.product_subscriptions.cody_gateway_code_rate_limit IS NULL;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN llm_proxy_code_rate_interval_seconds TO cody_gateway_code_rate_interval_seconds;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_code_rate_interval_seconds does not exist in table product_subscriptions';
+END $$;
+
+COMMENT ON COLUMN public.product_subscriptions.cody_gateway_code_rate_interval_seconds IS NULL;
+
+DO $$
+BEGIN
+    ALTER TABLE public.product_subscriptions
+        RENAME COLUMN llm_proxy_code_rate_limit_allowed_models TO cody_gateway_code_rate_limit_allowed_models;
+EXCEPTION
+    WHEN undefined_column THEN RAISE NOTICE 'column llm_proxy_code_rate_limit_allowed_models does not exist in table product_subscriptions';
+END $$;
+
+COMMENT ON COLUMN public.product_subscriptions.cody_gateway_code_rate_limit_allowed_models IS NULL;
diff --git a/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/down.sql b/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/down.sql
new file mode 100644
index 0000000000..1238d9409a
--- /dev/null
+++ b/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/down.sql
@@ -0,0 +1,8 @@
+DROP INDEX IF EXISTS product_licenses_license_check_token_idx;
+
+ALTER TABLE IF EXISTS product_licenses
+    DROP COLUMN IF EXISTS site_id,
+    DROP COLUMN IF EXISTS license_check_token,
+    DROP COLUMN IF EXISTS revoked_at,
+    DROP COLUMN IF EXISTS salesforce_sub_id,
+    DROP COLUMN IF EXISTS salesforce_opp_id;
\ No newline at end of file
diff --git a/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/metadata.yaml b/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/metadata.yaml
new file mode 100644
index 0000000000..8d5fbdc4ee
--- /dev/null
+++ b/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/metadata.yaml
@@ -0,0 +1,2 @@
+name: add license fields to support auto billing
+parents: [1684854389, 1685105270]
diff --git a/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/up.sql b/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/up.sql
new file mode 100644
index 0000000000..c0ee0fb136
--- /dev/null
+++ b/migrations/frontend/1685525992_add_license_fields_to_support_auto_billing/up.sql
@@ -0,0 +1,8 @@
+ALTER TABLE IF EXISTS product_licenses
+    ADD COLUMN IF NOT EXISTS site_id UUID,
+    ADD COLUMN IF NOT EXISTS license_check_token bytea,
+    ADD COLUMN IF NOT EXISTS revoked_at timestamptz,
+    ADD COLUMN IF NOT EXISTS salesforce_sub_id text,
+    ADD COLUMN IF NOT EXISTS salesforce_opp_id text;
+
+CREATE UNIQUE INDEX IF NOT EXISTS product_licenses_license_check_token_idx ON product_licenses(license_check_token);
diff --git a/migrations/frontend/1685562535_add_missing_ranking_index/down.sql b/migrations/frontend/1685562535_add_missing_ranking_index/down.sql
new file mode 100644
index 0000000000..aa46e62b40
--- /dev/null
+++ b/migrations/frontend/1685562535_add_missing_ranking_index/down.sql
@@ -0,0 +1 @@
+DROP INDEX IF EXISTS codeintel_initial_path_ranks_processed_codeintel_initial_path_ranks_id;
diff --git a/migrations/frontend/1685562535_add_missing_ranking_index/metadata.yaml b/migrations/frontend/1685562535_add_missing_ranking_index/metadata.yaml
new file mode 100644
index 0000000000..dc9f389daf
--- /dev/null
+++ b/migrations/frontend/1685562535_add_missing_ranking_index/metadata.yaml
@@ -0,0 +1,3 @@
+name: Add missing ranking index
+parents: [1684854389, 1685105270]
+createIndexConcurrently: true
diff --git a/migrations/frontend/1685562535_add_missing_ranking_index/up.sql b/migrations/frontend/1685562535_add_missing_ranking_index/up.sql
new file mode 100644
index 0000000000..c8d42f7535
--- /dev/null
+++ b/migrations/frontend/1685562535_add_missing_ranking_index/up.sql
@@ -0,0 +1 @@
+CREATE INDEX CONCURRENTLY IF NOT EXISTS codeintel_initial_path_ranks_processed_codeintel_initial_path_ranks_id ON codeintel_initial_path_ranks_processed(codeintel_initial_path_ranks_id);
diff --git a/migrations/frontend/1685570436_add_ranking_graph_key_table/down.sql b/migrations/frontend/1685570436_add_ranking_graph_key_table/down.sql
new file mode 100644
index 0000000000..4b79526d90
--- /dev/null
+++ b/migrations/frontend/1685570436_add_ranking_graph_key_table/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS codeintel_ranking_graph_keys;
diff --git a/migrations/frontend/1685570436_add_ranking_graph_key_table/metadata.yaml b/migrations/frontend/1685570436_add_ranking_graph_key_table/metadata.yaml
new file mode 100644
index 0000000000..b5715c80cc
--- /dev/null
+++ b/migrations/frontend/1685570436_add_ranking_graph_key_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add ranking graph key table
+parents: [1685562535]
diff --git a/migrations/frontend/1685570436_add_ranking_graph_key_table/up.sql b/migrations/frontend/1685570436_add_ranking_graph_key_table/up.sql
new file mode 100644
index 0000000000..03df98821a
--- /dev/null
+++ b/migrations/frontend/1685570436_add_ranking_graph_key_table/up.sql
@@ -0,0 +1,5 @@
+CREATE TABLE IF NOT EXISTS codeintel_ranking_graph_keys (
+    id SERIAL PRIMARY KEY,
+    graph_key TEXT NOT NULL,
+    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
+);
diff --git a/migrations/frontend/1685645480_normalize_base_url/down.sql b/migrations/frontend/1685645480_normalize_base_url/down.sql
new file mode 100644
index 0000000000..133491819d
--- /dev/null
+++ b/migrations/frontend/1685645480_normalize_base_url/down.sql
@@ -0,0 +1 @@
+-- Up migration only changes data, no down migration necessary.
diff --git a/migrations/frontend/1685645480_normalize_base_url/metadata.yaml b/migrations/frontend/1685645480_normalize_base_url/metadata.yaml
new file mode 100644
index 0000000000..eb76c738a6
--- /dev/null
+++ b/migrations/frontend/1685645480_normalize_base_url/metadata.yaml
@@ -0,0 +1,2 @@
+name: normalize_base_url
+parents: [1684771948, 1685105270]
diff --git a/migrations/frontend/1685645480_normalize_base_url/up.sql b/migrations/frontend/1685645480_normalize_base_url/up.sql
new file mode 100644
index 0000000000..56c40b2722
--- /dev/null
+++ b/migrations/frontend/1685645480_normalize_base_url/up.sql
@@ -0,0 +1,5 @@
+UPDATE github_apps
+-- Add a trailing slash to URNs that don't have one. This mimics the effect of the
+-- extsvc.NormalizeBaseURL method in Go
+SET base_url = CONCAT(base_url, '/')
+WHERE base_url NOT LIKE '%/';
diff --git a/migrations/frontend/1685695443_codeowners_stats_and_counts/down.sql b/migrations/frontend/1685695443_codeowners_stats_and_counts/down.sql
new file mode 100644
index 0000000000..ea43df066f
--- /dev/null
+++ b/migrations/frontend/1685695443_codeowners_stats_and_counts/down.sql
@@ -0,0 +1,9 @@
+ALTER TABLE IF EXISTS repo_paths DROP COLUMN IF EXISTS tree_files_count,
+    DROP COLUMN IF EXISTS tree_files_counts_updated_at;
+
+DROP TABLE IF EXISTS codeowners_individual_stats;
+
+DROP TABLE IF EXISTS ownership_path_stats;
+
+DROP INDEX IF EXISTS codeowners_owners_reference;
+DROP TABLE IF EXISTS codeowners_owners;
diff --git a/migrations/frontend/1685695443_codeowners_stats_and_counts/metadata.yaml b/migrations/frontend/1685695443_codeowners_stats_and_counts/metadata.yaml
new file mode 100644
index 0000000000..79bdf10fa8
--- /dev/null
+++ b/migrations/frontend/1685695443_codeowners_stats_and_counts/metadata.yaml
@@ -0,0 +1,2 @@
+name: codeowners_stats_and_counts
+parents: [1685495400, 1685525992, 1685570436]
diff --git a/migrations/frontend/1685695443_codeowners_stats_and_counts/up.sql b/migrations/frontend/1685695443_codeowners_stats_and_counts/up.sql
new file mode 100644
index 0000000000..3c581c9e16
--- /dev/null
+++ b/migrations/frontend/1685695443_codeowners_stats_and_counts/up.sql
@@ -0,0 +1,50 @@
+CREATE TABLE IF NOT EXISTS codeowners_owners (
+    id SERIAL NOT NULL PRIMARY KEY,
+    reference TEXT NOT NULL
+);
+
+COMMENT ON TABLE codeowners_owners IS 'Text reference in CODEOWNERS entry to use in codeowners_individual_stats. Reference is either email or handle without @ in front.';
+COMMENT ON COLUMN codeowners_owners.reference IS 'We just keep the reference as opposed to splitting it to handle or email
+since the distinction is not relevant for query, and this makes indexing way easier.';
+
+CREATE INDEX IF NOT EXISTS codeowners_owners_reference ON codeowners_owners USING btree (reference);
+
+CREATE TABLE IF NOT EXISTS ownership_path_stats (
+    file_path_id INTEGER NOT NULL PRIMARY KEY REFERENCES repo_paths(id),
+    tree_codeowned_files_count INTEGER NULL,
+    last_updated_at TIMESTAMP NOT NULL
+);
+
+COMMENT ON TABLE ownership_path_stats IS 'Data on how many files in given tree are owned by anyone.
+
+We choose to have a table for `ownership_path_stats` - more general than for CODEOWNERS,
+with a specific tree_codeowned_files_count CODEOWNERS column. The reason for that
+is that we aim at expanding path stats by including total owned files (via CODEOWNERS
+or assigned ownership), and perhaps files count by assigned ownership only.';
+COMMENT ON COLUMN ownership_path_stats.last_updated_at IS 'When the last background job updating counts run.';
+
+
+CREATE TABLE IF NOT EXISTS codeowners_individual_stats (
+    file_path_id INTEGER NOT NULL REFERENCES repo_paths(id),
+    owner_id INTEGER NOT NULL REFERENCES codeowners_owners(id),
+    tree_owned_files_count INTEGER NOT NULL,
+    updated_at TIMESTAMP NOT NULL,
+    -- We choose a compound primary key as the counts are looked up by either file_path_id only
+    -- or by the pair.
+    PRIMARY KEY (file_path_id, owner_id)
+);
+
+COMMENT ON TABLE codeowners_individual_stats IS 'Data on how many files in given tree are owned by given owner.
+
+As opposed to ownership-general `ownership_path_stats` table, the individual <path x owner> stats
+are stored in CODEOWNERS-specific table `codeowners_individual_stats`. The reason for that is that
+we are also indexing on owner_id which is CODEOWNERS-specific.';
+COMMENT ON COLUMN codeowners_individual_stats.tree_owned_files_count IS 'Total owned file count by given owner at given file tree.';
+COMMENT ON COLUMN codeowners_individual_stats.updated_at IS 'When the last background job updating counts run.';
+
+ALTER TABLE IF EXISTS repo_paths
+ADD COLUMN IF NOT EXISTS tree_files_count INTEGER NULL,
+    ADD COLUMN IF NOT EXISTS tree_files_counts_updated_at TIMESTAMP NULL;
+
+COMMENT ON COLUMN repo_paths.tree_files_count IS 'Total count of files in the file tree rooted at the path. 1 for files.';
+COMMENT ON COLUMN repo_paths.tree_files_counts_updated_at IS 'Timestamp of the job that updated the file counts';
\ No newline at end of file
diff --git a/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/down.sql b/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/down.sql
new file mode 100644
index 0000000000..fb623a16cb
--- /dev/null
+++ b/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/down.sql
@@ -0,0 +1,5 @@
+DROP INDEX IF EXISTS assigned_owners_file_path_owner;
+
+CREATE INDEX IF NOT EXISTS assigned_owners_file_path
+    ON assigned_owners
+        USING btree (file_path_id);
diff --git a/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/metadata.yaml b/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/metadata.yaml
new file mode 100644
index 0000000000..20aeca30ea
--- /dev/null
+++ b/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/metadata.yaml
@@ -0,0 +1,2 @@
+name: add unique constraint to assigned_owners
+parents: [1685495400, 1685525992, 1685570436]
diff --git a/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/up.sql b/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/up.sql
new file mode 100644
index 0000000000..e3c6d8d54a
--- /dev/null
+++ b/migrations/frontend/1685697346_add_unique_constraint_to_assigned_owners/up.sql
@@ -0,0 +1,5 @@
+DROP INDEX IF EXISTS assigned_owners_file_path;
+
+CREATE UNIQUE INDEX IF NOT EXISTS assigned_owners_file_path_owner
+    ON assigned_owners
+        USING btree (file_path_id, owner_user_id);
diff --git a/migrations/frontend/1685712730_add_own_analytics_setting/down.sql b/migrations/frontend/1685712730_add_own_analytics_setting/down.sql
new file mode 100644
index 0000000000..a47a4a296f
--- /dev/null
+++ b/migrations/frontend/1685712730_add_own_analytics_setting/down.sql
@@ -0,0 +1,2 @@
+DELETE FROM own_signal_configurations
+WHERE name = 'analytics';
\ No newline at end of file
diff --git a/migrations/frontend/1685712730_add_own_analytics_setting/metadata.yaml b/migrations/frontend/1685712730_add_own_analytics_setting/metadata.yaml
new file mode 100644
index 0000000000..6cc33fdd96
--- /dev/null
+++ b/migrations/frontend/1685712730_add_own_analytics_setting/metadata.yaml
@@ -0,0 +1,2 @@
+name: add_own_analytics_setting
+parents: [1685495400, 1685525992, 1685570436]
diff --git a/migrations/frontend/1685712730_add_own_analytics_setting/up.sql b/migrations/frontend/1685712730_add_own_analytics_setting/up.sql
new file mode 100644
index 0000000000..9269799e86
--- /dev/null
+++ b/migrations/frontend/1685712730_add_own_analytics_setting/up.sql
@@ -0,0 +1,6 @@
+INSERT INTO own_signal_configurations (name, enabled, description)
+VALUES (
+        'analytics',
+        FALSE,
+        'Indexes ownership data to present in aggregated views like Admin > Analytics > Own and Repo > Ownership'
+    ) ON CONFLICT DO NOTHING;
\ No newline at end of file
diff --git a/migrations/frontend/1685727930_junk_cleanup/down.sql b/migrations/frontend/1685727930_junk_cleanup/down.sql
new file mode 100644
index 0000000000..06d4810497
--- /dev/null
+++ b/migrations/frontend/1685727930_junk_cleanup/down.sql
@@ -0,0 +1 @@
+-- What do you want me to do, put junk *back*??
diff --git a/migrations/frontend/1685727930_junk_cleanup/metadata.yaml b/migrations/frontend/1685727930_junk_cleanup/metadata.yaml
new file mode 100644
index 0000000000..bea744a358
--- /dev/null
+++ b/migrations/frontend/1685727930_junk_cleanup/metadata.yaml
@@ -0,0 +1,2 @@
+name: Junk cleanup
+parents: [1685697346]
diff --git a/migrations/frontend/1685727930_junk_cleanup/up.sql b/migrations/frontend/1685727930_junk_cleanup/up.sql
new file mode 100644
index 0000000000..4a44c5e92b
--- /dev/null
+++ b/migrations/frontend/1685727930_junk_cleanup/up.sql
@@ -0,0 +1,20 @@
+WITH
+progress AS (
+    SELECT graph_key
+    FROM codeintel_ranking_progress
+    ORDER BY mappers_started_at DESC
+    LIMIT 1
+),
+del_references AS (
+    DELETE FROM codeintel_ranking_references_processed
+    WHERE graph_key NOT IN (SELECT graph_key FROM progress)
+    RETURNING 1
+),
+del_paths AS (
+    DELETE FROM codeintel_initial_path_ranks_processed
+    WHERE graph_key NOT IN (SELECT graph_key FROM progress)
+    RETURNING 1
+)
+SELECT
+    (SELECT COUNT(*) FROM del_references),
+    (SELECT COUNT(*) FROM del_paths);
diff --git a/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/down.sql b/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/down.sql
new file mode 100644
index 0000000000..8c0a835782
--- /dev/null
+++ b/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/down.sql
@@ -0,0 +1 @@
+DROP INDEX IF EXISTS codeintel_ranking_path_counts_inputs_graph_key_unique_definition_id;
diff --git a/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/metadata.yaml b/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/metadata.yaml
new file mode 100644
index 0000000000..87ba060fc6
--- /dev/null
+++ b/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/metadata.yaml
@@ -0,0 +1,2 @@
+name: Make path count inputs unique by definition_id.
+parents: [1685695443, 1685697346, 1685712730, 1684858266]
diff --git a/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/up.sql b/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/up.sql
new file mode 100644
index 0000000000..7af3fae890
--- /dev/null
+++ b/migrations/frontend/1685983690_make_path_count_inputs_unique_by_definition_id/up.sql
@@ -0,0 +1,3 @@
+UPDATE codeintel_ranking_path_counts_inputs SET processed = true WHERE NOT processed;
+
+CREATE UNIQUE INDEX IF NOT EXISTS codeintel_ranking_path_counts_inputs_graph_key_unique_definition_id ON codeintel_ranking_path_counts_inputs(graph_key, definition_id) WHERE NOT processed;
diff --git a/migrations/frontend/1685984018_drop_duplicate_index/down.sql b/migrations/frontend/1685984018_drop_duplicate_index/down.sql
new file mode 100644
index 0000000000..7d7d30fe2e
--- /dev/null
+++ b/migrations/frontend/1685984018_drop_duplicate_index/down.sql
@@ -0,0 +1 @@
+CREATE INDEX IF NOT EXISTS codeintel_ranking_path_counts_inputs_graph_key_definition_id ON codeintel_ranking_path_counts_inputs(graph_key, definition_id, id) WHERE NOT processed;
diff --git a/migrations/frontend/1685984018_drop_duplicate_index/metadata.yaml b/migrations/frontend/1685984018_drop_duplicate_index/metadata.yaml
new file mode 100644
index 0000000000..531998c24e
--- /dev/null
+++ b/migrations/frontend/1685984018_drop_duplicate_index/metadata.yaml
@@ -0,0 +1,2 @@
+name: Drop duplicate index.
+parents: [1685983690]
diff --git a/migrations/frontend/1685984018_drop_duplicate_index/up.sql b/migrations/frontend/1685984018_drop_duplicate_index/up.sql
new file mode 100644
index 0000000000..ddd923afea
--- /dev/null
+++ b/migrations/frontend/1685984018_drop_duplicate_index/up.sql
@@ -0,0 +1 @@
+DROP INDEX IF EXISTS codeintel_ranking_path_counts_inputs_graph_key_definition_id;
diff --git a/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/down.sql b/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/down.sql
new file mode 100644
index 0000000000..d2dca72de1
--- /dev/null
+++ b/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/down.sql
@@ -0,0 +1,4 @@
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS reference_cursor_export_deleted_at;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS reference_cursor_export_id;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS path_cursor_deleted_export_at;
+ALTER TABLE codeintel_ranking_progress DROP COLUMN IF EXISTS path_cursor_export_id;
diff --git a/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/metadata.yaml b/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/metadata.yaml
new file mode 100644
index 0000000000..da6938b2e0
--- /dev/null
+++ b/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add additional progress tracking for ranking mapper.
+parents: [1685695443, 1685697346, 1685712730, 1684858266]
diff --git a/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/up.sql b/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/up.sql
new file mode 100644
index 0000000000..20419068d2
--- /dev/null
+++ b/migrations/frontend/1685999719_add_additional_progress_tracking_for_ranking_mapper/up.sql
@@ -0,0 +1,4 @@
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS reference_cursor_export_deleted_at TIMESTAMP WITH TIME ZONE;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS reference_cursor_export_id INTEGER;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS path_cursor_deleted_export_at TIMESTAMP WITH TIME ZONE;
+ALTER TABLE codeintel_ranking_progress ADD COLUMN IF NOT EXISTS path_cursor_export_id INTEGER;
diff --git a/migrations/frontend/1686042710_add_assigned_teams_table/down.sql b/migrations/frontend/1686042710_add_assigned_teams_table/down.sql
new file mode 100644
index 0000000000..5345ea08f5
--- /dev/null
+++ b/migrations/frontend/1686042710_add_assigned_teams_table/down.sql
@@ -0,0 +1 @@
+DROP TABLE IF EXISTS assigned_teams
diff --git a/migrations/frontend/1686042710_add_assigned_teams_table/metadata.yaml b/migrations/frontend/1686042710_add_assigned_teams_table/metadata.yaml
new file mode 100644
index 0000000000..fb82292a6f
--- /dev/null
+++ b/migrations/frontend/1686042710_add_assigned_teams_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: add assigned_teams table
+parents: [1685695443, 1685697346, 1685712730, 1684858266]
diff --git a/migrations/frontend/1686042710_add_assigned_teams_table/up.sql b/migrations/frontend/1686042710_add_assigned_teams_table/up.sql
new file mode 100644
index 0000000000..0ff80cc80a
--- /dev/null
+++ b/migrations/frontend/1686042710_add_assigned_teams_table/up.sql
@@ -0,0 +1,15 @@
+CREATE TABLE IF NOT EXISTS assigned_teams
+(
+    id                   SERIAL PRIMARY KEY,
+    owner_team_id        INTEGER   NOT NULL REFERENCES teams (id) ON DELETE CASCADE DEFERRABLE,
+    file_path_id         INTEGER   NOT NULL REFERENCES repo_paths (id),
+    who_assigned_team_id INTEGER   NULL REFERENCES users (id) ON DELETE SET NULL DEFERRABLE,
+    assigned_at          TIMESTAMP NOT NULL DEFAULT NOW()
+);
+
+CREATE UNIQUE INDEX IF NOT EXISTS assigned_teams_file_path_owner
+    ON assigned_teams
+        USING btree (file_path_id, owner_team_id);
+
+COMMENT ON TABLE assigned_teams
+    IS 'Table for team ownership assignments, one entry contains an assigned team ID, which repo_path is assigned and the date and user who assigned the owner team.';
diff --git a/migrations/frontend/1686169273_add_verification_to_changesets/down.sql b/migrations/frontend/1686169273_add_verification_to_changesets/down.sql
new file mode 100644
index 0000000000..547eaf2db9
--- /dev/null
+++ b/migrations/frontend/1686169273_add_verification_to_changesets/down.sql
@@ -0,0 +1,66 @@
+BEGIN;
+
+-- Note that we have to regenerate the reconciler_changesets view, as the SELECT
+-- statement in the view definition isn't refreshed when the fields change within the
+-- changesets table.
+DROP VIEW IF EXISTS
+    reconciler_changesets;
+
+ALTER TABLE changesets
+    DROP COLUMN IF EXISTS commit_verification;
+
+
+CREATE VIEW reconciler_changesets AS
+SELECT c.id,
+    c.batch_change_ids,
+    c.repo_id,
+    c.queued_at,
+    c.created_at,
+    c.updated_at,
+    c.metadata,
+    c.external_id,
+    c.external_service_type,
+    c.external_deleted_at,
+    c.external_branch,
+    c.external_updated_at,
+    c.external_state,
+    c.external_review_state,
+    c.external_check_state,
+    c.diff_stat_added,
+    c.diff_stat_deleted,
+    c.sync_state,
+    c.current_spec_id,
+    c.previous_spec_id,
+    c.publication_state,
+    c.owned_by_batch_change_id,
+    c.reconciler_state,
+    c.computed_state,
+    c.failure_message,
+    c.started_at,
+    c.finished_at,
+    c.process_after,
+    c.num_resets,
+    c.closing,
+    c.num_failures,
+    c.log_contents,
+    c.execution_logs,
+    c.syncer_error,
+    c.external_title,
+    c.worker_hostname,
+    c.ui_publication_state,
+    c.last_heartbeat_at,
+    c.external_fork_name,
+    c.external_fork_namespace,
+    c.detached_at,
+    c.previous_failure_message
+FROM changesets c
+JOIN repo r ON r.id = c.repo_id
+WHERE r.deleted_at IS NULL AND EXISTS (
+    SELECT 1
+    FROM batch_changes
+        LEFT JOIN users namespace_user ON batch_changes.namespace_user_id = namespace_user.id
+        LEFT JOIN orgs namespace_org ON batch_changes.namespace_org_id = namespace_org.id
+    WHERE c.batch_change_ids ? batch_changes.id::text AND namespace_user.deleted_at IS NULL AND namespace_org.deleted_at IS NULL
+    );
+
+COMMIT;
diff --git a/migrations/frontend/1686169273_add_verification_to_changesets/metadata.yaml b/migrations/frontend/1686169273_add_verification_to_changesets/metadata.yaml
new file mode 100644
index 0000000000..652b4bef74
--- /dev/null
+++ b/migrations/frontend/1686169273_add_verification_to_changesets/metadata.yaml
@@ -0,0 +1,2 @@
+name: add_verification_to_changesets
+parents: [1684207923, 1685453088, 1685727930, 1685645480, 1685984018, 1685999719, 1686042710]
diff --git a/migrations/frontend/1686169273_add_verification_to_changesets/up.sql b/migrations/frontend/1686169273_add_verification_to_changesets/up.sql
new file mode 100644
index 0000000000..01fcf14e11
--- /dev/null
+++ b/migrations/frontend/1686169273_add_verification_to_changesets/up.sql
@@ -0,0 +1,66 @@
+BEGIN;
+
+-- Note that we have to regenerate the reconciler_changesets view, as the SELECT
+-- statement in the view definition isn't refreshed when the fields change within the
+-- changesets table.
+DROP VIEW IF EXISTS
+    reconciler_changesets;
+
+ALTER TABLE changesets
+    ADD COLUMN IF NOT EXISTS commit_verification jsonb DEFAULT '{}'::jsonb NOT NULL;
+
+CREATE VIEW reconciler_changesets AS
+SELECT c.id,
+    c.batch_change_ids,
+    c.repo_id,
+    c.queued_at,
+    c.created_at,
+    c.updated_at,
+    c.metadata,
+    c.external_id,
+    c.external_service_type,
+    c.external_deleted_at,
+    c.external_branch,
+    c.external_updated_at,
+    c.external_state,
+    c.external_review_state,
+    c.external_check_state,
+    c.commit_verification,
+    c.diff_stat_added,
+    c.diff_stat_deleted,
+    c.sync_state,
+    c.current_spec_id,
+    c.previous_spec_id,
+    c.publication_state,
+    c.owned_by_batch_change_id,
+    c.reconciler_state,
+    c.computed_state,
+    c.failure_message,
+    c.started_at,
+    c.finished_at,
+    c.process_after,
+    c.num_resets,
+    c.closing,
+    c.num_failures,
+    c.log_contents,
+    c.execution_logs,
+    c.syncer_error,
+    c.external_title,
+    c.worker_hostname,
+    c.ui_publication_state,
+    c.last_heartbeat_at,
+    c.external_fork_name,
+    c.external_fork_namespace,
+    c.detached_at,
+    c.previous_failure_message
+FROM changesets c
+JOIN repo r ON r.id = c.repo_id
+WHERE r.deleted_at IS NULL AND EXISTS (
+    SELECT 1
+    FROM batch_changes
+        LEFT JOIN users namespace_user ON batch_changes.namespace_user_id = namespace_user.id
+        LEFT JOIN orgs namespace_org ON batch_changes.namespace_org_id = namespace_org.id
+    WHERE c.batch_change_ids ? batch_changes.id::text AND namespace_user.deleted_at IS NULL AND namespace_org.deleted_at IS NULL
+    );
+
+COMMIT;
diff --git a/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/down.sql b/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/down.sql
new file mode 100644
index 0000000000..c1961a53c6
--- /dev/null
+++ b/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/down.sql
@@ -0,0 +1,3 @@
+-- Undo the changes made in the up migration
+
+DROP TABLE IF EXISTS repo_embedding_job_stats;
diff --git a/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/metadata.yaml b/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/metadata.yaml
new file mode 100644
index 0000000000..26af88b731
--- /dev/null
+++ b/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/metadata.yaml
@@ -0,0 +1,2 @@
+name: add stats to embeddings jobs
+parents: [1684207923, 1685727930, 1685984018, 1685999719, 1686042710]
diff --git a/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/up.sql b/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/up.sql
new file mode 100644
index 0000000000..950a7f8349
--- /dev/null
+++ b/migrations/frontend/1686169626_add_stats_to_embeddings_jobs/up.sql
@@ -0,0 +1,14 @@
+CREATE TABLE IF NOT EXISTS repo_embedding_job_stats (
+    job_id INTEGER PRIMARY KEY REFERENCES repo_embedding_jobs(id) ON DELETE CASCADE DEFERRABLE,
+    is_incremental BOOLEAN NOT NULL DEFAULT FALSE,
+    code_files_total INTEGER NOT NULL DEFAULT 0,
+    code_files_embedded INTEGER NOT NULL DEFAULT 0,
+    code_chunks_embedded INTEGER NOT NULL DEFAULT 0,
+    code_files_skipped JSONB NOT NULL DEFAULT '{}',
+    code_bytes_embedded INTEGER NOT NULL DEFAULT 0,
+    text_files_total INTEGER NOT NULL DEFAULT 0,
+    text_files_embedded INTEGER NOT NULL DEFAULT 0,
+    text_chunks_embedded INTEGER NOT NULL DEFAULT 0,
+    text_files_skipped JSONB NOT NULL DEFAULT '{}',
+    text_bytes_embedded INTEGER NOT NULL DEFAULT 0
+);
diff --git a/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/down.sql b/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/down.sql
new file mode 100644
index 0000000000..c54a6ad80d
--- /dev/null
+++ b/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/down.sql
@@ -0,0 +1,2 @@
+ALTER TABLE IF EXISTS product_licenses 
+    DROP COLUMN IF EXISTS revoke_reason;
diff --git a/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/metadata.yaml b/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/metadata.yaml
new file mode 100644
index 0000000000..74a75acd84
--- /dev/null
+++ b/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/metadata.yaml
@@ -0,0 +1,2 @@
+name: add revoke reason to product_licenses table
+parents: [1684207923, 1685727930, 1685984018, 1685999719, 1686042710]
diff --git a/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/up.sql b/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/up.sql
new file mode 100644
index 0000000000..850dc192e2
--- /dev/null
+++ b/migrations/frontend/1686208766_add_revoke_reason_to_product_licenses_table/up.sql
@@ -0,0 +1,2 @@
+ALTER TABLE IF EXISTS product_licenses 
+    ADD COLUMN IF NOT EXISTS revoke_reason TEXT;
diff --git a/migrations/frontend/1686255261_add_own_analytics_setting_again/down.sql b/migrations/frontend/1686255261_add_own_analytics_setting_again/down.sql
new file mode 100644
index 0000000000..a47a4a296f
--- /dev/null
+++ b/migrations/frontend/1686255261_add_own_analytics_setting_again/down.sql
@@ -0,0 +1,2 @@
+DELETE FROM own_signal_configurations
+WHERE name = 'analytics';
\ No newline at end of file
diff --git a/migrations/frontend/1686255261_add_own_analytics_setting_again/metadata.yaml b/migrations/frontend/1686255261_add_own_analytics_setting_again/metadata.yaml
new file mode 100644
index 0000000000..d82ac0a7e4
--- /dev/null
+++ b/migrations/frontend/1686255261_add_own_analytics_setting_again/metadata.yaml
@@ -0,0 +1,2 @@
+name: add_own_analytics_setting_again
+parents: [1686208766]
diff --git a/migrations/frontend/1686255261_add_own_analytics_setting_again/up.sql b/migrations/frontend/1686255261_add_own_analytics_setting_again/up.sql
new file mode 100644
index 0000000000..99080ba1a0
--- /dev/null
+++ b/migrations/frontend/1686255261_add_own_analytics_setting_again/up.sql
@@ -0,0 +1,20 @@
+-- This setting was already added in 1685712730. We need to do it again here.
+-- The reason is that own_signal_configurations has id with SERIAL type,
+-- and the migration adding analytics setting, inserted just the row values
+-- hoping ID would be autogenerated.
+-- However two rows inserted previously to this table had hardcoded IDs
+-- so they did not advance the ID sequence. Therefore the insert in 1685712730
+-- generated one of the ID that were hardcoded (since these were 1 and 2),
+-- this generated a conflict, and INSERT failed silently due to ON CONFLICT clause.
+-- Reinsert in order to advance the sequence.
+INSERT INTO own_signal_configurations (name, enabled, description)
+VALUES (
+        'analytics',
+        FALSE,
+        'Indexes ownership data to present in aggregated views like Admin > Analytics > Own and Repo > Ownership'
+    ),
+    (
+        'analytics',
+        FALSE,
+        'Indexes ownership data to present in aggregated views like Admin > Analytics > Own and Repo > Ownership'
+    ) ON CONFLICT DO NOTHING;
\ No newline at end of file
diff --git a/migrations/frontend/1686282228_add_installation_metadata/down.sql b/migrations/frontend/1686282228_add_installation_metadata/down.sql
new file mode 100644
index 0000000000..ab29bc45c1
--- /dev/null
+++ b/migrations/frontend/1686282228_add_installation_metadata/down.sql
@@ -0,0 +1,9 @@
+DROP INDEX IF EXISTS github_app_installs_account_login;
+
+ALTER TABLE IF EXISTS github_app_installs
+    DROP COLUMN IF EXISTS url,
+    DROP COLUMN IF EXISTS account_login,
+    DROP COLUMN IF EXISTS account_avatar_url,
+    DROP COLUMN IF EXISTS account_url,
+    DROP COLUMN IF EXISTS account_type,
+    DROP COLUMN IF EXISTS updated_at;
diff --git a/migrations/frontend/1686282228_add_installation_metadata/metadata.yaml b/migrations/frontend/1686282228_add_installation_metadata/metadata.yaml
new file mode 100644
index 0000000000..2c4599cb9b
--- /dev/null
+++ b/migrations/frontend/1686282228_add_installation_metadata/metadata.yaml
@@ -0,0 +1,2 @@
+name: add installation metadata
+parents: [1685453088, 1685645480, 1686208766]
diff --git a/migrations/frontend/1686282228_add_installation_metadata/up.sql b/migrations/frontend/1686282228_add_installation_metadata/up.sql
new file mode 100644
index 0000000000..35c60eab85
--- /dev/null
+++ b/migrations/frontend/1686282228_add_installation_metadata/up.sql
@@ -0,0 +1,9 @@
+ALTER TABLE IF EXISTS github_app_installs
+    ADD COLUMN IF NOT EXISTS url text,
+    ADD COLUMN IF NOT EXISTS account_login text,
+    ADD COLUMN IF NOT EXISTS account_avatar_url text,
+    ADD COLUMN IF NOT EXISTS account_url text,
+    ADD COLUMN IF NOT EXISTS account_type text,
+    ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
+
+CREATE INDEX IF NOT EXISTS github_app_installs_account_login ON github_app_installs (account_login);
diff --git a/migrations/frontend/1686287028_add_unique_github_app_install_constraint/down.sql b/migrations/frontend/1686287028_add_unique_github_app_install_constraint/down.sql
new file mode 100644
index 0000000000..b57742116b
--- /dev/null
+++ b/migrations/frontend/1686287028_add_unique_github_app_install_constraint/down.sql
@@ -0,0 +1 @@
+ALTER TABLE github_app_installs DROP CONSTRAINT IF EXISTS unique_app_install;
diff --git a/migrations/frontend/1686287028_add_unique_github_app_install_constraint/metadata.yaml b/migrations/frontend/1686287028_add_unique_github_app_install_constraint/metadata.yaml
new file mode 100644
index 0000000000..14f426977d
--- /dev/null
+++ b/migrations/frontend/1686287028_add_unique_github_app_install_constraint/metadata.yaml
@@ -0,0 +1,2 @@
+name: add unique github app install constraint
+parents: [1686282228]
diff --git a/migrations/frontend/1686287028_add_unique_github_app_install_constraint/up.sql b/migrations/frontend/1686287028_add_unique_github_app_install_constraint/up.sql
new file mode 100644
index 0000000000..57c298c3df
--- /dev/null
+++ b/migrations/frontend/1686287028_add_unique_github_app_install_constraint/up.sql
@@ -0,0 +1,4 @@
+ALTER TABLE github_app_installs
+    DROP CONSTRAINT IF EXISTS unique_app_install;
+
+ALTER TABLE github_app_installs ADD CONSTRAINT unique_app_install UNIQUE (app_id, installation_id);
diff --git a/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/down.sql b/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/down.sql
new file mode 100644
index 0000000000..edbbcaa2cd
--- /dev/null
+++ b/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/down.sql
@@ -0,0 +1,4 @@
+ALTER TABLE product_subscriptions
+ALTER COLUMN cody_gateway_chat_rate_limit TYPE integer,
+    ALTER COLUMN cody_gateway_code_rate_limit TYPE integer,
+    ALTER COLUMN cody_gateway_embeddings_api_rate_limit TYPE integer;
diff --git a/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/metadata.yaml b/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/metadata.yaml
new file mode 100644
index 0000000000..4297db96bd
--- /dev/null
+++ b/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/metadata.yaml
@@ -0,0 +1,2 @@
+name: change product_subscriptions cody_gateway limits to int64
+parents: [1686255261]
diff --git a/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/up.sql b/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/up.sql
new file mode 100644
index 0000000000..f09ffe7157
--- /dev/null
+++ b/migrations/frontend/1686415661_change_product_subscriptions_cody_gateway_limits_to_int64/up.sql
@@ -0,0 +1,4 @@
+ALTER TABLE product_subscriptions
+    ALTER COLUMN cody_gateway_chat_rate_limit TYPE bigint,
+    ALTER COLUMN cody_gateway_code_rate_limit TYPE bigint,
+    ALTER COLUMN cody_gateway_embeddings_api_rate_limit TYPE bigint;
diff --git a/migrations/frontend/1686580819_store_symbols_as_bytes/down.sql b/migrations/frontend/1686580819_store_symbols_as_bytes/down.sql
new file mode 100644
index 0000000000..23a90f0b47
--- /dev/null
+++ b/migrations/frontend/1686580819_store_symbols_as_bytes/down.sql
@@ -0,0 +1,7 @@
+-- Drop new objects
+DROP INDEX IF EXISTS codeintel_ranking_definitions_graph_key_symbol_checksum_search;
+ALTER TABLE codeintel_ranking_references DROP COLUMN IF EXISTS symbol_checksums;
+ALTER TABLE codeintel_ranking_definitions DROP COLUMN IF EXISTS symbol_checksum;
+
+-- Recreate old index
+CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_graph_key_symbol_search ON codeintel_ranking_definitions(graph_key, symbol_name, exported_upload_id, document_path);
diff --git a/migrations/frontend/1686580819_store_symbols_as_bytes/metadata.yaml b/migrations/frontend/1686580819_store_symbols_as_bytes/metadata.yaml
new file mode 100644
index 0000000000..e6a2337348
--- /dev/null
+++ b/migrations/frontend/1686580819_store_symbols_as_bytes/metadata.yaml
@@ -0,0 +1,2 @@
+name: Store symbols as bytes
+parents: [1686255261]
diff --git a/migrations/frontend/1686580819_store_symbols_as_bytes/up.sql b/migrations/frontend/1686580819_store_symbols_as_bytes/up.sql
new file mode 100644
index 0000000000..acddc548ab
--- /dev/null
+++ b/migrations/frontend/1686580819_store_symbols_as_bytes/up.sql
@@ -0,0 +1,7 @@
+-- Drop reliance on symbol names
+DROP INDEX IF EXISTS codeintel_ranking_definitions_graph_key_symbol_search;
+
+-- Add symbol checksums columns
+ALTER TABLE codeintel_ranking_references ADD COLUMN IF NOT EXISTS symbol_checksums bytea[] NOT NULL DEFAULT '{}';
+ALTER TABLE codeintel_ranking_definitions ADD COLUMN IF NOT EXISTS symbol_checksum bytea NOT NULL DEFAULT ''::bytea;
+CREATE INDEX IF NOT EXISTS codeintel_ranking_definitions_graph_key_symbol_checksum_search ON codeintel_ranking_definitions(graph_key, symbol_checksum, exported_upload_id, document_path);
diff --git a/migrations/frontend/1686723014_own_analytics_assigned_ownership/down.sql b/migrations/frontend/1686723014_own_analytics_assigned_ownership/down.sql
new file mode 100644
index 0000000000..8a4452c845
--- /dev/null
+++ b/migrations/frontend/1686723014_own_analytics_assigned_ownership/down.sql
@@ -0,0 +1,2 @@
+ALTER TABLE IF EXISTS ownership_path_stats DROP COLUMN IF EXISTS tree_assigned_ownership_files_count,
+    DROP COLUMN IF EXISTS tree_any_ownership_files_count;
\ No newline at end of file
diff --git a/migrations/frontend/1686723014_own_analytics_assigned_ownership/metadata.yaml b/migrations/frontend/1686723014_own_analytics_assigned_ownership/metadata.yaml
new file mode 100644
index 0000000000..250dc3d5b9
--- /dev/null
+++ b/migrations/frontend/1686723014_own_analytics_assigned_ownership/metadata.yaml
@@ -0,0 +1,2 @@
+name: own_analytics_assigned_ownership
+parents: [1686169626, 1686580819]
diff --git a/migrations/frontend/1686723014_own_analytics_assigned_ownership/up.sql b/migrations/frontend/1686723014_own_analytics_assigned_ownership/up.sql
new file mode 100644
index 0000000000..8246152ab7
--- /dev/null
+++ b/migrations/frontend/1686723014_own_analytics_assigned_ownership/up.sql
@@ -0,0 +1,3 @@
+ALTER TABLE IF EXISTS ownership_path_stats
+ADD COLUMN IF NOT EXISTS tree_assigned_ownership_files_count INTEGER NULL,
+    ADD COLUMN IF NOT EXISTS tree_any_ownership_files_count INTEGER NULL;
\ No newline at end of file
diff --git a/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/down.sql b/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/down.sql
new file mode 100644
index 0000000000..43c6d4a58a
--- /dev/null
+++ b/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/down.sql
@@ -0,0 +1 @@
+ALTER TABLE zoekt_repos DROP COLUMN IF EXISTS last_indexed_at;
diff --git a/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/metadata.yaml b/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/metadata.yaml
new file mode 100644
index 0000000000..67ebe02b7f
--- /dev/null
+++ b/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/metadata.yaml
@@ -0,0 +1,2 @@
+name: Add last_indexed_at to zoekt_repos.
+parents: [1686723014]
diff --git a/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/up.sql b/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/up.sql
new file mode 100644
index 0000000000..e3033b642a
--- /dev/null
+++ b/migrations/frontend/1686749117_add_last_indexed_at_to_zoekt_repos/up.sql
@@ -0,0 +1 @@
+ALTER TABLE zoekt_repos ADD COLUMN IF NOT EXISTS last_indexed_at TIMESTAMP WITH TIME ZONE;
diff --git a/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/down.sql b/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/down.sql
new file mode 100644
index 0000000000..8ae353e9b5
--- /dev/null
+++ b/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/down.sql
@@ -0,0 +1 @@
+-- There's not really a way to rollback safely, so this is a noop
\ No newline at end of file
diff --git a/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/metadata.yaml b/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/metadata.yaml
new file mode 100644
index 0000000000..8e10d23eef
--- /dev/null
+++ b/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/metadata.yaml
@@ -0,0 +1,2 @@
+name: generate license token for existing v1 product licenses
+parents: [1683593618, 1686169273, 1686415661, 1686749117, 1686287028, 1680296731]
diff --git a/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/up.sql b/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/up.sql
new file mode 100644
index 0000000000..8f3b2457b4
--- /dev/null
+++ b/migrations/frontend/1687792857_generate_license_token_for_existing_v1_product_licenses/up.sql
@@ -0,0 +1,18 @@
+UPDATE product_licenses
+SET license_check_token = sha256(sha256(license_key :: bytea))
+WHERE
+    -- update v1 licenses where token is NULL
+    ((
+        -- only update v1 licenses
+        license_version = 1 -- only update records that don't already have a license check token
+        AND license_check_token IS NULL
+    )
+    -- update v2 licenses where token does not match expectation
+    OR (
+        license_version = 2
+        AND license_check_token != sha256(sha256(license_key :: bytea))
+    ))
+    -- only update non-expired
+    AND license_expires_at > now()
+    -- only update non-revoked
+    AND revoked_at IS NULL;
diff --git a/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/down.sql b/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/down.sql
new file mode 100644
index 0000000000..84f58dcb12
--- /dev/null
+++ b/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/down.sql
@@ -0,0 +1,3 @@
+ALTER TABLE repo_embedding_job_stats
+    DROP COLUMN IF EXISTS code_chunks_excluded,
+    DROP COLUMN IF EXISTS text_chunks_excluded;
diff --git a/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/metadata.yaml b/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/metadata.yaml
new file mode 100644
index 0000000000..a7e9596fae
--- /dev/null
+++ b/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/metadata.yaml
@@ -0,0 +1,2 @@
+name: add_chunks_excluded_embeddings_stats
+parents: [1687792857]
diff --git a/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/up.sql b/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/up.sql
new file mode 100644
index 0000000000..3b19de4aa5
--- /dev/null
+++ b/migrations/frontend/1690323910_add_chunks_excluded_embeddings_stats/up.sql
@@ -0,0 +1,3 @@
+ALTER TABLE repo_embedding_job_stats
+    ADD COLUMN IF NOT EXISTS code_chunks_excluded INTEGER NOT NULL DEFAULT 0,
+    ADD COLUMN IF NOT EXISTS text_chunks_excluded INTEGER NOT NULL DEFAULT 0;
diff --git a/migrations/frontend/1691043630_event_logs_indexing/down.sql b/migrations/frontend/1691043630_event_logs_indexing/down.sql
new file mode 100644
index 0000000000..d8e182d397
--- /dev/null
+++ b/migrations/frontend/1691043630_event_logs_indexing/down.sql
@@ -0,0 +1,11 @@
+DROP INDEX IF EXISTS event_logs_name_is_cody_explanation_event;
+
+DROP INDEX IF EXISTS event_logs_name_is_cody_generation_event;
+
+DROP INDEX IF EXISTS event_logs_name_is_cody_active_event;
+
+DROP FUNCTION IF EXISTS isCodyGenerationEvent(name text);
+
+DROP FUNCTION IF EXISTS isCodyExplanationEvent(name text);
+
+DROP FUNCTION IF EXISTS isCodyActiveEvent(name text);
diff --git a/migrations/frontend/1691043630_event_logs_indexing/metadata.yaml b/migrations/frontend/1691043630_event_logs_indexing/metadata.yaml
new file mode 100644
index 0000000000..8a21a324cb
--- /dev/null
+++ b/migrations/frontend/1691043630_event_logs_indexing/metadata.yaml
@@ -0,0 +1,2 @@
+name: event_logs_indexing
+parents: [1690323910]
diff --git a/migrations/frontend/1691043630_event_logs_indexing/up.sql b/migrations/frontend/1691043630_event_logs_indexing/up.sql
new file mode 100644
index 0000000000..40382eb495
--- /dev/null
+++ b/migrations/frontend/1691043630_event_logs_indexing/up.sql
@@ -0,0 +1,65 @@
+CREATE OR REPLACE FUNCTION iscodyactiveevent(name text) RETURNS boolean
+    LANGUAGE plpgsql IMMUTABLE
+    AS $$
+BEGIN
+  RETURN
+    (name LIKE '%%cody%%' OR name LIKE '%%Cody%%')
+    AND name NOT IN (
+        '%completion:started%',
+        '%completion:suggested%',
+        '%cta%',
+        '%Cta%',
+        'CodyVSCodeExtension:CodySavedLogin:executed',
+        'web:codyChat:tryOnPublicCode',
+        'web:codyEditorWidget:viewed',
+        'web:codyChat:pageViewed',
+        'CodyConfigurationPageViewed',
+        'ClickedOnTryCodySearchCTA',
+        'TryCodyWebOnboardingDisplayed',
+        'AboutGetCodyPopover',
+        'TryCodyWeb',
+        'CodySurveyToastViewed',
+        'SiteAdminCodyPageViewed',
+        'CodyUninstalled',
+        'SpeakToACodyEngineerCTA'
+    );
+END;
+$$;
+
+CREATE OR REPLACE FUNCTION iscodyexplanationevent(name text) RETURNS boolean
+    LANGUAGE plpgsql IMMUTABLE
+    AS $$
+BEGIN
+  RETURN name = ANY(ARRAY[
+    'CodyVSCodeExtension:recipe:explain-code-high-level:executed',
+    'CodyVSCodeExtension:recipe:explain-code-detailed:executed',
+    'CodyVSCodeExtension:recipe:find-code-smells:executed',
+    'CodyVSCodeExtension:recipe:git-history:executed',
+    'CodyVSCodeExtension:recipe:rate-code:executed'
+  ]);
+END;
+$$;
+
+CREATE OR REPLACE FUNCTION iscodygenerationevent(name text) RETURNS boolean
+    LANGUAGE plpgsql IMMUTABLE
+    AS $$
+BEGIN
+  RETURN name = ANY(ARRAY[
+    'CodyVSCodeExtension:recipe:rewrite-to-functional:executed',
+    'CodyVSCodeExtension:recipe:improve-variable-names:executed',
+    'CodyVSCodeExtension:recipe:replace:executed',
+    'CodyVSCodeExtension:recipe:generate-docstring:executed',
+    'CodyVSCodeExtension:recipe:generate-unit-test:executed',
+    'CodyVSCodeExtension:recipe:rewrite-functional:executed',
+    'CodyVSCodeExtension:recipe:code-refactor:executed',
+    'CodyVSCodeExtension:recipe:fixup:executed',
+	'CodyVSCodeExtension:recipe:translate-to-language:executed'
+  ]);
+END;
+$$;
+
+CREATE INDEX IF NOT EXISTS event_logs_name_is_cody_explanation_event ON event_logs USING btree (iscodyexplanationevent(name));
+
+CREATE INDEX IF NOT EXISTS event_logs_name_is_cody_generation_event ON event_logs USING btree (iscodygenerationevent(name));
+
+CREATE INDEX IF NOT EXISTS event_logs_name_is_cody_active_event ON event_logs USING btree (iscodyactiveevent(name));
diff --git a/migrations/frontend/squashed.sql b/migrations/frontend/squashed.sql
index e3a26e3a60..c2831a89e9 100755
--- a/migrations/frontend/squashed.sql
+++ b/migrations/frontend/squashed.sql
@@ -451,6 +451,66 @@ CREATE FUNCTION invalidate_session_for_userid_on_password_change() RETURNS trigg
     END;
 $$;
 
+CREATE FUNCTION iscodyactiveevent(name text) RETURNS boolean
+    LANGUAGE plpgsql IMMUTABLE
+    AS $$
+BEGIN
+  RETURN
+    (name LIKE '%%cody%%' OR name LIKE '%%Cody%%')
+    AND name NOT IN (
+        '%completion:started%',
+        '%completion:suggested%',
+        '%cta%',
+        '%Cta%',
+        'CodyVSCodeExtension:CodySavedLogin:executed',
+        'web:codyChat:tryOnPublicCode',
+        'web:codyEditorWidget:viewed',
+        'web:codyChat:pageViewed',
+        'CodyConfigurationPageViewed',
+        'ClickedOnTryCodySearchCTA',
+        'TryCodyWebOnboardingDisplayed',
+        'AboutGetCodyPopover',
+        'TryCodyWeb',
+        'CodySurveyToastViewed',
+        'SiteAdminCodyPageViewed',
+        'CodyUninstalled',
+        'SpeakToACodyEngineerCTA'
+    );
+END;
+$$;
+
+CREATE FUNCTION iscodyexplanationevent(name text) RETURNS boolean
+    LANGUAGE plpgsql IMMUTABLE
+    AS $$
+BEGIN
+  RETURN name = ANY(ARRAY[
+    'CodyVSCodeExtension:recipe:explain-code-high-level:executed',
+    'CodyVSCodeExtension:recipe:explain-code-detailed:executed',
+    'CodyVSCodeExtension:recipe:find-code-smells:executed',
+    'CodyVSCodeExtension:recipe:git-history:executed',
+    'CodyVSCodeExtension:recipe:rate-code:executed'
+  ]);
+END;
+$$;
+
+CREATE FUNCTION iscodygenerationevent(name text) RETURNS boolean
+    LANGUAGE plpgsql IMMUTABLE
+    AS $$
+BEGIN
+  RETURN name = ANY(ARRAY[
+    'CodyVSCodeExtension:recipe:rewrite-to-functional:executed',
+    'CodyVSCodeExtension:recipe:improve-variable-names:executed',
+    'CodyVSCodeExtension:recipe:replace:executed',
+    'CodyVSCodeExtension:recipe:generate-docstring:executed',
+    'CodyVSCodeExtension:recipe:generate-unit-test:executed',
+    'CodyVSCodeExtension:recipe:rewrite-functional:executed',
+    'CodyVSCodeExtension:recipe:code-refactor:executed',
+    'CodyVSCodeExtension:recipe:fixup:executed',
+	'CodyVSCodeExtension:recipe:translate-to-language:executed'
+  ]);
+END;
+$$;
+
 CREATE FUNCTION merge_audit_log_transitions(internal hstore, arrayhstore hstore[]) RETURNS hstore
     LANGUAGE plpgsql IMMUTABLE
     AS $$
@@ -780,10 +840,14 @@ END;
 $$;
 
 CREATE FUNCTION soft_deleted_repository_name(name text) RETURNS text
-    LANGUAGE plpgsql STRICT
+    LANGUAGE plpgsql
     AS $$
 BEGIN
-    RETURN 'DELETED-' || extract(epoch from transaction_timestamp()) || '-' || name;
+    IF name LIKE 'DELETED-%' THEN
+        RETURN name;
+    ELSE
+        RETURN 'DELETED-' || extract(epoch from transaction_timestamp()) || '-' || name;
+    END IF;
 END;
 $$;
 
@@ -815,6 +879,46 @@ CREATE FUNCTION update_codeintel_path_ranks_updated_at_column() RETURNS trigger
 END;
 $$;
 
+CREATE FUNCTION update_own_aggregate_recent_contribution() RETURNS trigger
+    LANGUAGE plpgsql
+    AS $$
+BEGIN
+    WITH RECURSIVE ancestors AS (
+        SELECT id, parent_id, 1 AS level
+        FROM repo_paths
+        WHERE id = NEW.changed_file_path_id
+        UNION ALL
+        SELECT p.id, p.parent_id, a.level + 1
+        FROM repo_paths p
+        JOIN ancestors a ON p.id = a.parent_id
+    )
+    UPDATE own_aggregate_recent_contribution
+    SET contributions_count = contributions_count + 1
+    WHERE commit_author_id = NEW.commit_author_id AND changed_file_path_id IN (
+        SELECT id FROM ancestors
+    );
+
+    WITH RECURSIVE ancestors AS (
+        SELECT id, parent_id, 1 AS level
+        FROM repo_paths
+        WHERE id = NEW.changed_file_path_id
+        UNION ALL
+        SELECT p.id, p.parent_id, a.level + 1
+        FROM repo_paths p
+        JOIN ancestors a ON p.id = a.parent_id
+    )
+    INSERT INTO own_aggregate_recent_contribution (commit_author_id, changed_file_path_id, contributions_count)
+    SELECT NEW.commit_author_id, id, 1
+    FROM ancestors
+    WHERE NOT EXISTS (
+        SELECT 1 FROM own_aggregate_recent_contribution
+        WHERE commit_author_id = NEW.commit_author_id AND changed_file_path_id = ancestors.id
+    );
+
+    RETURN NEW;
+END;
+$$;
+
 CREATE FUNCTION versions_insert_row_trigger() RETURNS trigger
     LANGUAGE plpgsql
     AS $$
@@ -880,6 +984,46 @@ CREATE TABLE aggregated_user_statistics (
     user_events_count bigint
 );
 
+CREATE TABLE assigned_owners (
+    id integer NOT NULL,
+    owner_user_id integer NOT NULL,
+    file_path_id integer NOT NULL,
+    who_assigned_user_id integer,
+    assigned_at timestamp without time zone DEFAULT now() NOT NULL
+);
+
+COMMENT ON TABLE assigned_owners IS 'Table for ownership assignments, one entry contains an assigned user ID, which repo_path is assigned and the date and user who assigned the owner.';
+
+CREATE SEQUENCE assigned_owners_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE assigned_owners_id_seq OWNED BY assigned_owners.id;
+
+CREATE TABLE assigned_teams (
+    id integer NOT NULL,
+    owner_team_id integer NOT NULL,
+    file_path_id integer NOT NULL,
+    who_assigned_team_id integer,
+    assigned_at timestamp without time zone DEFAULT now() NOT NULL
+);
+
+COMMENT ON TABLE assigned_teams IS 'Table for team ownership assignments, one entry contains an assigned team ID, which repo_path is assigned and the date and user who assigned the owner team.';
+
+CREATE SEQUENCE assigned_teams_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE assigned_teams_id_seq OWNED BY assigned_teams.id;
+
 CREATE TABLE batch_changes (
     id bigint NOT NULL,
     name text NOT NULL,
@@ -1196,6 +1340,7 @@ CREATE TABLE changesets (
     computed_state text NOT NULL,
     external_fork_name citext,
     previous_failure_message text,
+    commit_verification jsonb DEFAULT '{}'::jsonb NOT NULL,
     CONSTRAINT changesets_batch_change_ids_check CHECK ((jsonb_typeof(batch_change_ids) = 'object'::text)),
     CONSTRAINT changesets_external_id_check CHECK ((external_id <> ''::text)),
     CONSTRAINT changesets_external_service_type_not_blank CHECK ((external_service_type <> ''::text)),
@@ -1585,6 +1730,23 @@ CREATE SEQUENCE codeintel_autoindex_queue_id_seq
 
 ALTER SEQUENCE codeintel_autoindex_queue_id_seq OWNED BY codeintel_autoindex_queue.id;
 
+CREATE TABLE codeintel_autoindexing_exceptions (
+    id integer NOT NULL,
+    repository_id integer NOT NULL,
+    disable_scheduling boolean DEFAULT false NOT NULL,
+    disable_inference boolean DEFAULT false NOT NULL
+);
+
+CREATE SEQUENCE codeintel_autoindexing_exceptions_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE codeintel_autoindexing_exceptions_id_seq OWNED BY codeintel_autoindexing_exceptions.id;
+
 CREATE TABLE codeintel_commit_dates (
     repository_id integer NOT NULL,
     commit_bytea bytea NOT NULL,
@@ -1599,6 +1761,80 @@ COMMENT ON COLUMN codeintel_commit_dates.commit_bytea IS 'Identifies the 40-char
 
 COMMENT ON COLUMN codeintel_commit_dates.committed_at IS 'The commit date (may be -infinity if unresolvable).';
 
+CREATE TABLE lsif_configuration_policies (
+    id integer NOT NULL,
+    repository_id integer,
+    name text,
+    type text NOT NULL,
+    pattern text NOT NULL,
+    retention_enabled boolean NOT NULL,
+    retention_duration_hours integer,
+    retain_intermediate_commits boolean NOT NULL,
+    indexing_enabled boolean NOT NULL,
+    index_commit_max_age_hours integer,
+    index_intermediate_commits boolean NOT NULL,
+    protected boolean DEFAULT false NOT NULL,
+    repository_patterns text[],
+    last_resolved_at timestamp with time zone,
+    embeddings_enabled boolean DEFAULT false NOT NULL
+);
+
+COMMENT ON COLUMN lsif_configuration_policies.repository_id IS 'The identifier of the repository to which this configuration policy applies. If absent, this policy is applied globally.';
+
+COMMENT ON COLUMN lsif_configuration_policies.type IS 'The type of Git object (e.g., COMMIT, BRANCH, TAG).';
+
+COMMENT ON COLUMN lsif_configuration_policies.pattern IS 'A pattern used to match` names of the associated Git object type.';
+
+COMMENT ON COLUMN lsif_configuration_policies.retention_enabled IS 'Whether or not this configuration policy affects data retention rules.';
+
+COMMENT ON COLUMN lsif_configuration_policies.retention_duration_hours IS 'The max age of data retained by this configuration policy. If null, the age is unbounded.';
+
+COMMENT ON COLUMN lsif_configuration_policies.retain_intermediate_commits IS 'If the matching Git object is a branch, setting this value to true will also retain all data used to resolve queries for any commit on the matching branches. Setting this value to false will only consider the tip of the branch.';
+
+COMMENT ON COLUMN lsif_configuration_policies.indexing_enabled IS 'Whether or not this configuration policy affects auto-indexing schedules.';
+
+COMMENT ON COLUMN lsif_configuration_policies.index_commit_max_age_hours IS 'The max age of commits indexed by this configuration policy. If null, the age is unbounded.';
+
+COMMENT ON COLUMN lsif_configuration_policies.index_intermediate_commits IS 'If the matching Git object is a branch, setting this value to true will also index all commits on the matching branches. Setting this value to false will only consider the tip of the branch.';
+
+COMMENT ON COLUMN lsif_configuration_policies.protected IS 'Whether or not this configuration policy is protected from modification of its data retention behavior (except for duration).';
+
+COMMENT ON COLUMN lsif_configuration_policies.repository_patterns IS 'The name pattern matching repositories to which this configuration policy applies. If absent, all repositories are matched.';
+
+CREATE VIEW codeintel_configuration_policies AS
+ SELECT lsif_configuration_policies.id,
+    lsif_configuration_policies.repository_id,
+    lsif_configuration_policies.name,
+    lsif_configuration_policies.type,
+    lsif_configuration_policies.pattern,
+    lsif_configuration_policies.retention_enabled,
+    lsif_configuration_policies.retention_duration_hours,
+    lsif_configuration_policies.retain_intermediate_commits,
+    lsif_configuration_policies.indexing_enabled,
+    lsif_configuration_policies.index_commit_max_age_hours,
+    lsif_configuration_policies.index_intermediate_commits,
+    lsif_configuration_policies.protected,
+    lsif_configuration_policies.repository_patterns,
+    lsif_configuration_policies.last_resolved_at,
+    lsif_configuration_policies.embeddings_enabled
+   FROM lsif_configuration_policies;
+
+CREATE TABLE lsif_configuration_policies_repository_pattern_lookup (
+    policy_id integer NOT NULL,
+    repo_id integer NOT NULL
+);
+
+COMMENT ON TABLE lsif_configuration_policies_repository_pattern_lookup IS 'A lookup table to get all the repository patterns by repository id that apply to a configuration policy.';
+
+COMMENT ON COLUMN lsif_configuration_policies_repository_pattern_lookup.policy_id IS 'The policy identifier associated with the repository.';
+
+COMMENT ON COLUMN lsif_configuration_policies_repository_pattern_lookup.repo_id IS 'The repository identifier associated with the policy.';
+
+CREATE VIEW codeintel_configuration_policies_repository_pattern_lookup AS
+ SELECT lsif_configuration_policies_repository_pattern_lookup.policy_id,
+    lsif_configuration_policies_repository_pattern_lookup.repo_id
+   FROM lsif_configuration_policies_repository_pattern_lookup;
+
 CREATE TABLE codeintel_inference_scripts (
     insert_timestamp timestamp with time zone DEFAULT now() NOT NULL,
     script text NOT NULL
@@ -1608,10 +1844,10 @@ COMMENT ON TABLE codeintel_inference_scripts IS 'Contains auto-index job inferen
 
 CREATE TABLE codeintel_initial_path_ranks (
     id bigint NOT NULL,
-    upload_id integer NOT NULL,
-    document_path text NOT NULL,
+    document_path text DEFAULT ''::text NOT NULL,
     graph_key text NOT NULL,
-    last_scanned_at timestamp with time zone
+    document_paths text[] DEFAULT '{}'::text[] NOT NULL,
+    exported_upload_id integer NOT NULL
 );
 
 CREATE SEQUENCE codeintel_initial_path_ranks_id_seq
@@ -1658,7 +1894,7 @@ CREATE TABLE codeintel_path_ranks (
     repository_id integer NOT NULL,
     payload jsonb NOT NULL,
     updated_at timestamp with time zone DEFAULT now() NOT NULL,
-    graph_key text,
+    graph_key text NOT NULL,
     num_paths integer,
     refcount_logsum double precision,
     id bigint NOT NULL
@@ -1675,11 +1911,11 @@ ALTER SEQUENCE codeintel_path_ranks_id_seq OWNED BY codeintel_path_ranks.id;
 
 CREATE TABLE codeintel_ranking_definitions (
     id bigint NOT NULL,
-    upload_id integer NOT NULL,
     symbol_name text NOT NULL,
     document_path text NOT NULL,
     graph_key text NOT NULL,
-    last_scanned_at timestamp with time zone
+    exported_upload_id integer NOT NULL,
+    symbol_checksum bytea DEFAULT '\x'::bytea NOT NULL
 );
 
 CREATE SEQUENCE codeintel_ranking_definitions_id_seq
@@ -1696,7 +1932,9 @@ CREATE TABLE codeintel_ranking_exports (
     graph_key text NOT NULL,
     locked_at timestamp with time zone DEFAULT now() NOT NULL,
     id integer NOT NULL,
-    object_prefix text
+    last_scanned_at timestamp with time zone,
+    deleted_at timestamp with time zone,
+    upload_key text
 );
 
 CREATE SEQUENCE codeintel_ranking_exports_id_seq
@@ -1709,13 +1947,28 @@ CREATE SEQUENCE codeintel_ranking_exports_id_seq
 
 ALTER SEQUENCE codeintel_ranking_exports_id_seq OWNED BY codeintel_ranking_exports.id;
 
+CREATE TABLE codeintel_ranking_graph_keys (
+    id integer NOT NULL,
+    graph_key text NOT NULL,
+    created_at timestamp with time zone DEFAULT now()
+);
+
+CREATE SEQUENCE codeintel_ranking_graph_keys_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE codeintel_ranking_graph_keys_id_seq OWNED BY codeintel_ranking_graph_keys.id;
+
 CREATE TABLE codeintel_ranking_path_counts_inputs (
     id bigint NOT NULL,
-    document_path text NOT NULL,
     count integer NOT NULL,
     graph_key text NOT NULL,
     processed boolean DEFAULT false NOT NULL,
-    repository_id integer NOT NULL
+    definition_id bigint
 );
 
 CREATE SEQUENCE codeintel_ranking_path_counts_inputs_id_seq
@@ -1727,12 +1980,42 @@ CREATE SEQUENCE codeintel_ranking_path_counts_inputs_id_seq
 
 ALTER SEQUENCE codeintel_ranking_path_counts_inputs_id_seq OWNED BY codeintel_ranking_path_counts_inputs.id;
 
+CREATE TABLE codeintel_ranking_progress (
+    id bigint NOT NULL,
+    graph_key text NOT NULL,
+    mappers_started_at timestamp with time zone NOT NULL,
+    mapper_completed_at timestamp with time zone,
+    seed_mapper_completed_at timestamp with time zone,
+    reducer_started_at timestamp with time zone,
+    reducer_completed_at timestamp with time zone,
+    num_path_records_total integer,
+    num_reference_records_total integer,
+    num_count_records_total integer,
+    num_path_records_processed integer,
+    num_reference_records_processed integer,
+    num_count_records_processed integer,
+    max_export_id bigint NOT NULL,
+    reference_cursor_export_deleted_at timestamp with time zone,
+    reference_cursor_export_id integer,
+    path_cursor_deleted_export_at timestamp with time zone,
+    path_cursor_export_id integer
+);
+
+CREATE SEQUENCE codeintel_ranking_progress_id_seq
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE codeintel_ranking_progress_id_seq OWNED BY codeintel_ranking_progress.id;
+
 CREATE TABLE codeintel_ranking_references (
     id bigint NOT NULL,
-    upload_id integer NOT NULL,
     symbol_names text[] NOT NULL,
     graph_key text NOT NULL,
-    last_scanned_at timestamp with time zone
+    exported_upload_id integer NOT NULL,
+    symbol_checksums bytea[] DEFAULT '{}'::bytea[] NOT NULL
 );
 
 COMMENT ON TABLE codeintel_ranking_references IS 'References for a given upload proceduced by background job consuming SCIP indexes.';
@@ -1747,13 +2030,12 @@ CREATE SEQUENCE codeintel_ranking_references_id_seq
 ALTER SEQUENCE codeintel_ranking_references_id_seq OWNED BY codeintel_ranking_references.id;
 
 CREATE TABLE codeintel_ranking_references_processed (
-    id integer NOT NULL,
     graph_key text NOT NULL,
-    codeintel_ranking_reference_id integer NOT NULL
+    codeintel_ranking_reference_id integer NOT NULL,
+    id bigint NOT NULL
 );
 
 CREATE SEQUENCE codeintel_ranking_references_processed_id_seq
-    AS integer
     START WITH 1
     INCREMENT BY 1
     NO MINVALUE
@@ -1781,6 +2063,59 @@ CREATE SEQUENCE codeowners_id_seq
 
 ALTER SEQUENCE codeowners_id_seq OWNED BY codeowners.id;
 
+CREATE TABLE codeowners_individual_stats (
+    file_path_id integer NOT NULL,
+    owner_id integer NOT NULL,
+    tree_owned_files_count integer NOT NULL,
+    updated_at timestamp without time zone NOT NULL
+);
+
+COMMENT ON TABLE codeowners_individual_stats IS 'Data on how many files in given tree are owned by given owner.
+
+As opposed to ownership-general `ownership_path_stats` table, the individual <path x owner> stats
+are stored in CODEOWNERS-specific table `codeowners_individual_stats`. The reason for that is that
+we are also indexing on owner_id which is CODEOWNERS-specific.';
+
+COMMENT ON COLUMN codeowners_individual_stats.tree_owned_files_count IS 'Total owned file count by given owner at given file tree.';
+
+COMMENT ON COLUMN codeowners_individual_stats.updated_at IS 'When the last background job updating counts run.';
+
+CREATE TABLE codeowners_owners (
+    id integer NOT NULL,
+    reference text NOT NULL
+);
+
+COMMENT ON TABLE codeowners_owners IS 'Text reference in CODEOWNERS entry to use in codeowners_individual_stats. Reference is either email or handle without @ in front.';
+
+COMMENT ON COLUMN codeowners_owners.reference IS 'We just keep the reference as opposed to splitting it to handle or email
+since the distinction is not relevant for query, and this makes indexing way easier.';
+
+CREATE SEQUENCE codeowners_owners_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE codeowners_owners_id_seq OWNED BY codeowners_owners.id;
+
+CREATE TABLE commit_authors (
+    id integer NOT NULL,
+    email text NOT NULL,
+    name text NOT NULL
+);
+
+CREATE SEQUENCE commit_authors_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE commit_authors_id_seq OWNED BY commit_authors.id;
+
 CREATE TABLE configuration_policies_audit_logs (
     log_timestamp timestamp with time zone DEFAULT clock_timestamp(),
     record_deleted_at timestamp with time zone,
@@ -1997,10 +2332,30 @@ CREATE SEQUENCE event_logs_scrape_state_id_seq
 
 ALTER SEQUENCE event_logs_scrape_state_id_seq OWNED BY event_logs_scrape_state.id;
 
+CREATE TABLE event_logs_scrape_state_own (
+    id integer NOT NULL,
+    bookmark_id integer NOT NULL,
+    job_type integer NOT NULL
+);
+
+COMMENT ON TABLE event_logs_scrape_state_own IS 'Contains state for own jobs that scrape events if enabled.';
+
+COMMENT ON COLUMN event_logs_scrape_state_own.bookmark_id IS 'Bookmarks the maximum most recent successful event_logs.id that was scraped';
+
+CREATE SEQUENCE event_logs_scrape_state_own_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE event_logs_scrape_state_own_id_seq OWNED BY event_logs_scrape_state_own.id;
+
 CREATE TABLE executor_heartbeats (
     id integer NOT NULL,
     hostname text NOT NULL,
-    queue_name text NOT NULL,
+    queue_name text,
     os text NOT NULL,
     architecture text NOT NULL,
     docker_version text NOT NULL,
@@ -2009,7 +2364,9 @@ CREATE TABLE executor_heartbeats (
     ignite_version text NOT NULL,
     src_cli_version text NOT NULL,
     first_seen_at timestamp with time zone DEFAULT now() NOT NULL,
-    last_seen_at timestamp with time zone DEFAULT now() NOT NULL
+    last_seen_at timestamp with time zone DEFAULT now() NOT NULL,
+    queue_names text[],
+    CONSTRAINT one_of_queue_name_queue_names CHECK ((((queue_name IS NOT NULL) AND (queue_names IS NULL)) OR ((queue_names IS NOT NULL) AND (queue_name IS NULL))))
 );
 
 COMMENT ON TABLE executor_heartbeats IS 'Tracks the most recent activity of executors attached to this Sourcegraph instance.';
@@ -2036,6 +2393,8 @@ COMMENT ON COLUMN executor_heartbeats.first_seen_at IS 'The first time a heartbe
 
 COMMENT ON COLUMN executor_heartbeats.last_seen_at IS 'The last time a heartbeat from the executor was received.';
 
+COMMENT ON COLUMN executor_heartbeats.queue_names IS 'The list of queue names that the executor polls for work.';
+
 CREATE SEQUENCE executor_heartbeats_id_seq
     AS integer
     START WITH 1
@@ -2281,6 +2640,57 @@ COMMENT ON CONSTRAINT required_bool_fields ON feature_flags IS 'Checks that bool
 
 COMMENT ON CONSTRAINT required_rollout_fields ON feature_flags IS 'Checks that rollout is set IFF flag_type = rollout';
 
+CREATE TABLE github_app_installs (
+    id integer NOT NULL,
+    app_id integer NOT NULL,
+    installation_id integer NOT NULL,
+    created_at timestamp with time zone DEFAULT now() NOT NULL,
+    url text,
+    account_login text,
+    account_avatar_url text,
+    account_url text,
+    account_type text,
+    updated_at timestamp with time zone DEFAULT now() NOT NULL
+);
+
+CREATE SEQUENCE github_app_installs_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE github_app_installs_id_seq OWNED BY github_app_installs.id;
+
+CREATE TABLE github_apps (
+    id integer NOT NULL,
+    app_id integer NOT NULL,
+    name text NOT NULL,
+    slug text NOT NULL,
+    base_url text NOT NULL,
+    client_id text NOT NULL,
+    client_secret text NOT NULL,
+    private_key text NOT NULL,
+    encryption_key_id text NOT NULL,
+    logo text,
+    created_at timestamp with time zone DEFAULT now() NOT NULL,
+    updated_at timestamp with time zone DEFAULT now() NOT NULL,
+    app_url text DEFAULT ''::text NOT NULL,
+    webhook_id integer,
+    domain text DEFAULT 'repos'::text NOT NULL
+);
+
+CREATE SEQUENCE github_apps_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE github_apps_id_seq OWNED BY github_apps.id;
+
 CREATE TABLE gitserver_relocator_jobs (
     id integer NOT NULL,
     state text DEFAULT 'queued'::text,
@@ -2342,7 +2752,8 @@ CREATE TABLE gitserver_repos (
     last_changed timestamp with time zone DEFAULT now() NOT NULL,
     repo_size_bytes bigint,
     corrupted_at timestamp with time zone,
-    corruption_logs jsonb DEFAULT '[]'::jsonb NOT NULL
+    corruption_logs jsonb DEFAULT '[]'::jsonb NOT NULL,
+    cloning_progress text DEFAULT ''::text
 );
 
 COMMENT ON COLUMN gitserver_repos.corrupted_at IS 'Timestamp of when repo corruption was detected';
@@ -2373,6 +2784,14 @@ COMMENT ON COLUMN gitserver_repos_statistics.failed_fetch IS 'Number of reposito
 
 COMMENT ON COLUMN gitserver_repos_statistics.corrupted IS 'Number of repositories that are NOT soft-deleted and not blocked and have corrupted_at set in gitserver_repos table';
 
+CREATE TABLE gitserver_repos_sync_output (
+    repo_id integer NOT NULL,
+    last_output text DEFAULT ''::text NOT NULL,
+    updated_at timestamp with time zone DEFAULT now() NOT NULL
+);
+
+COMMENT ON TABLE gitserver_repos_sync_output IS 'Contains the most recent output from gitserver repository sync jobs.';
+
 CREATE TABLE global_state (
     site_id uuid NOT NULL,
     initialized boolean DEFAULT false NOT NULL
@@ -2401,7 +2820,7 @@ CREATE TABLE insights_query_runner_jobs (
     trace_id text
 );
 
-COMMENT ON TABLE insights_query_runner_jobs IS 'See [enterprise/internal/insights/background/queryrunner/worker.go:Job](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+file:enterprise/internal/insights/background/queryrunner/worker.go+type+Job&patternType=literal)';
+COMMENT ON TABLE insights_query_runner_jobs IS 'See [internal/insights/background/queryrunner/worker.go:Job](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/sourcegraph/sourcegraph%24+file:internal/insights/background/queryrunner/worker.go+type+Job&patternType=literal)';
 
 COMMENT ON COLUMN insights_query_runner_jobs.priority IS 'Integer representing a category of priority for this query. Priority in this context is ambiguously defined for consumers to decide an interpretation.';
 
@@ -2465,48 +2884,6 @@ CREATE SEQUENCE insights_settings_migration_jobs_id_seq
 
 ALTER SEQUENCE insights_settings_migration_jobs_id_seq OWNED BY insights_settings_migration_jobs.id;
 
-CREATE TABLE lsif_configuration_policies (
-    id integer NOT NULL,
-    repository_id integer,
-    name text,
-    type text NOT NULL,
-    pattern text NOT NULL,
-    retention_enabled boolean NOT NULL,
-    retention_duration_hours integer,
-    retain_intermediate_commits boolean NOT NULL,
-    indexing_enabled boolean NOT NULL,
-    index_commit_max_age_hours integer,
-    index_intermediate_commits boolean NOT NULL,
-    protected boolean DEFAULT false NOT NULL,
-    repository_patterns text[],
-    last_resolved_at timestamp with time zone,
-    lockfile_indexing_enabled boolean DEFAULT false NOT NULL
-);
-
-COMMENT ON COLUMN lsif_configuration_policies.repository_id IS 'The identifier of the repository to which this configuration policy applies. If absent, this policy is applied globally.';
-
-COMMENT ON COLUMN lsif_configuration_policies.type IS 'The type of Git object (e.g., COMMIT, BRANCH, TAG).';
-
-COMMENT ON COLUMN lsif_configuration_policies.pattern IS 'A pattern used to match` names of the associated Git object type.';
-
-COMMENT ON COLUMN lsif_configuration_policies.retention_enabled IS 'Whether or not this configuration policy affects data retention rules.';
-
-COMMENT ON COLUMN lsif_configuration_policies.retention_duration_hours IS 'The max age of data retained by this configuration policy. If null, the age is unbounded.';
-
-COMMENT ON COLUMN lsif_configuration_policies.retain_intermediate_commits IS 'If the matching Git object is a branch, setting this value to true will also retain all data used to resolve queries for any commit on the matching branches. Setting this value to false will only consider the tip of the branch.';
-
-COMMENT ON COLUMN lsif_configuration_policies.indexing_enabled IS 'Whether or not this configuration policy affects auto-indexing schedules.';
-
-COMMENT ON COLUMN lsif_configuration_policies.index_commit_max_age_hours IS 'The max age of commits indexed by this configuration policy. If null, the age is unbounded.';
-
-COMMENT ON COLUMN lsif_configuration_policies.index_intermediate_commits IS 'If the matching Git object is a branch, setting this value to true will also index all commits on the matching branches. Setting this value to false will only consider the tip of the branch.';
-
-COMMENT ON COLUMN lsif_configuration_policies.protected IS 'Whether or not this configuration policy is protected from modification of its data retention behavior (except for duration).';
-
-COMMENT ON COLUMN lsif_configuration_policies.repository_patterns IS 'The name pattern matching repositories to which this configuration policy applies. If absent, all repositories are matched.';
-
-COMMENT ON COLUMN lsif_configuration_policies.lockfile_indexing_enabled IS 'Whether to index the lockfiles in the repositories matched by this policy';
-
 CREATE SEQUENCE lsif_configuration_policies_id_seq
     AS integer
     START WITH 1
@@ -2517,17 +2894,6 @@ CREATE SEQUENCE lsif_configuration_policies_id_seq
 
 ALTER SEQUENCE lsif_configuration_policies_id_seq OWNED BY lsif_configuration_policies.id;
 
-CREATE TABLE lsif_configuration_policies_repository_pattern_lookup (
-    policy_id integer NOT NULL,
-    repo_id integer NOT NULL
-);
-
-COMMENT ON TABLE lsif_configuration_policies_repository_pattern_lookup IS 'A lookup table to get all the repository patterns by repository id that apply to a configuration policy.';
-
-COMMENT ON COLUMN lsif_configuration_policies_repository_pattern_lookup.policy_id IS 'The policy identifier associated with the repository.';
-
-COMMENT ON COLUMN lsif_configuration_policies_repository_pattern_lookup.repo_id IS 'The repository identifier associated with the policy.';
-
 CREATE TABLE lsif_dependency_indexing_jobs (
     id integer NOT NULL,
     state text DEFAULT 'queued'::text NOT NULL,
@@ -3435,6 +3801,146 @@ CREATE VIEW outbound_webhooks_with_event_types AS
           WHERE (outbound_webhook_event_types.outbound_webhook_id = outbound_webhooks.id))) AS event_types
    FROM outbound_webhooks;
 
+CREATE TABLE own_aggregate_recent_contribution (
+    id integer NOT NULL,
+    commit_author_id integer NOT NULL,
+    changed_file_path_id integer NOT NULL,
+    contributions_count integer DEFAULT 0
+);
+
+CREATE SEQUENCE own_aggregate_recent_contribution_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE own_aggregate_recent_contribution_id_seq OWNED BY own_aggregate_recent_contribution.id;
+
+CREATE TABLE own_aggregate_recent_view (
+    id integer NOT NULL,
+    viewer_id integer NOT NULL,
+    viewed_file_path_id integer NOT NULL,
+    views_count integer DEFAULT 0
+);
+
+COMMENT ON TABLE own_aggregate_recent_view IS 'One entry contains a number of views of a single file by a given viewer.';
+
+CREATE SEQUENCE own_aggregate_recent_view_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE own_aggregate_recent_view_id_seq OWNED BY own_aggregate_recent_view.id;
+
+CREATE TABLE own_background_jobs (
+    id integer NOT NULL,
+    state text DEFAULT 'queued'::text,
+    failure_message text,
+    queued_at timestamp with time zone DEFAULT now(),
+    started_at timestamp with time zone,
+    finished_at timestamp with time zone,
+    process_after timestamp with time zone,
+    num_resets integer DEFAULT 0 NOT NULL,
+    num_failures integer DEFAULT 0 NOT NULL,
+    last_heartbeat_at timestamp with time zone,
+    execution_logs json[],
+    worker_hostname text DEFAULT ''::text NOT NULL,
+    cancel boolean DEFAULT false NOT NULL,
+    repo_id integer NOT NULL,
+    job_type integer NOT NULL
+);
+
+CREATE TABLE own_signal_configurations (
+    id integer NOT NULL,
+    name text NOT NULL,
+    description text DEFAULT ''::text NOT NULL,
+    excluded_repo_patterns text[],
+    enabled boolean DEFAULT false NOT NULL
+);
+
+CREATE VIEW own_background_jobs_config_aware AS
+ SELECT obj.id,
+    obj.state,
+    obj.failure_message,
+    obj.queued_at,
+    obj.started_at,
+    obj.finished_at,
+    obj.process_after,
+    obj.num_resets,
+    obj.num_failures,
+    obj.last_heartbeat_at,
+    obj.execution_logs,
+    obj.worker_hostname,
+    obj.cancel,
+    obj.repo_id,
+    obj.job_type,
+    osc.name AS config_name
+   FROM (own_background_jobs obj
+     JOIN own_signal_configurations osc ON ((obj.job_type = osc.id)))
+  WHERE (osc.enabled IS TRUE);
+
+CREATE SEQUENCE own_background_jobs_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE own_background_jobs_id_seq OWNED BY own_background_jobs.id;
+
+CREATE SEQUENCE own_signal_configurations_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE own_signal_configurations_id_seq OWNED BY own_signal_configurations.id;
+
+CREATE TABLE own_signal_recent_contribution (
+    id integer NOT NULL,
+    commit_author_id integer NOT NULL,
+    changed_file_path_id integer NOT NULL,
+    commit_timestamp timestamp without time zone NOT NULL,
+    commit_id bytea NOT NULL
+);
+
+COMMENT ON TABLE own_signal_recent_contribution IS 'One entry per file changed in every commit that classifies as a contribution signal.';
+
+CREATE SEQUENCE own_signal_recent_contribution_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE own_signal_recent_contribution_id_seq OWNED BY own_signal_recent_contribution.id;
+
+CREATE TABLE ownership_path_stats (
+    file_path_id integer NOT NULL,
+    tree_codeowned_files_count integer,
+    last_updated_at timestamp without time zone NOT NULL,
+    tree_assigned_ownership_files_count integer,
+    tree_any_ownership_files_count integer
+);
+
+COMMENT ON TABLE ownership_path_stats IS 'Data on how many files in given tree are owned by anyone.
+
+We choose to have a table for `ownership_path_stats` - more general than for CODEOWNERS,
+with a specific tree_codeowned_files_count CODEOWNERS column. The reason for that
+is that we aim at expanding path stats by including total owned files (via CODEOWNERS
+or assigned ownership), and perhaps files count by assigned ownership only.';
+
+COMMENT ON COLUMN ownership_path_stats.last_updated_at IS 'When the last background job updating counts run.';
+
 CREATE TABLE package_repo_filters (
     id integer NOT NULL,
     behaviour text NOT NULL,
@@ -3500,6 +4006,7 @@ CREATE TABLE permission_sync_jobs (
     permissions_removed integer DEFAULT 0 NOT NULL,
     permissions_found integer DEFAULT 0 NOT NULL,
     code_host_states json[],
+    is_partial_success boolean DEFAULT false,
     CONSTRAINT permission_sync_jobs_for_repo_or_user CHECK (((user_id IS NULL) <> (repository_id IS NULL)))
 );
 
@@ -3567,9 +4074,18 @@ CREATE TABLE product_licenses (
     license_version integer,
     license_tags text[],
     license_user_count integer,
-    license_expires_at timestamp with time zone
+    license_expires_at timestamp with time zone,
+    access_token_enabled boolean DEFAULT true NOT NULL,
+    site_id uuid,
+    license_check_token bytea,
+    revoked_at timestamp with time zone,
+    salesforce_sub_id text,
+    salesforce_opp_id text,
+    revoke_reason text
 );
 
+COMMENT ON COLUMN product_licenses.access_token_enabled IS 'Whether this license key can be used as an access token to authenticate API requests';
+
 CREATE TABLE product_subscriptions (
     id uuid NOT NULL,
     user_id integer NOT NULL,
@@ -3577,9 +4093,25 @@ CREATE TABLE product_subscriptions (
     created_at timestamp with time zone DEFAULT now() NOT NULL,
     updated_at timestamp with time zone DEFAULT now() NOT NULL,
     archived_at timestamp with time zone,
-    account_number text
+    account_number text,
+    cody_gateway_enabled boolean DEFAULT false NOT NULL,
+    cody_gateway_chat_rate_limit bigint,
+    cody_gateway_chat_rate_interval_seconds integer,
+    cody_gateway_embeddings_api_rate_limit bigint,
+    cody_gateway_embeddings_api_rate_interval_seconds integer,
+    cody_gateway_embeddings_api_allowed_models text[],
+    cody_gateway_chat_rate_limit_allowed_models text[],
+    cody_gateway_code_rate_limit bigint,
+    cody_gateway_code_rate_interval_seconds integer,
+    cody_gateway_code_rate_limit_allowed_models text[]
 );
 
+COMMENT ON COLUMN product_subscriptions.cody_gateway_embeddings_api_rate_limit IS 'Custom requests per time interval allowed for embeddings';
+
+COMMENT ON COLUMN product_subscriptions.cody_gateway_embeddings_api_rate_interval_seconds IS 'Custom time interval over which the embeddings rate limit is applied';
+
+COMMENT ON COLUMN product_subscriptions.cody_gateway_embeddings_api_allowed_models IS 'Custom override for the set of models allowed for embedding';
+
 CREATE TABLE query_runner_state (
     query text,
     last_executed timestamp with time zone,
@@ -3607,6 +4139,8 @@ CREATE TABLE users (
     invalidated_sessions_at timestamp with time zone DEFAULT now() NOT NULL,
     tos_accepted boolean DEFAULT false NOT NULL,
     searchable boolean DEFAULT true NOT NULL,
+    completions_quota integer,
+    code_completions_quota integer,
     CONSTRAINT users_display_name_max_length CHECK ((char_length(display_name) <= 255)),
     CONSTRAINT users_username_max_length CHECK ((char_length((username)::text) <= 255)),
     CONSTRAINT users_username_valid_chars CHECK ((username OPERATOR(~) '^\w(?:\w|[-.](?=\w))*-?$'::citext))
@@ -3628,6 +4162,7 @@ CREATE VIEW reconciler_changesets AS
     c.external_state,
     c.external_review_state,
     c.external_check_state,
+    c.commit_verification,
     c.diff_stat_added,
     c.diff_stat_deleted,
     c.sync_state,
@@ -3715,6 +4250,41 @@ CREATE SEQUENCE registry_extensions_id_seq
 
 ALTER SEQUENCE registry_extensions_id_seq OWNED BY registry_extensions.id;
 
+CREATE TABLE repo_commits_changelists (
+    id integer NOT NULL,
+    repo_id integer NOT NULL,
+    commit_sha bytea NOT NULL,
+    perforce_changelist_id integer NOT NULL,
+    created_at timestamp with time zone DEFAULT now() NOT NULL
+);
+
+CREATE SEQUENCE repo_commits_changelists_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE repo_commits_changelists_id_seq OWNED BY repo_commits_changelists.id;
+
+CREATE TABLE repo_embedding_job_stats (
+    job_id integer NOT NULL,
+    is_incremental boolean DEFAULT false NOT NULL,
+    code_files_total integer DEFAULT 0 NOT NULL,
+    code_files_embedded integer DEFAULT 0 NOT NULL,
+    code_chunks_embedded integer DEFAULT 0 NOT NULL,
+    code_files_skipped jsonb DEFAULT '{}'::jsonb NOT NULL,
+    code_bytes_embedded integer DEFAULT 0 NOT NULL,
+    text_files_total integer DEFAULT 0 NOT NULL,
+    text_files_embedded integer DEFAULT 0 NOT NULL,
+    text_chunks_embedded integer DEFAULT 0 NOT NULL,
+    text_files_skipped jsonb DEFAULT '{}'::jsonb NOT NULL,
+    text_bytes_embedded integer DEFAULT 0 NOT NULL,
+    code_chunks_excluded integer DEFAULT 0 NOT NULL,
+    text_chunks_excluded integer DEFAULT 0 NOT NULL
+);
+
 CREATE TABLE repo_embedding_jobs (
     id integer NOT NULL,
     state text DEFAULT 'queued'::text,
@@ -3758,6 +4328,31 @@ CREATE TABLE repo_kvps (
     value text
 );
 
+CREATE TABLE repo_paths (
+    id integer NOT NULL,
+    repo_id integer NOT NULL,
+    absolute_path text NOT NULL,
+    parent_id integer,
+    tree_files_count integer,
+    tree_files_counts_updated_at timestamp without time zone
+);
+
+COMMENT ON COLUMN repo_paths.absolute_path IS 'Absolute path does not start or end with forward slash. Example: "a/b/c". Root directory is empty path "".';
+
+COMMENT ON COLUMN repo_paths.tree_files_count IS 'Total count of files in the file tree rooted at the path. 1 for files.';
+
+COMMENT ON COLUMN repo_paths.tree_files_counts_updated_at IS 'Timestamp of the job that updated the file counts';
+
+CREATE SEQUENCE repo_paths_id_seq
+    AS integer
+    START WITH 1
+    INCREMENT BY 1
+    NO MINVALUE
+    NO MAXVALUE
+    CACHE 1;
+
+ALTER SEQUENCE repo_paths_id_seq OWNED BY repo_paths.id;
+
 CREATE TABLE repo_pending_permissions (
     repo_id integer NOT NULL,
     permission text NOT NULL,
@@ -4159,7 +4754,7 @@ CREATE TABLE user_public_repos (
 );
 
 CREATE TABLE user_repo_permissions (
-    id integer NOT NULL,
+    id bigint NOT NULL,
     user_id integer,
     repo_id integer NOT NULL,
     user_external_account_id integer,
@@ -4169,7 +4764,6 @@ CREATE TABLE user_repo_permissions (
 );
 
 CREATE SEQUENCE user_repo_permissions_id_seq
-    AS integer
     START WITH 1
     INCREMENT BY 1
     NO MINVALUE
@@ -4347,13 +4941,18 @@ CREATE TABLE zoekt_repos (
     branches jsonb DEFAULT '[]'::jsonb NOT NULL,
     index_status text DEFAULT 'not_indexed'::text NOT NULL,
     updated_at timestamp with time zone DEFAULT now() NOT NULL,
-    created_at timestamp with time zone DEFAULT now() NOT NULL
+    created_at timestamp with time zone DEFAULT now() NOT NULL,
+    last_indexed_at timestamp with time zone
 );
 
 ALTER TABLE ONLY access_requests ALTER COLUMN id SET DEFAULT nextval('access_requests_id_seq'::regclass);
 
 ALTER TABLE ONLY access_tokens ALTER COLUMN id SET DEFAULT nextval('access_tokens_id_seq'::regclass);
 
+ALTER TABLE ONLY assigned_owners ALTER COLUMN id SET DEFAULT nextval('assigned_owners_id_seq'::regclass);
+
+ALTER TABLE ONLY assigned_teams ALTER COLUMN id SET DEFAULT nextval('assigned_teams_id_seq'::regclass);
+
 ALTER TABLE ONLY batch_changes ALTER COLUMN id SET DEFAULT nextval('batch_changes_id_seq'::regclass);
 
 ALTER TABLE ONLY batch_changes_site_credentials ALTER COLUMN id SET DEFAULT nextval('batch_changes_site_credentials_id_seq'::regclass);
@@ -4398,6 +4997,8 @@ ALTER TABLE ONLY cm_webhooks ALTER COLUMN id SET DEFAULT nextval('cm_webhooks_id
 
 ALTER TABLE ONLY codeintel_autoindex_queue ALTER COLUMN id SET DEFAULT nextval('codeintel_autoindex_queue_id_seq'::regclass);
 
+ALTER TABLE ONLY codeintel_autoindexing_exceptions ALTER COLUMN id SET DEFAULT nextval('codeintel_autoindexing_exceptions_id_seq'::regclass);
+
 ALTER TABLE ONLY codeintel_initial_path_ranks ALTER COLUMN id SET DEFAULT nextval('codeintel_initial_path_ranks_id_seq'::regclass);
 
 ALTER TABLE ONLY codeintel_initial_path_ranks_processed ALTER COLUMN id SET DEFAULT nextval('codeintel_initial_path_ranks_processed_id_seq'::regclass);
@@ -4410,14 +5011,22 @@ ALTER TABLE ONLY codeintel_ranking_definitions ALTER COLUMN id SET DEFAULT nextv
 
 ALTER TABLE ONLY codeintel_ranking_exports ALTER COLUMN id SET DEFAULT nextval('codeintel_ranking_exports_id_seq'::regclass);
 
+ALTER TABLE ONLY codeintel_ranking_graph_keys ALTER COLUMN id SET DEFAULT nextval('codeintel_ranking_graph_keys_id_seq'::regclass);
+
 ALTER TABLE ONLY codeintel_ranking_path_counts_inputs ALTER COLUMN id SET DEFAULT nextval('codeintel_ranking_path_counts_inputs_id_seq'::regclass);
 
+ALTER TABLE ONLY codeintel_ranking_progress ALTER COLUMN id SET DEFAULT nextval('codeintel_ranking_progress_id_seq'::regclass);
+
 ALTER TABLE ONLY codeintel_ranking_references ALTER COLUMN id SET DEFAULT nextval('codeintel_ranking_references_id_seq'::regclass);
 
 ALTER TABLE ONLY codeintel_ranking_references_processed ALTER COLUMN id SET DEFAULT nextval('codeintel_ranking_references_processed_id_seq'::regclass);
 
 ALTER TABLE ONLY codeowners ALTER COLUMN id SET DEFAULT nextval('codeowners_id_seq'::regclass);
 
+ALTER TABLE ONLY codeowners_owners ALTER COLUMN id SET DEFAULT nextval('codeowners_owners_id_seq'::regclass);
+
+ALTER TABLE ONLY commit_authors ALTER COLUMN id SET DEFAULT nextval('commit_authors_id_seq'::regclass);
+
 ALTER TABLE ONLY configuration_policies_audit_logs ALTER COLUMN sequence SET DEFAULT nextval('configuration_policies_audit_logs_seq'::regclass);
 
 ALTER TABLE ONLY context_detection_embedding_jobs ALTER COLUMN id SET DEFAULT nextval('context_detection_embedding_jobs_id_seq'::regclass);
@@ -4436,6 +5045,8 @@ ALTER TABLE ONLY event_logs_export_allowlist ALTER COLUMN id SET DEFAULT nextval
 
 ALTER TABLE ONLY event_logs_scrape_state ALTER COLUMN id SET DEFAULT nextval('event_logs_scrape_state_id_seq'::regclass);
 
+ALTER TABLE ONLY event_logs_scrape_state_own ALTER COLUMN id SET DEFAULT nextval('event_logs_scrape_state_own_id_seq'::regclass);
+
 ALTER TABLE ONLY executor_heartbeats ALTER COLUMN id SET DEFAULT nextval('executor_heartbeats_id_seq'::regclass);
 
 ALTER TABLE ONLY executor_job_tokens ALTER COLUMN id SET DEFAULT nextval('executor_job_tokens_id_seq'::regclass);
@@ -4448,6 +5059,10 @@ ALTER TABLE ONLY explicit_permissions_bitbucket_projects_jobs ALTER COLUMN id SE
 
 ALTER TABLE ONLY external_services ALTER COLUMN id SET DEFAULT nextval('external_services_id_seq'::regclass);
 
+ALTER TABLE ONLY github_app_installs ALTER COLUMN id SET DEFAULT nextval('github_app_installs_id_seq'::regclass);
+
+ALTER TABLE ONLY github_apps ALTER COLUMN id SET DEFAULT nextval('github_apps_id_seq'::regclass);
+
 ALTER TABLE ONLY gitserver_relocator_jobs ALTER COLUMN id SET DEFAULT nextval('gitserver_relocator_jobs_id_seq'::regclass);
 
 ALTER TABLE ONLY insights_query_runner_jobs ALTER COLUMN id SET DEFAULT nextval('insights_query_runner_jobs_id_seq'::regclass);
@@ -4502,6 +5117,16 @@ ALTER TABLE ONLY outbound_webhook_logs ALTER COLUMN id SET DEFAULT nextval('outb
 
 ALTER TABLE ONLY outbound_webhooks ALTER COLUMN id SET DEFAULT nextval('outbound_webhooks_id_seq'::regclass);
 
+ALTER TABLE ONLY own_aggregate_recent_contribution ALTER COLUMN id SET DEFAULT nextval('own_aggregate_recent_contribution_id_seq'::regclass);
+
+ALTER TABLE ONLY own_aggregate_recent_view ALTER COLUMN id SET DEFAULT nextval('own_aggregate_recent_view_id_seq'::regclass);
+
+ALTER TABLE ONLY own_background_jobs ALTER COLUMN id SET DEFAULT nextval('own_background_jobs_id_seq'::regclass);
+
+ALTER TABLE ONLY own_signal_configurations ALTER COLUMN id SET DEFAULT nextval('own_signal_configurations_id_seq'::regclass);
+
+ALTER TABLE ONLY own_signal_recent_contribution ALTER COLUMN id SET DEFAULT nextval('own_signal_recent_contribution_id_seq'::regclass);
+
 ALTER TABLE ONLY package_repo_filters ALTER COLUMN id SET DEFAULT nextval('package_repo_filters_id_seq'::regclass);
 
 ALTER TABLE ONLY package_repo_versions ALTER COLUMN id SET DEFAULT nextval('package_repo_versions_id_seq'::regclass);
@@ -4518,8 +5143,12 @@ ALTER TABLE ONLY registry_extensions ALTER COLUMN id SET DEFAULT nextval('regist
 
 ALTER TABLE ONLY repo ALTER COLUMN id SET DEFAULT nextval('repo_id_seq'::regclass);
 
+ALTER TABLE ONLY repo_commits_changelists ALTER COLUMN id SET DEFAULT nextval('repo_commits_changelists_id_seq'::regclass);
+
 ALTER TABLE ONLY repo_embedding_jobs ALTER COLUMN id SET DEFAULT nextval('repo_embedding_jobs_id_seq'::regclass);
 
+ALTER TABLE ONLY repo_paths ALTER COLUMN id SET DEFAULT nextval('repo_paths_id_seq'::regclass);
+
 ALTER TABLE ONLY roles ALTER COLUMN id SET DEFAULT nextval('roles_id_seq'::regclass);
 
 ALTER TABLE ONLY saved_searches ALTER COLUMN id SET DEFAULT nextval('saved_searches_id_seq'::regclass);
@@ -4573,6 +5202,12 @@ ALTER TABLE ONLY access_tokens
 ALTER TABLE ONLY aggregated_user_statistics
     ADD CONSTRAINT aggregated_user_statistics_pkey PRIMARY KEY (user_id);
 
+ALTER TABLE ONLY assigned_owners
+    ADD CONSTRAINT assigned_owners_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY assigned_teams
+    ADD CONSTRAINT assigned_teams_pkey PRIMARY KEY (id);
+
 ALTER TABLE ONLY batch_changes
     ADD CONSTRAINT batch_changes_pkey PRIMARY KEY (id);
 
@@ -4657,6 +5292,12 @@ ALTER TABLE ONLY cm_webhooks
 ALTER TABLE ONLY codeintel_autoindex_queue
     ADD CONSTRAINT codeintel_autoindex_queue_pkey PRIMARY KEY (id);
 
+ALTER TABLE ONLY codeintel_autoindexing_exceptions
+    ADD CONSTRAINT codeintel_autoindexing_exceptions_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY codeintel_autoindexing_exceptions
+    ADD CONSTRAINT codeintel_autoindexing_exceptions_repository_id_key UNIQUE (repository_id);
+
 ALTER TABLE ONLY codeintel_commit_dates
     ADD CONSTRAINT codeintel_commit_dates_pkey PRIMARY KEY (repository_id, commit_bytea);
 
@@ -4675,21 +5316,39 @@ ALTER TABLE ONLY codeintel_ranking_definitions
 ALTER TABLE ONLY codeintel_ranking_exports
     ADD CONSTRAINT codeintel_ranking_exports_pkey PRIMARY KEY (id);
 
+ALTER TABLE ONLY codeintel_ranking_graph_keys
+    ADD CONSTRAINT codeintel_ranking_graph_keys_pkey PRIMARY KEY (id);
+
 ALTER TABLE ONLY codeintel_ranking_path_counts_inputs
     ADD CONSTRAINT codeintel_ranking_path_counts_inputs_pkey PRIMARY KEY (id);
 
+ALTER TABLE ONLY codeintel_ranking_progress
+    ADD CONSTRAINT codeintel_ranking_progress_graph_key_key UNIQUE (graph_key);
+
+ALTER TABLE ONLY codeintel_ranking_progress
+    ADD CONSTRAINT codeintel_ranking_progress_pkey PRIMARY KEY (id);
+
 ALTER TABLE ONLY codeintel_ranking_references
     ADD CONSTRAINT codeintel_ranking_references_pkey PRIMARY KEY (id);
 
 ALTER TABLE ONLY codeintel_ranking_references_processed
     ADD CONSTRAINT codeintel_ranking_references_processed_pkey PRIMARY KEY (id);
 
+ALTER TABLE ONLY codeowners_individual_stats
+    ADD CONSTRAINT codeowners_individual_stats_pkey PRIMARY KEY (file_path_id, owner_id);
+
+ALTER TABLE ONLY codeowners_owners
+    ADD CONSTRAINT codeowners_owners_pkey PRIMARY KEY (id);
+
 ALTER TABLE ONLY codeowners
     ADD CONSTRAINT codeowners_pkey PRIMARY KEY (id);
 
 ALTER TABLE ONLY codeowners
     ADD CONSTRAINT codeowners_repo_id_key UNIQUE (repo_id);
 
+ALTER TABLE ONLY commit_authors
+    ADD CONSTRAINT commit_authors_pkey PRIMARY KEY (id);
+
 ALTER TABLE ONLY context_detection_embedding_jobs
     ADD CONSTRAINT context_detection_embedding_jobs_pkey PRIMARY KEY (id);
 
@@ -4714,6 +5373,9 @@ ALTER TABLE ONLY event_logs_export_allowlist
 ALTER TABLE ONLY event_logs
     ADD CONSTRAINT event_logs_pkey PRIMARY KEY (id);
 
+ALTER TABLE ONLY event_logs_scrape_state_own
+    ADD CONSTRAINT event_logs_scrape_state_own_pk PRIMARY KEY (id);
+
 ALTER TABLE ONLY event_logs_scrape_state
     ADD CONSTRAINT event_logs_scrape_state_pk PRIMARY KEY (id);
 
@@ -4756,6 +5418,12 @@ ALTER TABLE ONLY feature_flag_overrides
 ALTER TABLE ONLY feature_flags
     ADD CONSTRAINT feature_flags_pkey PRIMARY KEY (flag_name);
 
+ALTER TABLE ONLY github_app_installs
+    ADD CONSTRAINT github_app_installs_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY github_apps
+    ADD CONSTRAINT github_apps_pkey PRIMARY KEY (id);
+
 ALTER TABLE ONLY gitserver_relocator_jobs
     ADD CONSTRAINT gitserver_relocator_jobs_pkey PRIMARY KEY (id);
 
@@ -4765,6 +5433,9 @@ ALTER TABLE ONLY gitserver_repos
 ALTER TABLE ONLY gitserver_repos_statistics
     ADD CONSTRAINT gitserver_repos_statistics_pkey PRIMARY KEY (shard_id);
 
+ALTER TABLE ONLY gitserver_repos_sync_output
+    ADD CONSTRAINT gitserver_repos_sync_output_pkey PRIMARY KEY (repo_id);
+
 ALTER TABLE ONLY global_state
     ADD CONSTRAINT global_state_pkey PRIMARY KEY (site_id);
 
@@ -4876,6 +5547,24 @@ ALTER TABLE ONLY outbound_webhook_logs
 ALTER TABLE ONLY outbound_webhooks
     ADD CONSTRAINT outbound_webhooks_pkey PRIMARY KEY (id);
 
+ALTER TABLE ONLY own_aggregate_recent_contribution
+    ADD CONSTRAINT own_aggregate_recent_contribution_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY own_aggregate_recent_view
+    ADD CONSTRAINT own_aggregate_recent_view_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY own_background_jobs
+    ADD CONSTRAINT own_background_jobs_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY own_signal_configurations
+    ADD CONSTRAINT own_signal_configurations_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY own_signal_recent_contribution
+    ADD CONSTRAINT own_signal_recent_contribution_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY ownership_path_stats
+    ADD CONSTRAINT ownership_path_stats_pkey PRIMARY KEY (file_path_id);
+
 ALTER TABLE ONLY package_repo_filters
     ADD CONSTRAINT package_repo_filters_pkey PRIMARY KEY (id);
 
@@ -4909,6 +5598,12 @@ ALTER TABLE ONLY registry_extension_releases
 ALTER TABLE ONLY registry_extensions
     ADD CONSTRAINT registry_extensions_pkey PRIMARY KEY (id);
 
+ALTER TABLE ONLY repo_commits_changelists
+    ADD CONSTRAINT repo_commits_changelists_pkey PRIMARY KEY (id);
+
+ALTER TABLE ONLY repo_embedding_job_stats
+    ADD CONSTRAINT repo_embedding_job_stats_pkey PRIMARY KEY (job_id);
+
 ALTER TABLE ONLY repo_embedding_jobs
     ADD CONSTRAINT repo_embedding_jobs_pkey PRIMARY KEY (id);
 
@@ -4918,6 +5613,9 @@ ALTER TABLE ONLY repo_kvps
 ALTER TABLE ONLY repo
     ADD CONSTRAINT repo_name_unique UNIQUE (name) DEFERRABLE;
 
+ALTER TABLE ONLY repo_paths
+    ADD CONSTRAINT repo_paths_pkey PRIMARY KEY (id);
+
 ALTER TABLE ONLY repo_pending_permissions
     ADD CONSTRAINT repo_pending_permissions_perm_unique UNIQUE (repo_id, permission);
 
@@ -4969,6 +5667,9 @@ ALTER TABLE ONLY temporary_settings
 ALTER TABLE ONLY temporary_settings
     ADD CONSTRAINT temporary_settings_user_id_key UNIQUE (user_id);
 
+ALTER TABLE ONLY github_app_installs
+    ADD CONSTRAINT unique_app_install UNIQUE (app_id, installation_id);
+
 ALTER TABLE ONLY user_credentials
     ADD CONSTRAINT user_credentials_domain_user_id_external_service_type_exter_key UNIQUE (domain, user_id, external_service_type, external_service_id);
 
@@ -5035,6 +5736,12 @@ CREATE INDEX access_requests_status ON access_requests USING btree (status);
 
 CREATE INDEX access_tokens_lookup ON access_tokens USING hash (value_sha256) WHERE (deleted_at IS NULL);
 
+CREATE INDEX app_id_idx ON github_app_installs USING btree (app_id);
+
+CREATE UNIQUE INDEX assigned_owners_file_path_owner ON assigned_owners USING btree (file_path_id, owner_user_id);
+
+CREATE UNIQUE INDEX assigned_teams_file_path_owner ON assigned_teams USING btree (file_path_id, owner_team_id);
+
 CREATE INDEX batch_changes_namespace_org_id ON batch_changes USING btree (namespace_org_id);
 
 CREATE INDEX batch_changes_namespace_user_id ON batch_changes USING btree (namespace_user_id);
@@ -5107,6 +5814,8 @@ CREATE INDEX changesets_reconciler_state_idx ON changesets USING btree (reconcil
 
 CREATE INDEX cm_action_jobs_state_idx ON cm_action_jobs USING btree (state);
 
+CREATE INDEX cm_action_jobs_trigger_event ON cm_action_jobs USING btree (trigger_event);
+
 CREATE INDEX cm_slack_webhooks_monitor ON cm_slack_webhooks USING btree (monitor);
 
 CREATE INDEX cm_trigger_jobs_finished_at ON cm_trigger_jobs USING btree (finished_at);
@@ -5117,37 +5826,47 @@ CREATE INDEX cm_webhooks_monitor ON cm_webhooks USING btree (monitor);
 
 CREATE UNIQUE INDEX codeintel_autoindex_queue_repository_id_commit ON codeintel_autoindex_queue USING btree (repository_id, rev);
 
-CREATE INDEX codeintel_initial_path_ranks_graph_key_id ON codeintel_initial_path_ranks USING btree (graph_key, id);
+CREATE INDEX codeintel_initial_path_ranks_exported_upload_id ON codeintel_initial_path_ranks USING btree (exported_upload_id);
 
-CREATE INDEX codeintel_initial_path_ranks_graph_key_last_scanned_at ON codeintel_initial_path_ranks USING btree (graph_key, last_scanned_at NULLS FIRST, id);
+CREATE INDEX codeintel_initial_path_ranks_graph_key_id ON codeintel_initial_path_ranks USING btree (graph_key, id);
 
 CREATE UNIQUE INDEX codeintel_initial_path_ranks_processed_cgraph_key_codeintel_ini ON codeintel_initial_path_ranks_processed USING btree (graph_key, codeintel_initial_path_ranks_id);
 
-CREATE INDEX codeintel_initial_path_upload_id ON codeintel_initial_path_ranks USING btree (upload_id);
+CREATE INDEX codeintel_initial_path_ranks_processed_codeintel_initial_path_r ON codeintel_initial_path_ranks_processed USING btree (codeintel_initial_path_ranks_id);
 
 CREATE UNIQUE INDEX codeintel_langugage_support_requests_user_id_language ON codeintel_langugage_support_requests USING btree (user_id, language_id);
 
 CREATE INDEX codeintel_path_ranks_graph_key ON codeintel_path_ranks USING btree (graph_key, updated_at NULLS FIRST, id);
 
-CREATE UNIQUE INDEX codeintel_path_ranks_repository_id ON codeintel_path_ranks USING btree (repository_id);
+CREATE UNIQUE INDEX codeintel_path_ranks_graph_key_repository_id ON codeintel_path_ranks USING btree (graph_key, repository_id);
 
 CREATE INDEX codeintel_path_ranks_repository_id_updated_at_id ON codeintel_path_ranks USING btree (repository_id, updated_at NULLS FIRST, id);
 
-CREATE INDEX codeintel_ranking_definitions_graph_key_last_scanned_at_id ON codeintel_ranking_definitions USING btree (graph_key, last_scanned_at NULLS FIRST, id);
+CREATE INDEX codeintel_ranking_definitions_exported_upload_id ON codeintel_ranking_definitions USING btree (exported_upload_id);
+
+CREATE INDEX codeintel_ranking_definitions_graph_key_symbol_checksum_search ON codeintel_ranking_definitions USING btree (graph_key, symbol_checksum, exported_upload_id, document_path);
 
-CREATE INDEX codeintel_ranking_definitions_graph_key_symbol_search ON codeintel_ranking_definitions USING btree (graph_key, symbol_name, upload_id, document_path);
+CREATE INDEX codeintel_ranking_exports_graph_key_deleted_at_id ON codeintel_ranking_exports USING btree (graph_key, deleted_at DESC, id);
+
+CREATE INDEX codeintel_ranking_exports_graph_key_last_scanned_at ON codeintel_ranking_exports USING btree (graph_key, last_scanned_at NULLS FIRST, id);
 
 CREATE UNIQUE INDEX codeintel_ranking_exports_graph_key_upload_id ON codeintel_ranking_exports USING btree (graph_key, upload_id);
 
-CREATE INDEX codeintel_ranking_path_counts_inputs_graph_key_repository_id_id ON codeintel_ranking_path_counts_inputs USING btree (graph_key, repository_id, id) WHERE (NOT processed);
+CREATE INDEX codeintel_ranking_path_counts_inputs_graph_key_id ON codeintel_ranking_path_counts_inputs USING btree (graph_key, id);
 
-CREATE INDEX codeintel_ranking_references_graph_key_id ON codeintel_ranking_references USING btree (graph_key, id);
+CREATE UNIQUE INDEX codeintel_ranking_path_counts_inputs_graph_key_unique_definitio ON codeintel_ranking_path_counts_inputs USING btree (graph_key, definition_id) WHERE (NOT processed);
 
-CREATE INDEX codeintel_ranking_references_graph_key_last_scanned_at_id ON codeintel_ranking_references USING btree (graph_key, last_scanned_at NULLS FIRST, id);
+CREATE INDEX codeintel_ranking_references_exported_upload_id ON codeintel_ranking_references USING btree (exported_upload_id);
+
+CREATE INDEX codeintel_ranking_references_graph_key_id ON codeintel_ranking_references USING btree (graph_key, id);
 
 CREATE UNIQUE INDEX codeintel_ranking_references_processed_graph_key_codeintel_rank ON codeintel_ranking_references_processed USING btree (graph_key, codeintel_ranking_reference_id);
 
-CREATE INDEX codeintel_ranking_references_upload_id ON codeintel_ranking_references USING btree (upload_id);
+CREATE INDEX codeintel_ranking_references_processed_reference_id ON codeintel_ranking_references_processed USING btree (codeintel_ranking_reference_id);
+
+CREATE INDEX codeowners_owners_reference ON codeowners_owners USING btree (reference);
+
+CREATE UNIQUE INDEX commit_authors_email_name ON commit_authors USING btree (email, name);
 
 CREATE INDEX configuration_policies_audit_logs_policy_id ON configuration_policies_audit_logs USING btree (policy_id);
 
@@ -5171,6 +5890,12 @@ CREATE INDEX event_logs_anonymous_user_id ON event_logs USING btree (anonymous_u
 
 CREATE UNIQUE INDEX event_logs_export_allowlist_event_name_idx ON event_logs_export_allowlist USING btree (event_name);
 
+CREATE INDEX event_logs_name_is_cody_active_event ON event_logs USING btree (iscodyactiveevent(name));
+
+CREATE INDEX event_logs_name_is_cody_explanation_event ON event_logs USING btree (iscodyexplanationevent(name));
+
+CREATE INDEX event_logs_name_is_cody_generation_event ON event_logs USING btree (iscodygenerationevent(name));
+
 CREATE INDEX event_logs_name_timestamp ON event_logs USING btree (name, "timestamp" DESC);
 
 CREATE INDEX event_logs_source ON event_logs USING btree (source);
@@ -5221,6 +5946,10 @@ CREATE INDEX feature_flag_overrides_user_id ON feature_flag_overrides USING btre
 
 CREATE INDEX finished_at_insights_query_runner_jobs_idx ON insights_query_runner_jobs USING btree (finished_at);
 
+CREATE INDEX github_app_installs_account_login ON github_app_installs USING btree (account_login);
+
+CREATE UNIQUE INDEX github_apps_app_id_slug_base_url_unique ON github_apps USING btree (app_id, slug, base_url);
+
 CREATE INDEX gitserver_relocator_jobs_state ON gitserver_relocator_jobs USING btree (state);
 
 CREATE INDEX gitserver_repo_size_bytes ON gitserver_repos USING btree (repo_size_bytes);
@@ -5255,6 +5984,8 @@ CREATE INDEX insights_query_runner_jobs_series_id_state ON insights_query_runner
 
 CREATE INDEX insights_query_runner_jobs_state_btree ON insights_query_runner_jobs USING btree (state);
 
+CREATE INDEX installation_id_idx ON github_app_installs USING btree (installation_id);
+
 CREATE UNIQUE INDEX kind_cloud_default ON external_services USING btree (kind, cloud_default) WHERE ((cloud_default = true) AND (deleted_at IS NULL));
 
 CREATE INDEX lsif_configuration_policies_repository_id ON lsif_configuration_policies USING btree (repository_id);
@@ -5267,6 +5998,8 @@ CREATE INDEX lsif_dependency_repos_blocked ON lsif_dependency_repos USING btree
 
 CREATE INDEX lsif_dependency_repos_last_checked_at ON lsif_dependency_repos USING btree (last_checked_at NULLS FIRST);
 
+CREATE INDEX lsif_dependency_repos_name_gin ON lsif_dependency_repos USING gin (name gin_trgm_ops);
+
 CREATE INDEX lsif_dependency_repos_name_id ON lsif_dependency_repos USING btree (name, id);
 
 CREATE INDEX lsif_dependency_repos_scheme_id ON lsif_dependency_repos USING btree (scheme, id);
@@ -5351,6 +6084,16 @@ CREATE INDEX outbound_webhook_payload_process_after_idx ON outbound_webhook_jobs
 
 CREATE INDEX outbound_webhooks_logs_status_code_idx ON outbound_webhook_logs USING btree (status_code);
 
+CREATE UNIQUE INDEX own_aggregate_recent_contribution_file_author ON own_aggregate_recent_contribution USING btree (changed_file_path_id, commit_author_id);
+
+CREATE UNIQUE INDEX own_aggregate_recent_view_viewer ON own_aggregate_recent_view USING btree (viewed_file_path_id, viewer_id);
+
+CREATE INDEX own_background_jobs_repo_id_idx ON own_background_jobs USING btree (repo_id);
+
+CREATE INDEX own_background_jobs_state_idx ON own_background_jobs USING btree (state);
+
+CREATE UNIQUE INDEX own_signal_configurations_name_uidx ON own_signal_configurations USING btree (name);
+
 CREATE UNIQUE INDEX package_repo_filters_unique_matcher_per_scheme ON package_repo_filters USING btree (scheme, matcher);
 
 CREATE INDEX package_repo_versions_blocked ON package_repo_versions USING btree (blocked);
@@ -5373,6 +6116,8 @@ CREATE UNIQUE INDEX permissions_unique_namespace_action ON permissions USING btr
 
 CREATE INDEX process_after_insights_query_runner_jobs_idx ON insights_query_runner_jobs USING btree (process_after);
 
+CREATE UNIQUE INDEX product_licenses_license_check_token_idx ON product_licenses USING btree (license_check_token);
+
 CREATE INDEX registry_extension_releases_registry_extension_id ON registry_extension_releases USING btree (registry_extension_id, release_tag, created_at DESC) WHERE (deleted_at IS NULL);
 
 CREATE INDEX registry_extension_releases_registry_extension_id_created_at ON registry_extension_releases USING btree (registry_extension_id, created_at) WHERE (deleted_at IS NULL);
@@ -5399,6 +6144,8 @@ CREATE INDEX repo_fork ON repo USING btree (fork);
 
 CREATE INDEX repo_hashed_name_idx ON repo USING btree (sha256((lower((name)::text))::bytea)) WHERE (deleted_at IS NULL);
 
+CREATE UNIQUE INDEX repo_id_perforce_changelist_id_unique ON repo_commits_changelists USING btree (repo_id, perforce_changelist_id);
+
 CREATE INDEX repo_is_not_blocked_idx ON repo USING btree (((blocked IS NULL)));
 
 CREATE INDEX repo_metadata_gin_idx ON repo USING gin (metadata);
@@ -5411,6 +6158,8 @@ CREATE INDEX repo_name_trgm ON repo USING gin (lower((name)::text) gin_trgm_ops)
 
 CREATE INDEX repo_non_deleted_id_name_idx ON repo USING btree (id, name) WHERE (deleted_at IS NULL);
 
+CREATE UNIQUE INDEX repo_paths_index_absolute_path ON repo_paths USING btree (repo_id, absolute_path);
+
 CREATE INDEX repo_permissions_unrestricted_true_idx ON repo_permissions USING btree (unrestricted) WHERE unrestricted;
 
 CREATE INDEX repo_private ON repo USING btree (private);
@@ -5547,6 +6296,8 @@ CREATE TRIGGER update_codeintel_path_ranks_statistics BEFORE UPDATE ON codeintel
 
 CREATE TRIGGER update_codeintel_path_ranks_updated_at BEFORE UPDATE ON codeintel_path_ranks FOR EACH ROW WHEN ((new.* IS DISTINCT FROM old.*)) EXECUTE FUNCTION update_codeintel_path_ranks_updated_at_column();
 
+CREATE TRIGGER update_own_aggregate_recent_contribution AFTER INSERT ON own_signal_recent_contribution FOR EACH ROW EXECUTE FUNCTION update_own_aggregate_recent_contribution();
+
 CREATE TRIGGER versions_insert BEFORE INSERT ON versions FOR EACH ROW EXECUTE FUNCTION versions_insert_row_trigger();
 
 ALTER TABLE ONLY access_requests
@@ -5561,6 +6312,24 @@ ALTER TABLE ONLY access_tokens
 ALTER TABLE ONLY aggregated_user_statistics
     ADD CONSTRAINT aggregated_user_statistics_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;
 
+ALTER TABLE ONLY assigned_owners
+    ADD CONSTRAINT assigned_owners_file_path_id_fkey FOREIGN KEY (file_path_id) REFERENCES repo_paths(id);
+
+ALTER TABLE ONLY assigned_owners
+    ADD CONSTRAINT assigned_owners_owner_user_id_fkey FOREIGN KEY (owner_user_id) REFERENCES users(id) ON DELETE CASCADE DEFERRABLE;
+
+ALTER TABLE ONLY assigned_owners
+    ADD CONSTRAINT assigned_owners_who_assigned_user_id_fkey FOREIGN KEY (who_assigned_user_id) REFERENCES users(id) ON DELETE SET NULL DEFERRABLE;
+
+ALTER TABLE ONLY assigned_teams
+    ADD CONSTRAINT assigned_teams_file_path_id_fkey FOREIGN KEY (file_path_id) REFERENCES repo_paths(id);
+
+ALTER TABLE ONLY assigned_teams
+    ADD CONSTRAINT assigned_teams_owner_team_id_fkey FOREIGN KEY (owner_team_id) REFERENCES teams(id) ON DELETE CASCADE DEFERRABLE;
+
+ALTER TABLE ONLY assigned_teams
+    ADD CONSTRAINT assigned_teams_who_assigned_team_id_fkey FOREIGN KEY (who_assigned_team_id) REFERENCES users(id) ON DELETE SET NULL DEFERRABLE;
+
 ALTER TABLE ONLY batch_changes
     ADD CONSTRAINT batch_changes_batch_spec_id_fkey FOREIGN KEY (batch_spec_id) REFERENCES batch_specs(id) DEFERRABLE;
 
@@ -5717,9 +6486,27 @@ ALTER TABLE ONLY cm_webhooks
 ALTER TABLE ONLY cm_webhooks
     ADD CONSTRAINT cm_webhooks_monitor_fkey FOREIGN KEY (monitor) REFERENCES cm_monitors(id) ON DELETE CASCADE;
 
+ALTER TABLE ONLY codeintel_autoindexing_exceptions
+    ADD CONSTRAINT codeintel_autoindexing_exceptions_repository_id_fkey FOREIGN KEY (repository_id) REFERENCES repo(id) ON DELETE CASCADE;
+
+ALTER TABLE ONLY codeintel_initial_path_ranks
+    ADD CONSTRAINT codeintel_initial_path_ranks_exported_upload_id_fkey FOREIGN KEY (exported_upload_id) REFERENCES codeintel_ranking_exports(id) ON DELETE CASCADE;
+
+ALTER TABLE ONLY codeintel_ranking_definitions
+    ADD CONSTRAINT codeintel_ranking_definitions_exported_upload_id_fkey FOREIGN KEY (exported_upload_id) REFERENCES codeintel_ranking_exports(id) ON DELETE CASCADE;
+
 ALTER TABLE ONLY codeintel_ranking_exports
     ADD CONSTRAINT codeintel_ranking_exports_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES lsif_uploads(id) ON DELETE SET NULL;
 
+ALTER TABLE ONLY codeintel_ranking_references
+    ADD CONSTRAINT codeintel_ranking_references_exported_upload_id_fkey FOREIGN KEY (exported_upload_id) REFERENCES codeintel_ranking_exports(id) ON DELETE CASCADE;
+
+ALTER TABLE ONLY codeowners_individual_stats
+    ADD CONSTRAINT codeowners_individual_stats_file_path_id_fkey FOREIGN KEY (file_path_id) REFERENCES repo_paths(id);
+
+ALTER TABLE ONLY codeowners_individual_stats
+    ADD CONSTRAINT codeowners_individual_stats_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES codeowners_owners(id);
+
 ALTER TABLE ONLY codeowners
     ADD CONSTRAINT codeowners_repo_id_fkey FOREIGN KEY (repo_id) REFERENCES repo(id) ON DELETE CASCADE;
 
@@ -5813,9 +6600,18 @@ ALTER TABLE ONLY vulnerability_affected_symbols
 ALTER TABLE ONLY vulnerability_matches
     ADD CONSTRAINT fk_vulnerability_affected_packages FOREIGN KEY (vulnerability_affected_package_id) REFERENCES vulnerability_affected_packages(id) ON DELETE CASCADE;
 
+ALTER TABLE ONLY github_app_installs
+    ADD CONSTRAINT github_app_installs_app_id_fkey FOREIGN KEY (app_id) REFERENCES github_apps(id) ON DELETE CASCADE;
+
+ALTER TABLE ONLY github_apps
+    ADD CONSTRAINT github_apps_webhook_id_fkey FOREIGN KEY (webhook_id) REFERENCES webhooks(id) ON DELETE SET NULL;
+
 ALTER TABLE ONLY gitserver_repos
     ADD CONSTRAINT gitserver_repos_repo_id_fkey FOREIGN KEY (repo_id) REFERENCES repo(id) ON DELETE CASCADE;
 
+ALTER TABLE ONLY gitserver_repos_sync_output
+    ADD CONSTRAINT gitserver_repos_sync_output_repo_id_fkey FOREIGN KEY (repo_id) REFERENCES repo(id) ON DELETE CASCADE;
+
 ALTER TABLE ONLY insights_query_runner_jobs_dependencies
     ADD CONSTRAINT insights_query_runner_jobs_dependencies_fk_job_id FOREIGN KEY (job_id) REFERENCES insights_query_runner_jobs(id) ON DELETE CASCADE;
 
@@ -5906,6 +6702,27 @@ ALTER TABLE ONLY outbound_webhooks
 ALTER TABLE ONLY outbound_webhooks
     ADD CONSTRAINT outbound_webhooks_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL;
 
+ALTER TABLE ONLY own_aggregate_recent_contribution
+    ADD CONSTRAINT own_aggregate_recent_contribution_changed_file_path_id_fkey FOREIGN KEY (changed_file_path_id) REFERENCES repo_paths(id);
+
+ALTER TABLE ONLY own_aggregate_recent_contribution
+    ADD CONSTRAINT own_aggregate_recent_contribution_commit_author_id_fkey FOREIGN KEY (commit_author_id) REFERENCES commit_authors(id);
+
+ALTER TABLE ONLY own_aggregate_recent_view
+    ADD CONSTRAINT own_aggregate_recent_view_viewed_file_path_id_fkey FOREIGN KEY (viewed_file_path_id) REFERENCES repo_paths(id);
+
+ALTER TABLE ONLY own_aggregate_recent_view
+    ADD CONSTRAINT own_aggregate_recent_view_viewer_id_fkey FOREIGN KEY (viewer_id) REFERENCES users(id) ON DELETE CASCADE DEFERRABLE;
+
+ALTER TABLE ONLY own_signal_recent_contribution
+    ADD CONSTRAINT own_signal_recent_contribution_changed_file_path_id_fkey FOREIGN KEY (changed_file_path_id) REFERENCES repo_paths(id);
+
+ALTER TABLE ONLY own_signal_recent_contribution
+    ADD CONSTRAINT own_signal_recent_contribution_commit_author_id_fkey FOREIGN KEY (commit_author_id) REFERENCES commit_authors(id);
+
+ALTER TABLE ONLY ownership_path_stats
+    ADD CONSTRAINT ownership_path_stats_file_path_id_fkey FOREIGN KEY (file_path_id) REFERENCES repo_paths(id);
+
 ALTER TABLE ONLY package_repo_versions
     ADD CONSTRAINT package_id_fk FOREIGN KEY (package_id) REFERENCES lsif_dependency_repos(id) ON DELETE CASCADE;
 
@@ -5936,9 +6753,21 @@ ALTER TABLE ONLY registry_extensions
 ALTER TABLE ONLY registry_extensions
     ADD CONSTRAINT registry_extensions_publisher_user_id_fkey FOREIGN KEY (publisher_user_id) REFERENCES users(id);
 
+ALTER TABLE ONLY repo_commits_changelists
+    ADD CONSTRAINT repo_commits_changelists_repo_id_fkey FOREIGN KEY (repo_id) REFERENCES repo(id) ON DELETE CASCADE DEFERRABLE;
+
+ALTER TABLE ONLY repo_embedding_job_stats
+    ADD CONSTRAINT repo_embedding_job_stats_job_id_fkey FOREIGN KEY (job_id) REFERENCES repo_embedding_jobs(id) ON DELETE CASCADE DEFERRABLE;
+
 ALTER TABLE ONLY repo_kvps
     ADD CONSTRAINT repo_kvps_repo_id_fkey FOREIGN KEY (repo_id) REFERENCES repo(id) ON DELETE CASCADE;
 
+ALTER TABLE ONLY repo_paths
+    ADD CONSTRAINT repo_paths_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES repo_paths(id);
+
+ALTER TABLE ONLY repo_paths
+    ADD CONSTRAINT repo_paths_repo_id_fkey FOREIGN KEY (repo_id) REFERENCES repo(id) ON DELETE CASCADE DEFERRABLE;
+
 ALTER TABLE ONLY role_permissions
     ADD CONSTRAINT role_permissions_permission_id_fkey FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE DEFERRABLE;
 
