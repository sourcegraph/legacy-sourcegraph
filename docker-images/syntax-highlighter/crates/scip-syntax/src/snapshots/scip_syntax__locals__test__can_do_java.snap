---
source: crates/scip-syntax/src/locals.rs
expression: dumped
---
  package com.hello;

  import com.hello1.TextContainer;
  import java.util.ArrayList;

  public class Text implements TextContainer {
//             ^^^^ definition local 1
      public Text(String chars) {
//           ^^^^ reference local 1
//                       ^^^^^ definition local 2
          super(chars);
//              ^^^^^ reference local 2
      }

      public Text append(String chars, int num) {
//           ^^^^ reference local 1
//                ^^^^^^ definition local 3
//                              ^^^^^ reference local 2
//                                         ^^^ definition local 4
          return new Text(this.chars + chars);
//                   ^^^^ reference local 1
//                             ^^^^^ reference local 2
//                                     ^^^^^ reference local 2
      }

      enum Flags {
//         ^^^^^ definition local 16
          Flags() {
//        ^^^^^ reference local 16
              this(1);
          }

          Flags(int bits) {
//                  ^^^^ definition local 5
              this.bits = bits;
//                 ^^^^ reference local 5
//                        ^^^^ reference local 5
          }
      }

      protected String toStringAttributes() {
//                     ^^^^^^^^^^^^^^^^^^ definition local 6
          return "text=" + getChars();
      }

      public void print(int i) {
//                ^^^^^ definition local 7
//                          ^ definition local 8
          for (int i = 0; i < 5; i++) {
//                 ^ definition local 17
//                        ^ reference local 17
//                               ^ reference local 17
            System.out.println(i);
//                             ^ reference local 17
          }
          System.out.println(i);
//                           ^ reference local 8
      }

      public interface Hello {
//                     ^^^^^ definition local 9

          public void func1(Hello t) {
//                    ^^^^^ definition local 10
//                          ^^^^^ reference local 9
//                                ^ definition local 11
              var newT = t;
//                ^^^^ definition local 12
//                       ^ reference local 11
          }

      }

      public void test() {
//                ^^^^ definition local 13
          ArrayList<Integer> numbers = new ArrayList<Integer>();
//                           ^^^^^^^ definition local 14
          numbers.add(5);
//        ^^^^^^^ reference local 14
          numbers.add(9);
//        ^^^^^^^ reference local 14
          numbers.add(8);
//        ^^^^^^^ reference local 14
          numbers.add(1);
//        ^^^^^^^ reference local 14
          numbers.forEach( (n) -> { System.out.println(n); } );
//        ^^^^^^^ reference local 14
//                          ^ definition local 15
//                                                     ^ reference local 15

      }
  }
