---
source: crates/scip-syntax/src/locals.rs
expression: dumped
---
  package com.hello;

  import com.hello1.TextContainer;
  import java.util.ArrayList;

  public class Text implements TextContainer {
//             ^^^^ definition local 1
      public Text(String chars) {
//           ^^^^ reference local 1
//                       ^^^^^ definition local 2
          super(chars);
//              ^^^^^ reference local 2
      }

      public Text append(String chars, int num) {
//           ^^^^ reference local 1
//                ^^^^^^ definition local 3
//                              ^^^^^ reference local 2
//                                         ^^^ definition local 4
          return new Text(this.chars + chars);
//                   ^^^^ reference local 1
//                             ^^^^^ reference local 2
//                                     ^^^^^ reference local 2
      }

      public record Person (String name, String address) {}
//                  ^^^^^^ definition local 5
//                                 ^^^^ definition local 6
//                                              ^^^^^^^ definition local 7

      enum Flags {
//         ^^^^^ definition local 17
          Flags() {
//        ^^^^^ reference local 17
              this(1);
          }

          Flags(int bits) {
//                  ^^^^ definition local 8
              this.bits = bits;
//                 ^^^^ reference local 8
//                        ^^^^ reference local 8
          }
      }

      protected String toStringAttributes() {
//                     ^^^^^^^^^^^^^^^^^^ definition local 9
          return "text=" + getChars();
      }

      public void print(int i) {
//                ^^^^^ definition local 10
//                          ^ definition local 11
          for (int i = 0; i < 5; i++) {
//                 ^ definition local 18
//                        ^ reference local 18
//                               ^ reference local 18
            System.out.println(i);
//                             ^ reference local 18
          }
          System.out.println(i);
//                           ^ reference local 11
      }

      public interface Hello {
//                     ^^^^^ definition local 12

          public void func1(Hello t) {
//                    ^^^^^ definition local 13
//                          ^^^^^ reference local 12
//                                ^ definition local 14
              var newT = t;
//                ^^^^ definition local 19
//                       ^ reference local 14
          }

      }

      public void blocks(int num) {
//                ^^^^^^ definition local 15
//                           ^^^ reference local 4
          {
              var num = 25;
//                ^^^ definition local 20
              {
                  var num = 100;
//                    ^^^ definition local 21
              }
          }
      }

      public void test() {
//                ^^^^ definition local 16
          ArrayList<Integer> numbers = new ArrayList<Integer>();
//                           ^^^^^^^ definition local 22
          numbers.add(5);
//        ^^^^^^^ reference local 22
          numbers.add(9);
//        ^^^^^^^ reference local 22
          numbers.add(8);
//        ^^^^^^^ reference local 22
          numbers.add(1);
//        ^^^^^^^ reference local 22
          numbers.forEach( (n) -> { System.out.println(n); } );
//        ^^^^^^^ reference local 22
//                          ^ definition local 23
//                                                     ^ reference local 23

          for(Integer num: numbers) {
//                    ^^^ definition local 24
//                         ^^^^^^^ reference local 22
              System.out.println(num);
//                               ^^^ reference local 24
          }

      }
  }
