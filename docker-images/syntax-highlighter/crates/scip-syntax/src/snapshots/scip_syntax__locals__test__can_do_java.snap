---
source: crates/scip-syntax/src/locals.rs
expression: dumped
---
  package com.hello;
  
  import java.lang.AutoCloseable;
  import java.util.*;
  import java.util.stream.*;
  
  public class Locals<Container> implements AutoCloseable {
//             ^^^^^^ definition local 1
//                    ^^^^^^^^^ definition local 2
  
   final String chars;
//              ^^^^^ definition local 3
  
   public Locals(String chars) {
//        ^^^^^^ reference local 1
//                      ^^^^^ reference local 3
    this.chars = chars;
//       ^^^^^ reference local 3
//               ^^^^^ reference local 3
   }
  
   public Locals append(String chars, int num, Locals text) {
//        ^^^^^^ reference local 1
//               ^^^^^^ definition local 4
//                             ^^^^^ definition local 5
//                                        ^^^ definition local 6
//                                             ^^^^^^ reference local 1
//                                                    ^^^^ definition local 7
    return new Locals(this.chars + chars + text.getChars());
//             ^^^^^^ reference local 1
//                         ^^^^^ reference local 5
//                                 ^^^^^ reference local 5
//                                         ^^^^ reference local 7
   }
  
   public String getChars() {
//               ^^^^^^^^ definition local 8
    return this.chars;
//              ^^^^^ reference local 3
   }
  
   public void close() {
//             ^^^^^ definition local 9
   }
  
   public static void create() {
//                    ^^^^^^ definition local 10
    var x = new Locals<Integer>("hello");
//      ^ definition local 11
//              ^^^^^^ reference local 1
   }
  
   public record Person(String name, String address) {
//               ^^^^^^ definition local 12
//                             ^^^^ definition local 13
//                                          ^^^^^^^ definition local 14
   }
  
   private class Binary<N extends Number> {
//               ^^^^^^ definition local 15
//                      ^ definition local 16
    final N val;
//        ^ reference local 16
//          ^^^ definition local 17
    public Binary(N value) {
//         ^^^^^^ reference local 15
//                ^ reference local 16
//                  ^^^^^ definition local 18
     this.val = value;
//        ^^^ reference local 17
//              ^^^^^ reference local 18
    }
   }
  
  
   enum Flags {
//      ^^^^^ definition local 19
    NODE_TEXT, FOR_HEADING_ID, NO_TRIM_REF_TEXT_START, NO_TRIM_REF_TEXT_END, ADD_SPACES_BETWEEN_NODES,;
//  ^^^^^^^^^ definition local 20
//             ^^^^^^^^^^^^^^ definition local 21
//                             ^^^^^^^^^^^^^^^^^^^^^^ definition local 22
//                                                     ^^^^^^^^^^^^^^^^^^^^ definition local 23
//                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^ definition local 24
  
    final int bits;
//            ^^^^ definition local 25
  
    Flags() {
//  ^^^^^ reference local 19
     this(1);
    }
  
    Flags(int bits) {
//  ^^^^^ reference local 19
//            ^^^^ reference local 25
     this.bits = bits;
//        ^^^^ reference local 25
//               ^^^^ reference local 25
    }
  
    public static boolean hasNodeText(Flags bits) {
//                        ^^^^^^^^^^^ definition local 26
//                                    ^^^^^ reference local 19
//                                          ^^^^ definition local 27
     return (bits.bits & Flags.NODE_TEXT.bits) != 0;
//           ^^^^ reference local 27
//                ^^^^ reference local 27
//                       ^^^^^ reference local 19
//                             ^^^^^^^^^ reference local 20
//                                       ^^^^ reference local 27
    }
   }
  
   protected String toStringAttributes() {
//                  ^^^^^^^^^^^^^^^^^^ definition local 28
    return "text=" + getChars();
   }
  
   public <T extends Container> List<T> fromArrayToList(T[] a) {
//         ^ definition local 29
//                   ^^^^^^^^^ reference local 2
//                                   ^ reference local 29
//                                      ^^^^^^^^^^^^^^^ definition local 30
//                                                      ^ reference local 29
//                                                          ^ definition local 31
    return Arrays.stream(a).collect(Collectors.toList());
//                       ^ reference local 31
   }
  
   // ? in (wildcard) node doesn't have its own node and
   // is not treated as a type identifier
   public void printList(List<? extends Container> a) {
//             ^^^^^^^^^ definition local 32
//                                      ^^^^^^^^^ reference local 2
//                                                 ^ definition local 33
    System.out.println(a);
//                     ^ reference local 33
   }
  
  
   public void print(int r) {
//             ^^^^^ definition local 34
//                       ^ definition local 35
    for (int i = 0; i < r; i++) {
//           ^ definition local 36
//                  ^ reference local 36
//                      ^ reference local 35
//                         ^ reference local 36
     System.out.println(i);
//                      ^ reference local 36
    }
    System.out.println(r);
//                     ^ reference local 35
   }
  
   public interface Hello {
//                  ^^^^^ definition local 37
    public void func1(Hello t);
//              ^^^^^ definition local 38
//                    ^^^^^ reference local 37
//                          ^ definition local 39
   }
  
   public class Hello2 {
//              ^^^^^^ definition local 40
    public Hello2(int t) {
//         ^^^^^^ reference local 40
//                    ^ definition local 41
     var newT = t;
//       ^^^^ definition local 42
//              ^ reference local 41
    }
   }
  
   public void blocks(int num) {
//             ^^^^^^ definition local 43
//                        ^^^ definition local 44
    {
     var num2 = 25;
//       ^^^^ definition local 45
     {
      var num3 = 100;
//        ^^^^ definition local 46
     }
    }
   }
  
   public void test() {
//             ^^^^ definition local 47
    ArrayList<Integer> numbers = new ArrayList<Integer>();
//                     ^^^^^^^ definition local 48
    numbers.add(5);
//  ^^^^^^^ reference local 48
    numbers.add(9);
//  ^^^^^^^ reference local 48
    numbers.add(8);
//  ^^^^^^^ reference local 48
    numbers.add(1);
//  ^^^^^^^ reference local 48
    numbers.forEach((n) -> {
//  ^^^^^^^ reference local 48
//                   ^ definition local 49
     System.out.println(n);
//                      ^ reference local 49
    });
  
    for (Integer num : numbers) {
//               ^^^ definition local 50
//                     ^^^^^^^ reference local 48
     System.out.println(num);
//                      ^^^ reference local 50
    }
  
   }
  }

