---
source: crates/scip-syntax/src/locals.rs
expression: dumped
---
  package com.hello;
  
  import java.lang.AutoCloseable;
  import java.util.*;
  import java.util.stream.*;
  
  public class Locals implements AutoCloseable {
//             ^^^^^^ definition local 1
  
   final String chars;
//              ^^^^^ definition local 2
  
   public Locals(String chars) {
//        ^^^^^^ reference local 1
//                      ^^^^^ reference local 2
    this.chars = chars;
//       ^^^^^ reference local 2
//               ^^^^^ reference local 2
   }
  
   public Locals append(String chars, int num, Locals text) {
//        ^^^^^^ reference local 1
//               ^^^^^^ definition local 3
//                             ^^^^^ definition local 4
//                                        ^^^ definition local 5
//                                             ^^^^^^ reference local 1
//                                                    ^^^^ definition local 6
    return new Locals(this.chars + chars + text.getChars());
//             ^^^^^^ reference local 1
//                         ^^^^^ reference local 4
//                                 ^^^^^ reference local 4
//                                         ^^^^ reference local 6
   }
  
   public String getChars() {
//               ^^^^^^^^ definition local 7
    return this.chars;
//              ^^^^^ reference local 2
   }
  
   public void close() {
//             ^^^^^ definition local 8
   }
  
   public record Person(String name, String address) {
//               ^^^^^^ definition local 9
//                             ^^^^ definition local 10
//                                          ^^^^^^^ definition local 11
   }
  
   enum Flags {
//      ^^^^^ definition local 12
    NODE_TEXT, FOR_HEADING_ID, NO_TRIM_REF_TEXT_START, NO_TRIM_REF_TEXT_END, ADD_SPACES_BETWEEN_NODES,;
//  ^^^^^^^^^ definition local 13
//             ^^^^^^^^^^^^^^ definition local 14
//                             ^^^^^^^^^^^^^^^^^^^^^^ definition local 15
//                                                     ^^^^^^^^^^^^^^^^^^^^ definition local 16
//                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^ definition local 17
  
    final int bits;
//            ^^^^ definition local 18
  
    Flags() {
//  ^^^^^ reference local 12
     this(1);
    }
  
    Flags(int bits) {
//  ^^^^^ reference local 12
//            ^^^^ reference local 18
     this.bits = bits;
//        ^^^^ reference local 18
//               ^^^^ reference local 18
    }
  
    public static boolean hasNodeText(Flags bits) {
//                        ^^^^^^^^^^^ definition local 19
//                                    ^^^^^ reference local 12
//                                          ^^^^ definition local 20
     return (bits.bits & Flags.NODE_TEXT.bits) != 0;
//           ^^^^ reference local 20
//                ^^^^ reference local 20
//                       ^^^^^ reference local 12
//                             ^^^^^^^^^ reference local 13
//                                       ^^^^ reference local 20
    }
   }
  
   protected String toStringAttributes() {
//                  ^^^^^^^^^^^^^^^^^^ definition local 21
    return "text=" + getChars();
   }
  
   public <T> List<T> fromArrayToList(T[] a) {
//                    ^^^^^^^^^^^^^^^ definition local 22
//                                        ^ definition local 23
    return Arrays.stream(a).collect(Collectors.toList());
//                       ^ reference local 23
   }
  
   public void print(int r) {
//             ^^^^^ definition local 24
//                       ^ definition local 25
    for (int i = 0; i < r; i++) {
//           ^ definition local 26
//                  ^ reference local 26
//                      ^ reference local 25
//                         ^ reference local 26
     System.out.println(i);
//                      ^ reference local 26
    }
    System.out.println(r);
//                     ^ reference local 25
   }
  
   public interface Hello {
//                  ^^^^^ definition local 27
    public void func1(Hello t);
//              ^^^^^ definition local 28
//                    ^^^^^ reference local 27
//                          ^ definition local 29
   }
  
   public class Hello2 {
//              ^^^^^^ definition local 30
    public Hello2(int t) {
//         ^^^^^^ reference local 30
//                    ^ definition local 31
     var newT = t;
//       ^^^^ definition local 32
//              ^ reference local 31
    }
   }
  
   public void blocks(int num) {
//             ^^^^^^ definition local 33
//                        ^^^ definition local 34
    {
     var num2 = 25;
//       ^^^^ definition local 35
     {
      var num3 = 100;
//        ^^^^ definition local 36
     }
    }
   }
  
   public void test() {
//             ^^^^ definition local 37
    ArrayList<Integer> numbers = new ArrayList<Integer>();
//                     ^^^^^^^ definition local 38
    numbers.add(5);
//  ^^^^^^^ reference local 38
    numbers.add(9);
//  ^^^^^^^ reference local 38
    numbers.add(8);
//  ^^^^^^^ reference local 38
    numbers.add(1);
//  ^^^^^^^ reference local 38
    numbers.forEach((n) -> {
//  ^^^^^^^ reference local 38
//                   ^ definition local 39
     System.out.println(n);
//                      ^ reference local 39
    });
  
    for (Integer num : numbers) {
//               ^^^ definition local 40
//                     ^^^^^^^ reference local 38
     System.out.println(num);
//                      ^^^ reference local 40
    }
  
   }
  }

