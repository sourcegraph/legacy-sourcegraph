---
source: crates/scip-syntax/src/locals.rs
expression: dumped
---
  package main
  
  import (
   "fmt"
  )
  
  // Not actually local
  var local = 10
  
  func main() {
   local = 20
   local := 5
// ^^^^^ definition local 1
   something := func(unrelated int) int {
// ^^^^^^^^^ definition local 2
//                   ^^^^^^^^^ definition local 3
    superNested := func(deeplyNested int) int {
//  ^^^^^^^^^^^ definition local 4
//                      ^^^^^^^^^^^^ definition local 5
     return local + unrelated + deeplyNested
//          ^^^^^ reference local 1
//                  ^^^^^^^^^ reference local 3
//                              ^^^^^^^^^^^^ reference local 5
    }
  
    overwriteName := func(local int) int {
//  ^^^^^^^^^^^^^ definition local 6
//                        ^^^^^ definition local 7
     return local + unrelated
//          ^^^^^ reference local 7
//                  ^^^^^^^^^ reference local 3
    }
  
    return superNested(1) + overwriteName(1)
//         ^^^^^^^^^^^ reference local 4
//                          ^^^^^^^^^^^^^ reference local 6
   }
  
   println(local, something)
//         ^^^^^ reference local 1
//                ^^^^^^^^^ reference local 2
  }
  
  func Another(local int) int {
//             ^^^^^ definition local 8
   if local := 9; local < 0 {
//    ^^^^^ definition local 9
//                ^^^^^ reference local 9
    fmt.Println(local, "is negative")
//              ^^^^^ reference local 9
   } else if local < 10 {
//           ^^^^^ reference local 9
    fmt.Println(local, "has 1 digit")
//              ^^^^^ reference local 9
   } else {
    fmt.Println(local, "has multiple digits")
//              ^^^^^ reference local 9
   }
  
   switch x := 0; x {
//        ^ definition local 10
//                ^ reference local 10
   case 0:
    x := "local x"
//  ^ definition local 11
    fmt.Println(x)
//              ^ reference local 11
   case 1:
    fmt.Println(x)
//              ^ reference local 10
   case x:
//      ^ reference local 10
    fmt.Println("something")
   }
  
   return local
//        ^^^^^ reference local 8
  }

