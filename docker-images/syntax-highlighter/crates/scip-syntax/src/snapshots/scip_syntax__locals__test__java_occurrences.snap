---
source: crates/scip-syntax/src/locals.rs
expression: dumped
---
  package com.hello;
  
  import java.lang.AutoCloseable;
  import java.util.*;
  import java.util.stream.*;
  
  public class Locals<Container> implements AutoCloseable {
//                    ^^^^^^^^^ definition local 1
  
   final String chars;
  
   public Locals(String chars) {
//                      ^^^^^ definition local 2
    this.chars = chars;
//               ^^^^^ reference local 2
   }
  
   public Locals append(String chars, int num, Locals text) {
//                             ^^^^^ definition local 3
//                                        ^^^ definition local 4
//                                                    ^^^^ definition local 5
    return new Locals(this.chars + chars + text.getChars());
//                                 ^^^^^ reference local 3
//                                         ^^^^ reference local 5
   }
  
   public String getChars() {
    return this.chars;
   }
  
   public void close() {
   }
  
   public static void create() {
    var x = new Locals<Integer>("hello");
//      ^ definition local 6
   }
  
   public record Person(String name, String address) {
//                             ^^^^ definition local 7
//                                          ^^^^^^^ definition local 8
   }
  
   private class Binary<N extends Number> {
//                      ^ definition local 9
    final N val;
//        ^ reference local 9
  
    public Binary(N value) {
//                ^ reference local 9
//                  ^^^^^ definition local 10
     this.val = value;
//              ^^^^^ reference local 10
    }
   }
  
   public void checks(Object person) {
//                           ^^^^^^ definition local 11
    if (person instanceof Person(String x, String y)) {
//      ^^^^^^ reference local 11
//                                      ^ definition local 12
//                                                ^ definition local 13
     System.out.println(x + "," + y);
//                      ^ reference local 12
//                                ^ reference local 13
      }
   }
  
   enum Flags {
    NODE_TEXT, FOR_HEADING_ID, NO_TRIM_REF_TEXT_START, NO_TRIM_REF_TEXT_END, ADD_SPACES_BETWEEN_NODES,;
  
    final int bits;
  
    Flags() {
     this(1);
    }
  
    Flags(int bits) {
//            ^^^^ definition local 14
     this.bits = bits;
//               ^^^^ reference local 14
    }
  
    public static boolean hasNodeText(Flags bits) {
//                                          ^^^^ definition local 15
     return (bits.bits & Flags.NODE_TEXT.bits) != 0;
//           ^^^^ reference local 15
    }
   }
  
   protected String toStringAttributes() {
    return "text=" + getChars();
   }
  
   public <T extends Container> List<T> fromArrayToList(T[] a) {
//         ^ definition local 16
//                   ^^^^^^^^^ reference local 1
//                                   ^ reference local 16
//                                                      ^ reference local 16
//                                                          ^ definition local 17
    return Arrays.stream(a).collect(Collectors.toList());
//                       ^ reference local 17
   }
  
   // ? in (wildcard) node doesn't have its own node and
   // is not treated as a type identifier
   public void printList(List<? extends Container> a) {
//                                      ^^^^^^^^^ reference local 1
//                                                 ^ definition local 18
    System.out.println(a);
//                     ^ reference local 18
   }
  
   public void print(int r) {
//                       ^ definition local 19
    for (int i = 0; i < r; i++) {
//           ^ definition local 20
//                  ^ reference local 20
//                      ^ reference local 19
//                         ^ reference local 20
     System.out.println(i);
//                      ^ reference local 20
    }
    System.out.println(r);
//                     ^ reference local 19
   }
  
   public interface Hello {
    public void func1(Hello t);
//                          ^ definition local 21
   }
  
   public class Hello2 {
    public Hello2(int t) {
//                    ^ definition local 22
     var newT = t;
//       ^^^^ definition local 23
//              ^ reference local 22
    }
   }
  
   public void blocks(int num) {
//                        ^^^ definition local 24
    {
     var num2 = 25;
//       ^^^^ definition local 25
     {
      var num3 = 100;
//        ^^^^ definition local 26
     }
    }
   }
  
   public void test() {
    ArrayList<Integer> numbers = new ArrayList<Integer>();
//                     ^^^^^^^ definition local 27
    numbers.add(5);
//  ^^^^^^^ reference local 27
    numbers.add(9);
//  ^^^^^^^ reference local 27
    numbers.add(8);
//  ^^^^^^^ reference local 27
    numbers.add(1);
//  ^^^^^^^ reference local 27
    numbers.forEach((n) -> {
//  ^^^^^^^ reference local 27
//                   ^ definition local 28
     System.out.println(n);
//                      ^ reference local 28
    });
  
    for (Integer num : numbers) {
//               ^^^ definition local 29
//                     ^^^^^^^ reference local 27
     System.out.println(num);
//                      ^^^ reference local 29
    }
  
   }
  }

