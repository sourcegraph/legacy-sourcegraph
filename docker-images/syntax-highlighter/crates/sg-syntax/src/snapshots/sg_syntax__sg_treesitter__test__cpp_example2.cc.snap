---
source: crates/sg-syntax/src/sg_treesitter.rs
expression: "dump_document(&document, &contents)"
---
  // Stripped down from llvm/ADT/SmallSet.h (the code doesn't make sense)
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment 
  
  //===----------------------------------------------------------------------===//
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment 
  ///
//^^^ Comment 
  /// \file
//^^^^^^^^^ Comment 
  /// This file defines the SmallSet class.
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment 
  ///
//^^^ Comment 
  //===----------------------------------------------------------------------===//
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment 
  
  #ifndef BAD_SMALLSET_H
//^^^^^^^ Keyword 
//        ^^^^^^^^^^^^^^ Identifier 
  #define BAD_SMALLSET_H
//^^^^^^^ Keyword 
//        ^^^^^^^^^^^^^^ Identifier 
  
  #include "llvm/ADT/SmallPtrSet.h"
//^^^^^^^^ Keyword 
//         ^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
  #include <utility>
//^^^^^^^^ Keyword 
//         ^^^^^^^^^ StringLiteral 
  
  namespace llvm {
//^^^^^^^^^ Keyword 
//          ^^^^ Identifier 
  
  /// Doc comment
//^^^^^^^^^^^^^^^ Comment 
  template <typename T, unsigned N, const char *P, typename C = std::less<T>>
//^^^^^^^^ Keyword 
//         ^ IdentifierOperator 
//          ^^^^^^^^ Keyword 
//                   ^ IdentifierType 
//                      ^^^^^^^^ IdentifierBuiltinType 
//                               ^ Identifier 
//                                  ^^^^^ Keyword 
//                                        ^^^^ IdentifierBuiltinType 
//                                             ^ IdentifierOperator 
//                                              ^ Identifier 
//                                                 ^^^^^^^^ Keyword 
//                                                          ^ IdentifierType 
//                                                            ^ IdentifierOperator 
//                                                              ^^^ IdentifierNamespace 
//                                                                   ^^^^ IdentifierType 
//                                                                       ^ IdentifierOperator 
//                                                                        ^ IdentifierType 
//                                                                         ^ IdentifierOperator 
//                                                                          ^ IdentifierOperator 
  class SmallSetIterator
//^^^^^ Keyword 
//      ^^^^^^^^^^^^^^^^ IdentifierType 
      : public iterator_facade_base<SmallSetIterator<T, N>,
//      ^^^^^^ Keyword 
//             ^^^^^^^^^^^^^^^^^^^^ IdentifierType 
//                                 ^ IdentifierOperator 
//                                  ^^^^^^^^^^^^^^^^ IdentifierType 
//                                                  ^ IdentifierOperator 
//                                                   ^ IdentifierType 
//                                                      ^ IdentifierType 
//                                                       ^ IdentifierOperator 
                                    std::forward_iterator_tag, T> {
//                                  ^^^ IdentifierNamespace 
//                                       ^^^^^^^^^^^^^^^^^^^^ IdentifierType 
//                                                             ^ IdentifierType 
//                                                              ^ IdentifierOperator 
  private:
//^^^^^^^ Keyword 
    using SetIterTy = typename std::set<T, C>::const_iterator;
//  ^^^^^ Keyword 
//        ^^^^^^^^^ IdentifierType 
//                  ^ IdentifierOperator 
//                    ^^^^^^^^ Keyword 
//                             ^^^ IdentifierNamespace 
//                                  ^^^ IdentifierType 
//                                     ^ IdentifierOperator 
//                                      ^ IdentifierType 
//                                         ^ IdentifierType 
//                                          ^ IdentifierOperator 
//                                             ^^^^^^^^^^^^^^ IdentifierType 
    using VecIterTy = typename SmallVector<T, N>::const_iterator;
//  ^^^^^ Keyword 
//        ^^^^^^^^^ IdentifierType 
//                  ^ IdentifierOperator 
//                    ^^^^^^^^ Keyword 
//                             ^^^^^^^^^^^ IdentifierType 
//                                        ^ IdentifierOperator 
//                                         ^ IdentifierType 
//                                            ^ IdentifierType 
//                                             ^ IdentifierOperator 
//                                                ^^^^^^^^^^^^^^ IdentifierType 
    using SelfTy = SmallSetIterator<T, N, C>;
//  ^^^^^ Keyword 
//        ^^^^^^ IdentifierType 
//               ^ IdentifierOperator 
//                 ^^^^^^^^^^^^^^^^ IdentifierType 
//                                 ^ IdentifierOperator 
//                                  ^ IdentifierType 
//                                     ^ IdentifierType 
//                                        ^ IdentifierType 
//                                         ^ IdentifierOperator 
  
    // Non-doc comment
//  ^^^^^^^^^^^^^^^^^^ Comment 
    union {
//  ^^^^^ Keyword 
      SetIterTy SetIter;
//    ^^^^^^^^^ IdentifierType 
//              ^^^^^^^ IdentifierAttribute 
      VecIterTy VecIter;
//    ^^^^^^^^^ IdentifierType 
//              ^^^^^^^ IdentifierAttribute 
    };
  
    bool isSmall;
//  ^^^^ IdentifierBuiltinType 
//       ^^^^^^^ IdentifierAttribute 
  
  public:
//^^^^^^ Keyword 
    SmallSetIterator(SetIterTy SetIter) : SetIter(SetIter), isSmall(false) {}
//  ^^^^^^^^^^^^^^^^ IdentifierFunction 
//                   ^^^^^^^^^ IdentifierType 
//                             ^^^^^^^ Identifier 
//                                        ^^^^^^^ IdentifierAttribute 
//                                                ^^^^^^^ Identifier 
//                                                          ^^^^^^^ IdentifierAttribute 
//                                                                  ^^^^^ BooleanLiteral 
  
    ~SmallSetIterator() {
//   ^^^^^^^^^^^^^^^^ IdentifierFunction 
      if (isSmall)
//    ^^ Keyword 
//        ^^^^^^^ Identifier 
        VecIter.~VecIterTy();
//      ^^^^^^^ Identifier 
//               ^^^^^^^^^ IdentifierFunction 
    }
  
    SmallSetIterator(SmallSetIterator &&Other) : isSmall(Other.isSmall) {
//  ^^^^^^^^^^^^^^^^ IdentifierFunction 
//                   ^^^^^^^^^^^^^^^^ IdentifierType 
//                                    ^^ IdentifierOperator 
//                                      ^^^^^ Identifier 
//                                               ^^^^^^^ IdentifierAttribute 
//                                                       ^^^^^ Identifier 
//                                                             ^^^^^^^ IdentifierAttribute 
      if (isSmall)
//    ^^ Keyword 
//        ^^^^^^^ Identifier 
        VecIter = std::move(Other.VecIter);
//      ^^^^^^^ Identifier 
//              ^ IdentifierOperator 
//                ^^^ IdentifierNamespace 
//                     ^^^^ Identifier 
//                          ^^^^^ Identifier 
//                                ^^^^^^^ IdentifierAttribute 
      else
//    ^^^^ Keyword 
        // In-code comment
//      ^^^^^^^^^^^^^^^^^^ Comment 
        new (&SetIter) SetIterTy(std::move(Other.SetIter));
//      ^^^ Keyword 
//           ^ IdentifierOperator 
//            ^^^^^^^ Identifier 
//                     ^^^^^^^^^ IdentifierType 
//                               ^^^ IdentifierNamespace 
//                                    ^^^^ Identifier 
//                                         ^^^^^ Identifier 
//                                               ^^^^^^^ IdentifierAttribute 
    }
  
    SmallSetIterator& operator=(const SmallSetIterator& Other) {
//  ^^^^^^^^^^^^^^^^ IdentifierType 
//                  ^ IdentifierOperator 
//                    ^^^^^^^^ Keyword 
//                            ^ IdentifierOperator 
//                              ^^^^^ Keyword 
//                                    ^^^^^^^^^^^^^^^^ IdentifierType 
//                                                    ^ IdentifierOperator 
//                                                      ^^^^^ Identifier 
      return *this;
//    ^^^^^^ Keyword 
//           ^ IdentifierOperator 
//            ^^^^ IdentifierBuiltin 
    }
  
     bool operator==(const SmallSetIterator &RHS) const {
//   ^^^^ IdentifierBuiltinType 
//        ^^^^^^^^ Keyword 
//                ^^ IdentifierOperator 
//                   ^^^^^ Keyword 
//                         ^^^^^^^^^^^^^^^^ IdentifierType 
//                                          ^ IdentifierOperator 
//                                           ^^^ Identifier 
//                                                ^^^^^ Keyword 
      if (isSmall != RHS.isSmall)
//    ^^ Keyword 
//        ^^^^^^^ Identifier 
//                ^^ IdentifierOperator 
//                   ^^^ Identifier 
//                       ^^^^^^^ IdentifierAttribute 
        return false;
//      ^^^^^^ Keyword 
//             ^^^^^ BooleanLiteral 
      if (isSmall)
//    ^^ Keyword 
//        ^^^^^^^ Identifier 
        return VecIter == RHS.VecIter;
//      ^^^^^^ Keyword 
//             ^^^^^^^ Identifier 
//                     ^^ IdentifierOperator 
//                        ^^^ Identifier 
//                            ^^^^^^^ IdentifierAttribute 
    }
  
    SmallSetIterator &operator++() {
//  ^^^^^^^^^^^^^^^^ IdentifierType 
//                   ^ IdentifierOperator 
//                    ^^^^^^^^ Keyword 
//                            ^^ IdentifierOperator 
      SetIter++;
//    ^^^^^^^ Identifier 
//           ^^ IdentifierOperator 
      return *this;
//    ^^^^^^ Keyword 
//           ^ IdentifierOperator 
//            ^^^^ IdentifierBuiltin 
    }
  
    const T &operator*() const { return isSmall ? *VecIter : *SetIter; }
//  ^^^^^ Keyword 
//        ^ IdentifierType 
//          ^ IdentifierOperator 
//           ^^^^^^^^ Keyword 
//                   ^ IdentifierOperator 
//                       ^^^^^ Keyword 
//                               ^^^^^^ Keyword 
//                                      ^^^^^^^ Identifier 
//                                                ^ IdentifierOperator 
//                                                 ^^^^^^^ Identifier 
//                                                           ^ IdentifierOperator 
//                                                            ^^^^^^^ Identifier 
    
    static_assert(N <= 32); // C++17 extension
//  ^^^^^^^^^^^^^ IdentifierBuiltin 
//                ^ Identifier 
//                     ^^ NumericLiteral 
//                          ^^^^^^^^^^^^^^^^^^ Comment 
    static_assert(N <= 32, "N should be small");
//  ^^^^^^^^^^^^^ IdentifierBuiltin 
//                ^ Identifier 
//                     ^^ NumericLiteral 
//                         ^^^^^^^^^^^^^^^^^^^ StringLiteral 
  };
  
  class SmallSet {
//^^^^^ Keyword 
//      ^^^^^^^^ IdentifierType 
    SmallVector<T, N> Vector;
//  ^^^^^^^^^^^ IdentifierType 
//             ^ IdentifierOperator 
//              ^ IdentifierType 
//                 ^ IdentifierType 
//                  ^ IdentifierOperator 
//                    ^^^^^^ IdentifierAttribute 
    std::set<T, C> Set;
//  ^^^ IdentifierNamespace 
//       ^^^ IdentifierType 
//          ^ IdentifierOperator 
//           ^ IdentifierType 
//              ^ IdentifierType 
//               ^ IdentifierOperator 
//                 ^^^ IdentifierAttribute 
  
  public:
//^^^^^^ Keyword 
    [[nodiscard]] bool empty() const { return Vector.empty(); }
//    ^^^^^^^^^ Identifier 
//                ^^^^ IdentifierBuiltinType 
//                     ^^^^^ IdentifierFunction 
//                             ^^^^^ Keyword 
//                                     ^^^^^^ Keyword 
//                                            ^^^^^^ Identifier 
//                                                   ^^^^^ IdentifierFunction 
  
    std::pair<const_iterator, bool> insert(const T &V) {
//  ^^^ IdentifierNamespace 
//       ^^^^ IdentifierType 
//           ^ IdentifierOperator 
//            ^^^^^^^^^^^^^^ IdentifierType 
//                            ^^^^ IdentifierBuiltinType 
//                                ^ IdentifierOperator 
//                                  ^^^^^^ IdentifierFunction 
//                                         ^^^^^ Keyword 
//                                               ^ IdentifierType 
//                                                 ^ IdentifierOperator 
//                                                  ^ Identifier 
      if (!isSmall()) {
//    ^^ Keyword 
//         ^^^^^^^ IdentifierFunction 
        auto [I, Inserted] = Set.insert(V);
//      ^^^^ Keyword 
//            ^ Identifier 
//               ^^^^^^^^ Identifier 
//                         ^ IdentifierOperator 
//                           ^^^ Identifier 
//                               ^^^^^^ IdentifierFunction 
//                                      ^ Identifier 
        return std::make_pair(const_iterator(I), Inserted);
//      ^^^^^^ Keyword 
//             ^^^ IdentifierNamespace 
//                  ^^^^^^^^^ Identifier 
//                            ^^^^^^^^^^^^^^ IdentifierFunction 
//                                           ^ Identifier 
//                                               ^^^^^^^^ Identifier 
      }
    }
  
    template <typename IterT>
//  ^^^^^^^^ Keyword 
//           ^ IdentifierOperator 
//            ^^^^^^^^ Keyword 
//                     ^^^^^ IdentifierType 
//                          ^ IdentifierOperator 
    void insert(IterT I, IterT E) {
//  ^^^^ IdentifierBuiltinType 
//       ^^^^^^ IdentifierFunction 
//              ^^^^^ IdentifierType 
//                    ^ Identifier 
//                       ^^^^^ IdentifierType 
//                             ^ Identifier 
      for (; I != E; ++I)
//    ^^^ Keyword 
//           ^ Identifier 
//             ^^ IdentifierOperator 
//                ^ Identifier 
//                   ^^ IdentifierOperator 
//                     ^ Identifier 
        insert(*I);
//      ^^^^^^ IdentifierFunction 
//             ^ IdentifierOperator 
//              ^ Identifier 
    }
  
    const_iterator begin() const {
//  ^^^^^^^^^^^^^^ IdentifierType 
//                 ^^^^^ IdentifierFunction 
//                         ^^^^^ Keyword 
      if (isSmall())
//    ^^ Keyword 
//        ^^^^^^^ IdentifierFunction 
        return {Vector.begin()};
//      ^^^^^^ Keyword 
//              ^^^^^^ Identifier 
//                     ^^^^^ IdentifierFunction 
      return {Set.begin()};
//    ^^^^^^ Keyword 
//            ^^^ Identifier 
//                ^^^^^ IdentifierFunction 
    }
  };
  
  #endif // BAD_SMALLSET_H
//^^^^^^ Keyword 
//      ^^^^^^^^^^^^^^^^^^ Comment 

