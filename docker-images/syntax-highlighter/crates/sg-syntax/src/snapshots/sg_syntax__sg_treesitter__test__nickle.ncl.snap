---
source: crates/sg-syntax/src/sg_treesitter.rs
expression: "dump_document(&document, &contents)"
---
  let range
//^^^ Keyword 
//    ^^^^^ Identifier 
    | doc "Generate an array of integers in the range [`start`, `end`)."
//  ^ PunctuationDelimiter 
//    ^^^ Keyword 
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
    | Number -> Number -> Array Number
//  ^ PunctuationDelimiter 
//    ^^^^^^ Identifier 
//           ^^ PunctuationDelimiter 
//              ^^^^^^ Identifier 
//                    ^ IdentifierType 
//                     ^^ PunctuationDelimiter 
//                       ^ IdentifierType 
//                        ^^^^^ IdentifierBuiltinType 
//                             ^ IdentifierType 
//                              ^^^^^^ Identifier 
    = fun start end =>
//  ^ PunctuationDelimiter 
//    ^^^ Keyword 
//        ^^^^^ IdentifierParameter 
//              ^^^ Identifier 
//                  ^^ IdentifierOperator 
      if end <= start then
//    ^^ Keyword 
//       ^^^ Identifier 
//           ^^ IdentifierOperator 
//              ^^^^^ Identifier 
//                    ^^^^ Keyword 
        []
      else
//    ^^^^ Keyword 
        array.generate (fun x => x + start) (end - start)
//      ^^^^^ Identifier 
//           ^ PunctuationDelimiter 
//            ^^^^^^^^ IdentifierFunction 
//                      ^^^ Keyword 
//                          ^ IdentifierParameter 
//                            ^^ IdentifierOperator 
//                               ^ Identifier 
//                                 ^ IdentifierOperator 
//                                   ^^^^^ Identifier 
//                                           ^^^ Identifier 
//                                               ^ PunctuationDelimiter 
//                                                 ^^^^^ Identifier 
  in
//^^ Keyword 
  
  let is_prime
//^^^ Keyword 
//    ^^^^^^^^ Identifier 
    | doc "Returns true if the argument is a prime number."
//  ^ PunctuationDelimiter 
//    ^^^ Keyword 
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
    = fun x => x > 1 && array.all (fun d => x % d != 0) (range 2 (x - 1))
//  ^ PunctuationDelimiter 
//    ^^^ Keyword 
//        ^ IdentifierParameter 
//          ^^ IdentifierOperator 
//             ^ Identifier 
//               ^ IdentifierOperator 
//                 ^ NumericLiteral 
//                   ^^ IdentifierOperator 
//                      ^^^^^ Identifier 
//                           ^ PunctuationDelimiter 
//                            ^^^ IdentifierFunction 
//                                 ^^^ Keyword 
//                                     ^ IdentifierParameter 
//                                       ^^ IdentifierOperator 
//                                          ^ Identifier 
//                                            ^ IdentifierOperator 
//                                              ^ Identifier 
//                                                ^^ IdentifierOperator 
//                                                   ^ NumericLiteral 
//                                                       ^^^^^ Identifier 
//                                                             ^ NumericLiteral 
//                                                                ^ Identifier 
//                                                                  ^ PunctuationDelimiter 
//                                                                    ^ NumericLiteral 
  in
//^^ Keyword 
  
  let Prime = contract.from_predicate is_prime in
//^^^ Keyword 
//    ^^^^^ Identifier 
//          ^ PunctuationDelimiter 
//            ^^^^^^^^ Identifier 
//                    ^ PunctuationDelimiter 
//                     ^^^^^^^^^^^^^^ IdentifierFunction 
//                                    ^^^^^^^^ Identifier 
//                                             ^^ Keyword 
  
  let primes
//^^^ Keyword 
//    ^^^^^^ Identifier 
    | doc "Generate `max` primes using Sieve of Eratosthenes."
//  ^ PunctuationDelimiter 
//    ^^^ Keyword 
//         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ StringLiteral 
    | Number -> Array Prime
//  ^ PunctuationDelimiter 
//    ^^^^^^ Identifier 
//           ^^ PunctuationDelimiter 
//              ^^^^^ IdentifierBuiltinType 
//                   ^ IdentifierType 
//                    ^^^^^ Identifier 
    = fun max =>
//  ^ PunctuationDelimiter 
//    ^^^ Keyword 
//        ^^^ IdentifierParameter 
//            ^^ IdentifierOperator 
      let limit = number.pow max (1 / 2) in # sqrt(max)
//    ^^^ Keyword 
//        ^^^^^ Identifier 
//              ^ PunctuationDelimiter 
//                ^^^^^^ Identifier 
//                      ^ PunctuationDelimiter 
//                       ^^^ IdentifierFunction 
//                           ^^^ Identifier 
//                                ^ NumericLiteral 
//                                  ^ IdentifierOperator 
//                                    ^ NumericLiteral 
//                                       ^^ Keyword 
//                                          ^^^^^^^^^^^ Comment 
      let drop_multiples = fun x xs =>
//    ^^^ Keyword 
//        ^^^^^^^^^^^^^^ Identifier 
//                       ^ PunctuationDelimiter 
//                         ^^^ Keyword 
//                             ^ IdentifierParameter 
//                               ^^ Identifier 
//                                  ^^ IdentifierOperator 
        let to_drop = max
//      ^^^ Keyword 
//          ^^^^^^^ Identifier 
//                  ^ PunctuationDelimiter 
//                    ^^^ Identifier 
          |> array.generate (fun y => (y + 2) * x)
//        ^^ IdentifierOperator 
//           ^^^^^ Identifier 
//                ^ PunctuationDelimiter 
//                 ^^^^^^^^ IdentifierFunction 
//                           ^^^ Keyword 
//                               ^ IdentifierParameter 
//                                 ^^ IdentifierOperator 
//                                     ^ Identifier 
//                                       ^ PunctuationDelimiter 
//                                         ^ NumericLiteral 
//                                            ^ PunctuationDelimiter 
//                                              ^ Identifier 
          |> array.filter (fun y => y <= max) in
//        ^^ IdentifierOperator 
//           ^^^^^ Identifier 
//                ^ PunctuationDelimiter 
//                 ^^^^^^ IdentifierFunction 
//                         ^^^ Keyword 
//                             ^ IdentifierParameter 
//                               ^^ IdentifierOperator 
//                                  ^ Identifier 
//                                    ^^ IdentifierOperator 
//                                       ^^^ Identifier 
//                                            ^^ Keyword 
        array.filter (fun y => array.all ((!=) y) to_drop) xs in
//      ^^^^^ Identifier 
//           ^ PunctuationDelimiter 
//            ^^^^^^ IdentifierFunction 
//                    ^^^ Keyword 
//                        ^ IdentifierParameter 
//                          ^^ IdentifierOperator 
//                             ^^^^^ Identifier 
//                                  ^ PunctuationDelimiter 
//                                   ^^^ IdentifierFunction 
//                                         ^^ IdentifierOperator 
//                                             ^ Identifier 
//                                                ^^^^^^^ Identifier 
//                                                         ^^ Identifier 
//                                                            ^^ Keyword 
      let rec loop = fun x xs =>
//    ^^^ Keyword 
//        ^^^ Keyword 
//            ^^^^ Identifier 
//                 ^ PunctuationDelimiter 
//                   ^^^ Keyword 
//                       ^ IdentifierParameter 
//                         ^^ Identifier 
//                            ^^ IdentifierOperator 
        if x > limit then
//      ^^ Keyword 
//         ^ Identifier 
//           ^ IdentifierOperator 
//             ^^^^^ Identifier 
//                   ^^^^ Keyword 
          xs
//        ^^ Identifier 
        else
//      ^^^^ Keyword 
          loop (x + 1) (drop_multiples x xs) in
//        ^^^^ Identifier 
//              ^ Identifier 
//                ^ IdentifierOperator 
//                  ^ NumericLiteral 
//                      ^^^^^^^^^^^^^^ Identifier 
//                                     ^ Identifier 
//                                       ^^ Identifier 
//                                           ^^ Keyword 
      loop 2 (range 2 max) in
//    ^^^^ Identifier 
//         ^ NumericLiteral 
//            ^^^^^ Identifier 
//                  ^ NumericLiteral 
//                    ^^^ Identifier 
//                         ^^ Keyword 
  
  {
    run = primes
//  ^^^ StringLiteral 
//      ^ PunctuationDelimiter 
//        ^^^^^^ Identifier 
  }

