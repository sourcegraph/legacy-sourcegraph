---
source: crates/syntax-analysis/src/highlighting/tree_sitter.rs
expression: "snapshot_treesitter_syntax_kinds(&document, &contents)"
---
  // imports
//^^^^^^^^^^ Comment
  use namespace HH\Lib\{C, Vec};
//^^^ Keyword
//    ^^^^^^^^^ Keyword
//              ^^ IdentifierNamespace
//                ^ PunctuationDelimiter
//                 ^^^ IdentifierNamespace
//                      ^ IdentifierNamespace
//                       ^ PunctuationDelimiter
//                         ^^^ IdentifierNamespace
//                             ^ PunctuationDelimiter
  use const Space\Const\C;
//^^^ Keyword
//    ^^^^^ Keyword
//          ^^^^^ IdentifierNamespace
//               ^ PunctuationDelimiter
//                ^^^^^ IdentifierNamespace
//                     ^ PunctuationDelimiter
//                      ^ IdentifierConstant
//                       ^ PunctuationDelimiter
  use type Space\Type\T;
//^^^ Keyword
//    ^^^^ Keyword
//         ^^^^^ IdentifierNamespace
//              ^ PunctuationDelimiter
//               ^^^^ IdentifierNamespace
//                   ^ PunctuationDelimiter
//                    ^ IdentifierType
//                     ^ PunctuationDelimiter
  use function UseNS\f;
//^^^ Keyword
//    ^^^^^^^^ Keyword
//             ^^^^^ IdentifierNamespace
//                  ^ PunctuationDelimiter
//                   ^ IdentifierFunction
//                    ^ PunctuationDelimiter
  use T;
//^^^ Keyword
//    ^ Identifier
//     ^ PunctuationDelimiter
  
  // NOTE: Tree-sitter grammar seems to not support module
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
  module foo.bar.baz;
//^^^^^^ Identifier
//       ^^^ Identifier
//          ^ IdentifierOperator
//           ^^^ Identifier
//              ^ IdentifierOperator
//               ^^^ Identifier
//                  ^ PunctuationDelimiter
  
  namespace Hack\Example\namespace {
//^^^^^^^^^ Keyword
//          ^^^^ IdentifierNamespace
//              ^ PunctuationDelimiter
//               ^^^^^^^ IdentifierNamespace
//                      ^ PunctuationDelimiter
//                       ^^^^^^^^^ Identifier
  
      // Functions
//    ^^^^^^^^^^^^ Comment
      function f(dynamic $d): void {}
//    ^^^^^^^^ Keyword
//             ^ IdentifierFunction
//               ^^^^^^^ IdentifierBuiltinType
//                       ^^ IdentifierParameter
//                          ^ PunctuationDelimiter
//                            ^^^^ IdentifierBuiltinType
      function g(arraykey $a): void {}
//    ^^^^^^^^ Keyword
//             ^ IdentifierFunction
//               ^^^^^^^^ IdentifierBuiltinType
//                        ^^ IdentifierParameter
//                           ^ PunctuationDelimiter
//                             ^^^^ IdentifierBuiltinType
  
      // Shape constructor
//    ^^^^^^^^^^^^^^^^^^^^ Comment
      function foo(int $arg): shape(...){
//    ^^^^^^^^ Keyword
//             ^^^ IdentifierFunction
//                 ^^^ IdentifierBuiltinType
//                     ^^^^ IdentifierParameter
//                          ^ PunctuationDelimiter
//                            ^^^^^ IdentifierBuiltinType
//                                  ^^^ IdentifierBuiltinType
      return shape();
//    ^^^^^^ Keyword
//           ^^^^^ IdentifierBuiltinType
//                  ^ PunctuationDelimiter
      }
  }
  
  
  /**
//^^^ Comment 23:0..25:3
   * A doc comment starts with two asterisks.
   */
  function swap<T>(inout T $i1, inout T $i2): void {
//^^^^^^^^ Keyword
//         ^^^^ IdentifierFunction
//             ^ IdentifierOperator
//              ^ IdentifierType
//               ^ IdentifierOperator
//                 ^^^^^ Keyword
//                       ^ Identifier
//                         ^^^ IdentifierParameter
//                            ^ PunctuationDelimiter
//                              ^^^^^ Keyword
//                                    ^ Identifier
//                                      ^^^ IdentifierParameter
//                                          ^ PunctuationDelimiter
//                                            ^^^^ IdentifierBuiltinType
    $temp = $i1;
//  ^^^^^ Identifier
//        ^ IdentifierOperator
//          ^^^ Identifier
//             ^ PunctuationDelimiter
  
    // Anonymous functions
//  ^^^^^^^^^^^^^^^^^^^^^^ Comment
    $f = function($x) { return $x + 1; };
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^^^^^ Keyword
//                ^^ IdentifierParameter
//                      ^^^^^^ Keyword
//                             ^^ Identifier
//                                ^ IdentifierOperator
//                                  ^ NumericLiteral
//                                   ^ PunctuationDelimiter
//                                      ^ PunctuationDelimiter
    $f = function($x) use($y) { return $x + $y; };
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^^^^^ Keyword
//                ^^ IdentifierParameter
//                    ^^^ Keyword
//                        ^^ Identifier
//                              ^^^^^^ Keyword
//                                     ^^ Identifier
//                                        ^ IdentifierOperator
//                                          ^^ Identifier
//                                            ^ PunctuationDelimiter
//                                               ^ PunctuationDelimiter
    $f = $x ==> $x + 1;
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^ IdentifierParameter
//          ^^^ IdentifierOperator
//              ^^ Identifier
//                 ^ IdentifierOperator
//                   ^ NumericLiteral
//                    ^ PunctuationDelimiter
    $f = (int $x): int ==> $x + 1;
//  ^^ Identifier
//     ^ IdentifierOperator
//        ^^^ IdentifierBuiltinType
//            ^^ IdentifierParameter
//               ^ PunctuationDelimiter
//                 ^^^ IdentifierBuiltinType
//                     ^^^ IdentifierOperator
//                         ^^ Identifier
//                            ^ IdentifierOperator
//                              ^ NumericLiteral
//                               ^ PunctuationDelimiter
  }
  
  // Generators
//^^^^^^^^^^^^^ Comment
  function squares(
//^^^^^^^^ Keyword
//         ^^^^^^^ IdentifierFunction
    int $start,
//  ^^^ IdentifierBuiltinType
//      ^^^^^^ IdentifierParameter
//            ^ PunctuationDelimiter
    int $end,
//  ^^^ IdentifierBuiltinType
//      ^^^^ IdentifierParameter
//          ^ PunctuationDelimiter
    string $keyPrefix = "",
//  ^^^^^^ IdentifierBuiltinType
//         ^^^^^^^^^^ IdentifierParameter
//                    ^ IdentifierOperator
//                      ^^ StringLiteral
//                        ^ PunctuationDelimiter
  ): Generator<string, int, void> {
// ^ PunctuationDelimiter
//   ^^^^^^^^^ Identifier
//            ^ IdentifierOperator
//             ^^^^^^ IdentifierBuiltinType
//                   ^ PunctuationDelimiter
//                    ^ IdentifierType
//                     ^^^ IdentifierBuiltinType
//                        ^ PunctuationDelimiter
//                         ^ IdentifierType
//                          ^^^^ IdentifierBuiltinType
//                              ^ IdentifierOperator
    for ($i = $start; $i <= $end; ++$i) {
//  ^^^ Keyword
//       ^^ Identifier
//          ^ IdentifierOperator
//            ^^^^^^ Identifier
//                  ^ PunctuationDelimiter
//                    ^^ Identifier
//                       ^^ IdentifierOperator
//                          ^^^^ Identifier
//                              ^ PunctuationDelimiter
//                                ^^ IdentifierOperator
//                                  ^^ Identifier
      yield $keyPrefix.$i => $i * $i; // specify a key/value pair
//    ^^^^^ Keyword
//          ^^^^^^^^^^ Identifier
//                    ^ IdentifierOperator
//                     ^^ Identifier
//                        ^^ IdentifierOperator
//                           ^^ Identifier
//                              ^ IdentifierOperator
//                                ^^ Identifier
//                                  ^ PunctuationDelimiter
//                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
    }
  }
  
  <<__EntryPoint>>
//^^ IdentifierOperator
//  ^^^^^^^^^^^^ Identifier
//              ^^ IdentifierOperator
  function main(): void {
//^^^^^^^^ Keyword
//         ^^^^ IdentifierFunction
//               ^ PunctuationDelimiter
//                 ^^^^ IdentifierBuiltinType
    $v1 = -10;
//  ^^^ Identifier
//      ^ IdentifierOperator
//        ^ IdentifierOperator
//         ^^ NumericLiteral
//           ^ PunctuationDelimiter
    $v2 = "red";
//  ^^^ Identifier
//      ^ IdentifierOperator
//        ^^^^^ StringLiteral
//             ^ PunctuationDelimiter
    $a1 = "foo"."bar";
//  ^^^ Identifier
//      ^ IdentifierOperator
//        ^^^^^ StringLiteral
//             ^ IdentifierOperator
//              ^^^^^ StringLiteral
//                   ^ PunctuationDelimiter
    echo "\$v1 = ".$v1.", \$v2 = ".$v2."\n";
//  ^^^^ Keyword
//       ^^^^^^^^^ StringLiteral
//                ^ IdentifierOperator
//                 ^^^ Identifier
//                    ^ IdentifierOperator
//                     ^^^^^^^^^^^ StringLiteral
//                                ^ IdentifierOperator
//                                 ^^^ Identifier
//                                    ^ IdentifierOperator
//                                     ^^^^ StringLiteral
//                                         ^ PunctuationDelimiter
  
    // NOTE: Tree-sitter grammar does not support
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
    //       string interpolation
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
    $y = "hello $x[0]";
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^^^^^^^^^^ StringLiteral
//                    ^ PunctuationDelimiter
    $y = "hello $x->foo";
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^^^^^^^^^^^^ StringLiteral
//                      ^ PunctuationDelimiter
    // Control Flow
//  ^^^^^^^^^^^^^^^ Comment
    $i = 1;
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^ NumericLiteral
//        ^ PunctuationDelimiter
    do {
//  ^^ Keyword
      ++$i;
//    ^^ IdentifierOperator
//      ^^ Identifier
//        ^ PunctuationDelimiter
    } while ($i <= 10);
//    ^^^^^ Keyword
//           ^^ Identifier
//              ^^ IdentifierOperator
//                 ^^ NumericLiteral
//                    ^ PunctuationDelimiter
  
    foreach (($array as vec[]) as $item) {}
//  ^^^^^^^ Keyword
//            ^^^^^^ Identifier
//                   ^^ Keyword
//                      ^^^ IdentifierType
//                             ^^ Keyword
//                                ^^^^^ Identifier
  
    for (; $i <= 5; ) {
//  ^^^ Keyword
//       ^ PunctuationDelimiter
//         ^^ Identifier
//            ^^ IdentifierOperator
//               ^ NumericLiteral
//                ^ PunctuationDelimiter
      ++$i;
//    ^^ IdentifierOperator
//      ^^ Identifier
//        ^ PunctuationDelimiter
    }
  
    using ($new = new Object(), $file = new File('using', '+using')) {}
//  ^^^^^ Keyword
//         ^^^^ Identifier
//              ^ IdentifierOperator
//                ^^^ Keyword
//                    ^^^^^^ Identifier
//                            ^ PunctuationDelimiter
//                              ^^^^^ Identifier
//                                    ^ IdentifierOperator
//                                      ^^^ Keyword
//                                          ^^^^ Identifier
//                                               ^^^^^^^ StringLiteral
//                                                      ^ PunctuationDelimiter
//                                                       ^ IdentifierType
//                                                        ^^^^^^^^ StringLiteral
  
    switch ($pos) {
//  ^^^^^^ Keyword
//          ^^^^ Identifier
      case Position::Bottom:
//    ^^^^ Keyword
//         ^^^^^^^^ IdentifierType
//                 ^^ PunctuationDelimiter
//                   ^^^^^^ Identifier
//                         ^ PunctuationDelimiter
        break;
//      ^^^^^ Keyword
//           ^ PunctuationDelimiter
    }
  
    // Expressions
//  ^^^^^^^^^^^^^^ Comment
    $d = dict[];
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^ IdentifierBuiltinType
//             ^ PunctuationDelimiter
    $xhp = <tt>Hello <strong>{$user_name}</strong>
//  ^^^^ Identifier
//       ^ IdentifierOperator
//         ^ IdentifierOperator
//          ^^ Tag
//            ^ IdentifierOperator
//             ^^^^^^ StringLiteral
//                   ^ IdentifierOperator
//                    ^^^^^^ Tag
//                          ^ IdentifierOperator
//                            ^^^^^^^^^^ Identifier
//                                       ^^ Tag
//                                         ^^^^^^ Tag
//                                               ^ IdentifierOperator
//                                                 StringLiteral 79:48..81:4
      Text in the markup
      <!-- this is a comment -->
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^ Comment
//                               StringLiteral 81:30..82:0
  </tt>;
//^^ Tag
//  ^^ Tag
//    ^ IdentifierOperator
//     ^ PunctuationDelimiter
  
    $d[nameof C] = 4;
//  ^^ Identifier
//     ^^^^^^ Identifier
//            ^ Identifier
//               ^ IdentifierOperator
//                 ^ NumericLiteral
//                  ^ PunctuationDelimiter
    $v = vec[1, 2, 3];
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^ IdentifierBuiltinType
//           ^ NumericLiteral
//            ^ PunctuationDelimiter
//              ^ NumericLiteral
//               ^ PunctuationDelimiter
//                 ^ NumericLiteral
//                   ^ PunctuationDelimiter
    $v[0] = 42;
//  ^^ Identifier
//     ^ NumericLiteral
//        ^ IdentifierOperator
//          ^^ NumericLiteral
//            ^ PunctuationDelimiter
    $a1 = (bool)0;
//  ^^^ Identifier
//      ^ IdentifierOperator
//         ^^^^ IdentifierBuiltinType
//              ^ NumericLiteral
//               ^ PunctuationDelimiter
    $x = tuple(1, 2.0, null);
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^^ IdentifierBuiltinType
//             ^ NumericLiteral
//              ^ PunctuationDelimiter
//                ^^^ NumericLiteral
//                   ^ PunctuationDelimiter
//                     ^^^^ IdentifierBuiltin
//                          ^ PunctuationDelimiter
    $x is (~int, @float, ?bool);
//  ^^ Identifier
//     ^^ Keyword
//         ^ IdentifierOperator
//          ^^^ IdentifierBuiltinType
//             ^ PunctuationDelimiter
//               ^ IdentifierOperator
//                ^^^^^ IdentifierBuiltinType
//                     ^ PunctuationDelimiter
//                       ^ IdentifierOperator
//                        ^^^^ IdentifierBuiltinType
//                             ^ PunctuationDelimiter
    $s = shape('name' => 'db-01', 'age' => 365);
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^^ IdentifierBuiltinType
//             ^^^^^^ StringLiteral
//                    ^^ IdentifierOperator
//                       ^^^^^^^ StringLiteral
//                              ^ PunctuationDelimiter
//                                ^^^^^ StringLiteral
//                                      ^^ IdentifierOperator
//                                         ^^^ NumericLiteral
//                                             ^ PunctuationDelimiter
    $x = true;
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^ BooleanLiteral
//           ^ PunctuationDelimiter
    $y = false;
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^^ BooleanLiteral
//            ^ PunctuationDelimiter
    $x = True;
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^ BooleanLiteral
//           ^ PunctuationDelimiter
    $y = FALSE;
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^^^ BooleanLiteral
//            ^ PunctuationDelimiter
  
  // heredoc
//^^^^^^^^^^ Comment
  $s = <<<EOT
//^^ Identifier
//   ^ IdentifierOperator
//     ^^^^^^ StringLiteral 97:5..99:3
   $('a') abc $(function{return;})
  EOT;
//   ^ PunctuationDelimiter
  
    // Pipe
//  ^^^^^^^ Comment
    $x = vec[2,1,3]
//  ^^ Identifier
//     ^ IdentifierOperator
//       ^^^ IdentifierBuiltinType
//           ^ NumericLiteral
//            ^ PunctuationDelimiter
//             ^ NumericLiteral
//              ^ PunctuationDelimiter
//               ^ NumericLiteral
      |> Vec\map($$, $a ==> $a * $a)
//    ^^ IdentifierOperator
//       ^^^ IdentifierNamespace
//          ^ PunctuationDelimiter
//           ^^^ IdentifierFunction
//               ^^ Identifier
//                 ^ PunctuationDelimiter
//                   ^^ IdentifierParameter
//                      ^^^ IdentifierOperator
//                          ^^ Identifier
//                             ^ IdentifierOperator
//                               ^^ Identifier
      |> Vec\sort($$);
//    ^^ IdentifierOperator
//       ^^^ IdentifierNamespace
//          ^ PunctuationDelimiter
//           ^^^^ IdentifierFunction
//                ^^ Identifier
//                   ^ PunctuationDelimiter
  
    // Arithmetic
//  ^^^^^^^^^^^^^ Comment
    $a1 = -10 + 100;
//  ^^^ Identifier
//      ^ IdentifierOperator
//        ^ IdentifierOperator
//         ^^ NumericLiteral
//            ^ IdentifierOperator
//              ^^^ NumericLiteral
//                 ^ PunctuationDelimiter
    $a1 = 100 + -3.4e2;
//  ^^^ Identifier
//      ^ IdentifierOperator
//        ^^^ NumericLiteral
//            ^ IdentifierOperator
//              ^ IdentifierOperator
//               ^^^^^ NumericLiteral
//                    ^ PunctuationDelimiter
    $a1 = 9.5 + 23.444;
//  ^^^ Identifier
//      ^ IdentifierOperator
//        ^^^ NumericLiteral
//            ^ IdentifierOperator
//              ^^^^^^ NumericLiteral
//                    ^ PunctuationDelimiter
    $a1 = (1 << 63) >> 63;
//  ^^^ Identifier
//      ^ IdentifierOperator
//         ^ NumericLiteral
//           ^^ IdentifierOperator
//              ^^ NumericLiteral
//                  ^^ IdentifierOperator
//                     ^^ NumericLiteral
//                       ^ PunctuationDelimiter
    $a1 = 1 > 2;
//  ^^^ Identifier
//      ^ IdentifierOperator
//        ^ NumericLiteral
//          ^ IdentifierOperator
//            ^ NumericLiteral
//             ^ PunctuationDelimiter
  }
  
  // Types
//^^^^^^^^ Comment
  type Complex = shape('real' => float, 'imag' => float);
//^^^^ Keyword
//     ^^^^^^^ IdentifierType
//             ^ IdentifierOperator
//               ^^^^^ IdentifierBuiltinType
//                     ^^^^^^ StringLiteral
//                            ^^ IdentifierOperator
//                               ^^^^^ IdentifierType
//                                    ^ PunctuationDelimiter
//                                      ^^^^^^ StringLiteral
//                                             ^^ IdentifierOperator
//                                                ^^^^^ IdentifierType
//                                                      ^ PunctuationDelimiter
  newtype Point = (float, float);
//^^^^^^^ Keyword
//        ^^^^^ IdentifierType
//              ^ IdentifierOperator
//                 ^^^^^ IdentifierBuiltinType
//                      ^ PunctuationDelimiter
//                        ^^^^^ IdentifierBuiltinType
//                              ^ PunctuationDelimiter
  
  // Async/await
//^^^^^^^^^^^^^^ Comment
  async function main_async(): Awaitable<void> {
//^^^^^ Keyword
//      ^^^^^^^^ Keyword
//               ^^^^^^^^^^ IdentifierFunction
//                           ^ PunctuationDelimiter
//                             ^^^^^^^^^ Identifier
//                                      ^ IdentifierOperator
//                                       ^^^^ IdentifierBuiltinType
//                                           ^ IdentifierOperator
    concurrent {
//  ^^^^^^^^^^ Keyword
        $out = IO\request_output();
//      ^^^^ Identifier
//           ^ IdentifierOperator
//             ^^ IdentifierNamespace
//               ^ PunctuationDelimiter
//                ^^^^^^^^^^^^^^ IdentifierFunction
//                                ^ PunctuationDelimiter
        await $out->writeAllAsync("Hello, world\n");
//      ^^^^^ Keyword
//            ^^^^ Identifier
//                ^^ IdentifierOperator
//                  ^^^^^^^^^^^^^ IdentifierFunction
//                                ^^^^^^^^^^^^^^^^ StringLiteral
//                                                 ^ PunctuationDelimiter
     }
  }
  
  // Enums
//^^^^^^^^ Comment
  enum Position: int {
//^^^^ Keyword
//     ^^^^^^^^ Identifier
//             ^ PunctuationDelimiter
//               ^^^ IdentifierBuiltinType
    Top = 0;
//  ^^^ Identifier
//      ^ IdentifierOperator
//        ^ NumericLiteral
//         ^ PunctuationDelimiter
    Bottom = 1;
//  ^^^^^^ Identifier
//         ^ IdentifierOperator
//           ^ NumericLiteral
//            ^ PunctuationDelimiter
  }
  enum class Random: mixed {
//^^^^ Keyword
//     ^^^^^ Keyword
//           ^^^^^^ Identifier
//                 ^ PunctuationDelimiter
//                   ^^^^^ IdentifierBuiltinType
    int X = 42;
//  ^^^ IdentifierBuiltinType
//      ^ Identifier
//        ^ IdentifierOperator
//          ^^ NumericLiteral
//            ^ PunctuationDelimiter
    string S = 'foo';
//  ^^^^^^ IdentifierBuiltinType
//         ^ Identifier
//           ^ IdentifierOperator
//             ^^^^^ StringLiteral
//                  ^ PunctuationDelimiter
  }
  
  // Interfaces
//^^^^^^^^^^^^^ Comment
  interface StackLike<T> {
//^^^^^^^^^ Keyword
//          ^^^^^^^^^ IdentifierType
//                   ^ IdentifierOperator
//                    ^ IdentifierType
//                     ^ IdentifierOperator
    public function push(T $element): void;
//  ^^^^^^ Keyword
//         ^^^^^^^^ Keyword
//                  ^^^^ IdentifierFunction
//                       ^ Identifier
//                         ^^^^^^^^ IdentifierParameter
//                                  ^ PunctuationDelimiter
//                                    ^^^^ IdentifierBuiltinType
//                                        ^ PunctuationDelimiter
  }
  
  // Traits
//^^^^^^^^^ Comment
  trait T1 implements I1 {
//^^^^^ Keyword
//      ^^ Identifier
//         ^^^^^^^^^^ Keyword
//                    ^^ Identifier
    public static int $x = 0;
//  ^^^^^^ Keyword
//         ^^^^^^ Keyword
//                ^^^ IdentifierBuiltinType
//                    ^^ Identifier
//                       ^ IdentifierOperator
//                         ^ NumericLiteral
//                          ^ PunctuationDelimiter
  
    public static function inc() : void {
//  ^^^^^^ Keyword
//         ^^^^^^ Keyword
//                ^^^^^^^^ Keyword
//                         ^^^ IdentifierFunction
//                               ^ PunctuationDelimiter
//                                 ^^^^ IdentifierBuiltinType
      static::$x = static::$x + 1;
//    ^^^^^^ Keyword
//          ^^ PunctuationDelimiter
//            ^^ Identifier
//               ^ IdentifierOperator
//                 ^^^^^^ Keyword
//                       ^^ PunctuationDelimiter
//                         ^^ Identifier
//                            ^ IdentifierOperator
//                              ^ NumericLiteral
//                               ^ PunctuationDelimiter
    }
  }
  class A1 implements I1 { use T1; }
//^^^^^ Keyword
//      ^^ IdentifierType
//         ^^^^^^^^^^ Keyword
//                    ^^ Identifier
//                         ^^^ Keyword
//                             ^^ Identifier
//                               ^ PunctuationDelimiter
  
  // Classes
//^^^^^^^^^^ Comment
  abstract final class F<Ta as A, Tb super B<A, C>> extends B implements A\B<A, C>, C\D {
//^^^^^^^^ Keyword
//         ^^^^^ Keyword
//               ^^^^^ Keyword
//                     ^ IdentifierType
//                      ^ IdentifierOperator
//                       ^^ IdentifierType
//                          ^^ Keyword
//                             ^ Identifier
//                              ^ PunctuationDelimiter
//                                ^^ IdentifierType
//                                   ^^^^^ Keyword
//                                         ^ Identifier
//                                          ^ IdentifierOperator
//                                           ^ Identifier
//                                            ^ PunctuationDelimiter
//                                             ^ IdentifierType
//                                              ^ Identifier
//                                               ^ IdentifierOperator
//                                                ^ IdentifierOperator
//                                                  ^^^^^^^ Keyword
//                                                          ^ Identifier
//                                                            ^^^^^^^^^^ Keyword
//                                                                       ^ IdentifierNamespace
//                                                                        ^ PunctuationDelimiter
//                                                                         ^ Identifier
//                                                                          ^ IdentifierOperator
//                                                                           ^ Identifier
//                                                                            ^ PunctuationDelimiter
//                                                                             ^ IdentifierType
//                                                                              ^ Identifier
//                                                                               ^ IdentifierOperator
//                                                                                ^ PunctuationDelimiter
//                                                                                  ^ IdentifierNamespace
//                                                                                   ^ PunctuationDelimiter
//                                                                                    ^ Identifier
    function method<Ta as A, Tb super B>(): Tc {}
//  ^^^^^^^^ Keyword
//           ^^^^^^ IdentifierFunction
//                 ^ IdentifierOperator
//                  ^^ IdentifierType
//                     ^^ Keyword
//                        ^ Identifier
//                         ^ PunctuationDelimiter
//                           ^^ IdentifierType
//                              ^^^^^ Keyword
//                                    ^ Identifier
//                                     ^ IdentifierOperator
//                                        ^ PunctuationDelimiter
//                                          ^^ Identifier
  }
  
  class StackUnderflowException extends \Exception {}
//^^^^^ Keyword
//      ^^^^^^^^^^^^^^^^^^^^^^^ IdentifierType
//                              ^^^^^^^ Keyword
//                                      ^ PunctuationDelimiter
//                                       ^^^^^^^^^ Identifier
  
  class VecStack<T> implements StackLike<T> {
//^^^^^ Keyword
//      ^^^^^^^^ IdentifierType
//              ^ IdentifierOperator
//               ^ IdentifierType
//                ^ IdentifierOperator
//                  ^^^^^^^^^^ Keyword
//                             ^^^^^^^^^ Identifier
//                                      ^ IdentifierOperator
//                                       ^ Identifier
//                                        ^ IdentifierOperator
    private int $stackPtr;
//  ^^^^^^^ Keyword
//          ^^^ IdentifierBuiltinType
//              ^^^^^^^^^ Identifier
//                       ^ PunctuationDelimiter
  
    // Constraints
//  ^^^^^^^^^^^^^^ Comment
    public function flatten<Tu>(): MyList<Tu> where T = MyList<Tu> {
//  ^^^^^^ Keyword
//         ^^^^^^^^ Keyword
//                  ^^^^^^^ IdentifierFunction
//                         ^ IdentifierOperator
//                          ^^ IdentifierType
//                            ^ IdentifierOperator
//                               ^ PunctuationDelimiter
//                                 ^^^^^^ Identifier
//                                       ^ IdentifierOperator
//                                        ^^ Identifier
//                                          ^ IdentifierOperator
//                                            ^^^^^ Keyword
//                                                  ^ Identifier
//                                                    ^ IdentifierOperator
//                                                      ^^^^^^ Identifier
//                                                            ^ IdentifierOperator
//                                                             ^^ Identifier
//                                                               ^ IdentifierOperator
      throw new Exception('unimplemented');
//    ^^^^^ Keyword
//          ^^^ Keyword
//              ^^^^^^^^^ Identifier
//                        ^^^^^^^^^^^^^^^ StringLiteral
//                                        ^ PunctuationDelimiter
    }
  
    public function __construct(private vec<T> $elements = vec[]) {
//  ^^^^^^ Keyword
//         ^^^^^^^^ Keyword
//                  ^^^^^^^^^^^ IdentifierFunction
//                              ^^^^^^^ Keyword
//                                      ^^^ IdentifierType
//                                         ^ IdentifierOperator
//                                          ^ Identifier
//                                           ^ IdentifierOperator
//                                             ^^^^^^^^^ IdentifierParameter
//                                                       ^ IdentifierOperator
//                                                         ^^^ IdentifierBuiltinType
      $this->stackPtr = C\count($elements) - 1;
//    ^^^^^ IdentifierBuiltin
//         ^^ IdentifierOperator
//           ^^^^^^^^ Identifier
//                    ^ IdentifierOperator
//                      ^ IdentifierNamespace
//                       ^ PunctuationDelimiter
//                        ^^^^^ IdentifierFunction
//                              ^^^^^^^^^ Identifier
//                                         ^ IdentifierOperator
//                                           ^ NumericLiteral
//                                            ^ PunctuationDelimiter
    }
  
    public function push(T $element): void {
//  ^^^^^^ Keyword
//         ^^^^^^^^ Keyword
//                  ^^^^ IdentifierFunction
//                       ^ Identifier
//                         ^^^^^^^^ IdentifierParameter
//                                  ^ PunctuationDelimiter
//                                    ^^^^ IdentifierBuiltinType
      $this->stackPtr++;
//    ^^^^^ IdentifierBuiltin
//         ^^ IdentifierOperator
//           ^^^^^^^^ Identifier
//                   ^^ IdentifierOperator
//                     ^ PunctuationDelimiter
      if (C\count($this->elements) === $this->stackPtr) {
//    ^^ Keyword
//        ^ IdentifierNamespace
//         ^ PunctuationDelimiter
//          ^^^^^ IdentifierFunction
//                ^^^^^ IdentifierBuiltin
//                     ^^ IdentifierOperator
//                       ^^^^^^^^ Identifier
//                                 ^^^ IdentifierOperator
//                                     ^^^^^ IdentifierBuiltin
//                                          ^^ IdentifierOperator
//                                            ^^^^^^^^ Identifier
        $this->elements[] = $element;
//      ^^^^^ IdentifierBuiltin
//           ^^ IdentifierOperator
//             ^^^^^^^^ Identifier
//                        ^ IdentifierOperator
//                          ^^^^^^^^ Identifier
//                                  ^ PunctuationDelimiter
      } else {
//      ^^^^ Keyword
        $this->elements[$this->stackPtr] = $element;
//      ^^^^^ IdentifierBuiltin
//           ^^ IdentifierOperator
//             ^^^^^^^^ Identifier
//                      ^^^^^ IdentifierBuiltin
//                           ^^ IdentifierOperator
//                             ^^^^^^^^ Identifier
//                                       ^ IdentifierOperator
//                                         ^^^^^^^^ Identifier
//                                                 ^ PunctuationDelimiter
      }
    }
  }
