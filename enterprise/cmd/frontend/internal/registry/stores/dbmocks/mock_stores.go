// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmocks

import (
	"context"
	"sync"

	stores "github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/registry/stores"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
)

// MockExtensionsStore is a mock implementation of the ExtensionsStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/registry/stores)
// used for unit testing.
type MockExtensionsStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *ExtensionsStoreCountFunc
	// CountPublishersFunc is an instance of a mock function object
	// controlling the behavior of the method CountPublishers.
	CountPublishersFunc *ExtensionsStoreCountPublishersFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ExtensionsStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *ExtensionsStoreDeleteFunc
	// GetByExtensionIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetByExtensionID.
	GetByExtensionIDFunc *ExtensionsStoreGetByExtensionIDFunc
	// GetByIDFunc is an instance of a mock function object controlling the
	// behavior of the method GetByID.
	GetByIDFunc *ExtensionsStoreGetByIDFunc
	// GetByUUIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUUID.
	GetByUUIDFunc *ExtensionsStoreGetByUUIDFunc
	// GetFeaturedExtensionsFunc is an instance of a mock function object
	// controlling the behavior of the method GetFeaturedExtensions.
	GetFeaturedExtensionsFunc *ExtensionsStoreGetFeaturedExtensionsFunc
	// GetPublisherFunc is an instance of a mock function object controlling
	// the behavior of the method GetPublisher.
	GetPublisherFunc *ExtensionsStoreGetPublisherFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ExtensionsStoreHandleFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *ExtensionsStoreListFunc
	// ListPublishersFunc is an instance of a mock function object
	// controlling the behavior of the method ListPublishers.
	ListPublishersFunc *ExtensionsStoreListPublishersFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ExtensionsStoreTransactFunc
	// UpdateFunc is an instance of a mock function object controlling the
	// behavior of the method Update.
	UpdateFunc *ExtensionsStoreUpdateFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ExtensionsStoreWithFunc
}

// NewMockExtensionsStore creates a new mock of the ExtensionsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockExtensionsStore() *MockExtensionsStore {
	return &MockExtensionsStore{
		CountFunc: &ExtensionsStoreCountFunc{
			defaultHook: func(context.Context, stores.ExtensionsListOptions) (int, error) {
				return 0, nil
			},
		},
		CountPublishersFunc: &ExtensionsStoreCountPublishersFunc{
			defaultHook: func(context.Context, stores.PublishersListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateFunc: &ExtensionsStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, string) (int32, error) {
				return 0, nil
			},
		},
		DeleteFunc: &ExtensionsStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				return nil
			},
		},
		GetByExtensionIDFunc: &ExtensionsStoreGetByExtensionIDFunc{
			defaultHook: func(context.Context, string) (*stores.Extension, error) {
				return nil, nil
			},
		},
		GetByIDFunc: &ExtensionsStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*stores.Extension, error) {
				return nil, nil
			},
		},
		GetByUUIDFunc: &ExtensionsStoreGetByUUIDFunc{
			defaultHook: func(context.Context, string) (*stores.Extension, error) {
				return nil, nil
			},
		},
		GetFeaturedExtensionsFunc: &ExtensionsStoreGetFeaturedExtensionsFunc{
			defaultHook: func(context.Context) ([]*stores.Extension, error) {
				return nil, nil
			},
		},
		GetPublisherFunc: &ExtensionsStoreGetPublisherFunc{
			defaultHook: func(context.Context, string) (*stores.Publisher, error) {
				return nil, nil
			},
		},
		HandleFunc: &ExtensionsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		ListFunc: &ExtensionsStoreListFunc{
			defaultHook: func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
				return nil, nil
			},
		},
		ListPublishersFunc: &ExtensionsStoreListPublishersFunc{
			defaultHook: func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
				return nil, nil
			},
		},
		TransactFunc: &ExtensionsStoreTransactFunc{
			defaultHook: func(context.Context) (stores.ExtensionsStore, error) {
				return nil, nil
			},
		},
		UpdateFunc: &ExtensionsStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) error {
				return nil
			},
		},
		WithFunc: &ExtensionsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) stores.ExtensionsStore {
				return nil
			},
		},
	}
}

// NewStrictMockExtensionsStore creates a new mock of the ExtensionsStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockExtensionsStore() *MockExtensionsStore {
	return &MockExtensionsStore{
		CountFunc: &ExtensionsStoreCountFunc{
			defaultHook: func(context.Context, stores.ExtensionsListOptions) (int, error) {
				panic("unexpected invocation of MockExtensionsStore.Count")
			},
		},
		CountPublishersFunc: &ExtensionsStoreCountPublishersFunc{
			defaultHook: func(context.Context, stores.PublishersListOptions) (int, error) {
				panic("unexpected invocation of MockExtensionsStore.CountPublishers")
			},
		},
		CreateFunc: &ExtensionsStoreCreateFunc{
			defaultHook: func(context.Context, int32, int32, string) (int32, error) {
				panic("unexpected invocation of MockExtensionsStore.Create")
			},
		},
		DeleteFunc: &ExtensionsStoreDeleteFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockExtensionsStore.Delete")
			},
		},
		GetByExtensionIDFunc: &ExtensionsStoreGetByExtensionIDFunc{
			defaultHook: func(context.Context, string) (*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionsStore.GetByExtensionID")
			},
		},
		GetByIDFunc: &ExtensionsStoreGetByIDFunc{
			defaultHook: func(context.Context, int32) (*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionsStore.GetByID")
			},
		},
		GetByUUIDFunc: &ExtensionsStoreGetByUUIDFunc{
			defaultHook: func(context.Context, string) (*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionsStore.GetByUUID")
			},
		},
		GetFeaturedExtensionsFunc: &ExtensionsStoreGetFeaturedExtensionsFunc{
			defaultHook: func(context.Context) ([]*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionsStore.GetFeaturedExtensions")
			},
		},
		GetPublisherFunc: &ExtensionsStoreGetPublisherFunc{
			defaultHook: func(context.Context, string) (*stores.Publisher, error) {
				panic("unexpected invocation of MockExtensionsStore.GetPublisher")
			},
		},
		HandleFunc: &ExtensionsStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockExtensionsStore.Handle")
			},
		},
		ListFunc: &ExtensionsStoreListFunc{
			defaultHook: func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
				panic("unexpected invocation of MockExtensionsStore.List")
			},
		},
		ListPublishersFunc: &ExtensionsStoreListPublishersFunc{
			defaultHook: func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
				panic("unexpected invocation of MockExtensionsStore.ListPublishers")
			},
		},
		TransactFunc: &ExtensionsStoreTransactFunc{
			defaultHook: func(context.Context) (stores.ExtensionsStore, error) {
				panic("unexpected invocation of MockExtensionsStore.Transact")
			},
		},
		UpdateFunc: &ExtensionsStoreUpdateFunc{
			defaultHook: func(context.Context, int32, *string) error {
				panic("unexpected invocation of MockExtensionsStore.Update")
			},
		},
		WithFunc: &ExtensionsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) stores.ExtensionsStore {
				panic("unexpected invocation of MockExtensionsStore.With")
			},
		},
	}
}

// NewMockExtensionsStoreFrom creates a new mock of the MockExtensionsStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockExtensionsStoreFrom(i stores.ExtensionsStore) *MockExtensionsStore {
	return &MockExtensionsStore{
		CountFunc: &ExtensionsStoreCountFunc{
			defaultHook: i.Count,
		},
		CountPublishersFunc: &ExtensionsStoreCountPublishersFunc{
			defaultHook: i.CountPublishers,
		},
		CreateFunc: &ExtensionsStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &ExtensionsStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		GetByExtensionIDFunc: &ExtensionsStoreGetByExtensionIDFunc{
			defaultHook: i.GetByExtensionID,
		},
		GetByIDFunc: &ExtensionsStoreGetByIDFunc{
			defaultHook: i.GetByID,
		},
		GetByUUIDFunc: &ExtensionsStoreGetByUUIDFunc{
			defaultHook: i.GetByUUID,
		},
		GetFeaturedExtensionsFunc: &ExtensionsStoreGetFeaturedExtensionsFunc{
			defaultHook: i.GetFeaturedExtensions,
		},
		GetPublisherFunc: &ExtensionsStoreGetPublisherFunc{
			defaultHook: i.GetPublisher,
		},
		HandleFunc: &ExtensionsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		ListFunc: &ExtensionsStoreListFunc{
			defaultHook: i.List,
		},
		ListPublishersFunc: &ExtensionsStoreListPublishersFunc{
			defaultHook: i.ListPublishers,
		},
		TransactFunc: &ExtensionsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpdateFunc: &ExtensionsStoreUpdateFunc{
			defaultHook: i.Update,
		},
		WithFunc: &ExtensionsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// ExtensionsStoreCountFunc describes the behavior when the Count method of
// the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreCountFunc struct {
	defaultHook func(context.Context, stores.ExtensionsListOptions) (int, error)
	hooks       []func(context.Context, stores.ExtensionsListOptions) (int, error)
	history     []ExtensionsStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) Count(v0 context.Context, v1 stores.ExtensionsListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(ExtensionsStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreCountFunc) SetDefaultHook(hook func(context.Context, stores.ExtensionsListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockExtensionsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionsStoreCountFunc) PushHook(hook func(context.Context, stores.ExtensionsListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, stores.ExtensionsListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, stores.ExtensionsListOptions) (int, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreCountFunc) nextHook() func(context.Context, stores.ExtensionsListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreCountFunc) appendCall(r0 ExtensionsStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreCountFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreCountFunc) History() []ExtensionsStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockExtensionsStore.
type ExtensionsStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 stores.ExtensionsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreCountPublishersFunc describes the behavior when the
// CountPublishers method of the parent MockExtensionsStore instance is
// invoked.
type ExtensionsStoreCountPublishersFunc struct {
	defaultHook func(context.Context, stores.PublishersListOptions) (int, error)
	hooks       []func(context.Context, stores.PublishersListOptions) (int, error)
	history     []ExtensionsStoreCountPublishersFuncCall
	mutex       sync.Mutex
}

// CountPublishers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExtensionsStore) CountPublishers(v0 context.Context, v1 stores.PublishersListOptions) (int, error) {
	r0, r1 := m.CountPublishersFunc.nextHook()(v0, v1)
	m.CountPublishersFunc.appendCall(ExtensionsStoreCountPublishersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CountPublishers
// method of the parent MockExtensionsStore instance is invoked and the hook
// queue is empty.
func (f *ExtensionsStoreCountPublishersFunc) SetDefaultHook(hook func(context.Context, stores.PublishersListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountPublishers method of the parent MockExtensionsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExtensionsStoreCountPublishersFunc) PushHook(hook func(context.Context, stores.PublishersListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreCountPublishersFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, stores.PublishersListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreCountPublishersFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, stores.PublishersListOptions) (int, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreCountPublishersFunc) nextHook() func(context.Context, stores.PublishersListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreCountPublishersFunc) appendCall(r0 ExtensionsStoreCountPublishersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreCountPublishersFuncCall
// objects describing the invocations of this function.
func (f *ExtensionsStoreCountPublishersFunc) History() []ExtensionsStoreCountPublishersFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreCountPublishersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreCountPublishersFuncCall is an object that describes an
// invocation of method CountPublishers on an instance of
// MockExtensionsStore.
type ExtensionsStoreCountPublishersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 stores.PublishersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreCountPublishersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreCountPublishersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreCreateFunc describes the behavior when the Create method
// of the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreCreateFunc struct {
	defaultHook func(context.Context, int32, int32, string) (int32, error)
	hooks       []func(context.Context, int32, int32, string) (int32, error)
	history     []ExtensionsStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) Create(v0 context.Context, v1 int32, v2 int32, v3 string) (int32, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1, v2, v3)
	m.CreateFunc.appendCall(ExtensionsStoreCreateFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreCreateFunc) SetDefaultHook(hook func(context.Context, int32, int32, string) (int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockExtensionsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionsStoreCreateFunc) PushHook(hook func(context.Context, int32, int32, string) (int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreCreateFunc) SetDefaultReturn(r0 int32, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, int32, string) (int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreCreateFunc) PushReturn(r0 int32, r1 error) {
	f.PushHook(func(context.Context, int32, int32, string) (int32, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreCreateFunc) nextHook() func(context.Context, int32, int32, string) (int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreCreateFunc) appendCall(r0 ExtensionsStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreCreateFunc) History() []ExtensionsStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreCreateFuncCall is an object that describes an invocation
// of method Create on an instance of MockExtensionsStore.
type ExtensionsStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreDeleteFunc describes the behavior when the Delete method
// of the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreDeleteFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []ExtensionsStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) Delete(v0 context.Context, v1 int32) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(ExtensionsStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreDeleteFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockExtensionsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionsStoreDeleteFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *ExtensionsStoreDeleteFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreDeleteFunc) appendCall(r0 ExtensionsStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreDeleteFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreDeleteFunc) History() []ExtensionsStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreDeleteFuncCall is an object that describes an invocation
// of method Delete on an instance of MockExtensionsStore.
type ExtensionsStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExtensionsStoreGetByExtensionIDFunc describes the behavior when the
// GetByExtensionID method of the parent MockExtensionsStore instance is
// invoked.
type ExtensionsStoreGetByExtensionIDFunc struct {
	defaultHook func(context.Context, string) (*stores.Extension, error)
	hooks       []func(context.Context, string) (*stores.Extension, error)
	history     []ExtensionsStoreGetByExtensionIDFuncCall
	mutex       sync.Mutex
}

// GetByExtensionID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExtensionsStore) GetByExtensionID(v0 context.Context, v1 string) (*stores.Extension, error) {
	r0, r1 := m.GetByExtensionIDFunc.nextHook()(v0, v1)
	m.GetByExtensionIDFunc.appendCall(ExtensionsStoreGetByExtensionIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByExtensionID
// method of the parent MockExtensionsStore instance is invoked and the hook
// queue is empty.
func (f *ExtensionsStoreGetByExtensionIDFunc) SetDefaultHook(hook func(context.Context, string) (*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByExtensionID method of the parent MockExtensionsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExtensionsStoreGetByExtensionIDFunc) PushHook(hook func(context.Context, string) (*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreGetByExtensionIDFunc) SetDefaultReturn(r0 *stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreGetByExtensionIDFunc) PushReturn(r0 *stores.Extension, r1 error) {
	f.PushHook(func(context.Context, string) (*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreGetByExtensionIDFunc) nextHook() func(context.Context, string) (*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreGetByExtensionIDFunc) appendCall(r0 ExtensionsStoreGetByExtensionIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreGetByExtensionIDFuncCall
// objects describing the invocations of this function.
func (f *ExtensionsStoreGetByExtensionIDFunc) History() []ExtensionsStoreGetByExtensionIDFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreGetByExtensionIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreGetByExtensionIDFuncCall is an object that describes an
// invocation of method GetByExtensionID on an instance of
// MockExtensionsStore.
type ExtensionsStoreGetByExtensionIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreGetByExtensionIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreGetByExtensionIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreGetByIDFunc describes the behavior when the GetByID method
// of the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreGetByIDFunc struct {
	defaultHook func(context.Context, int32) (*stores.Extension, error)
	hooks       []func(context.Context, int32) (*stores.Extension, error)
	history     []ExtensionsStoreGetByIDFuncCall
	mutex       sync.Mutex
}

// GetByID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) GetByID(v0 context.Context, v1 int32) (*stores.Extension, error) {
	r0, r1 := m.GetByIDFunc.nextHook()(v0, v1)
	m.GetByIDFunc.appendCall(ExtensionsStoreGetByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByID method of
// the parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreGetByIDFunc) SetDefaultHook(hook func(context.Context, int32) (*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByID method of the parent MockExtensionsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExtensionsStoreGetByIDFunc) PushHook(hook func(context.Context, int32) (*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreGetByIDFunc) SetDefaultReturn(r0 *stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreGetByIDFunc) PushReturn(r0 *stores.Extension, r1 error) {
	f.PushHook(func(context.Context, int32) (*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreGetByIDFunc) nextHook() func(context.Context, int32) (*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreGetByIDFunc) appendCall(r0 ExtensionsStoreGetByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreGetByIDFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreGetByIDFunc) History() []ExtensionsStoreGetByIDFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreGetByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreGetByIDFuncCall is an object that describes an invocation
// of method GetByID on an instance of MockExtensionsStore.
type ExtensionsStoreGetByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreGetByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreGetByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreGetByUUIDFunc describes the behavior when the GetByUUID
// method of the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreGetByUUIDFunc struct {
	defaultHook func(context.Context, string) (*stores.Extension, error)
	hooks       []func(context.Context, string) (*stores.Extension, error)
	history     []ExtensionsStoreGetByUUIDFuncCall
	mutex       sync.Mutex
}

// GetByUUID delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) GetByUUID(v0 context.Context, v1 string) (*stores.Extension, error) {
	r0, r1 := m.GetByUUIDFunc.nextHook()(v0, v1)
	m.GetByUUIDFunc.appendCall(ExtensionsStoreGetByUUIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUUID method of
// the parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreGetByUUIDFunc) SetDefaultHook(hook func(context.Context, string) (*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUUID method of the parent MockExtensionsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExtensionsStoreGetByUUIDFunc) PushHook(hook func(context.Context, string) (*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreGetByUUIDFunc) SetDefaultReturn(r0 *stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreGetByUUIDFunc) PushReturn(r0 *stores.Extension, r1 error) {
	f.PushHook(func(context.Context, string) (*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreGetByUUIDFunc) nextHook() func(context.Context, string) (*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreGetByUUIDFunc) appendCall(r0 ExtensionsStoreGetByUUIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreGetByUUIDFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreGetByUUIDFunc) History() []ExtensionsStoreGetByUUIDFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreGetByUUIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreGetByUUIDFuncCall is an object that describes an
// invocation of method GetByUUID on an instance of MockExtensionsStore.
type ExtensionsStoreGetByUUIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreGetByUUIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreGetByUUIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreGetFeaturedExtensionsFunc describes the behavior when the
// GetFeaturedExtensions method of the parent MockExtensionsStore instance
// is invoked.
type ExtensionsStoreGetFeaturedExtensionsFunc struct {
	defaultHook func(context.Context) ([]*stores.Extension, error)
	hooks       []func(context.Context) ([]*stores.Extension, error)
	history     []ExtensionsStoreGetFeaturedExtensionsFuncCall
	mutex       sync.Mutex
}

// GetFeaturedExtensions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockExtensionsStore) GetFeaturedExtensions(v0 context.Context) ([]*stores.Extension, error) {
	r0, r1 := m.GetFeaturedExtensionsFunc.nextHook()(v0)
	m.GetFeaturedExtensionsFunc.appendCall(ExtensionsStoreGetFeaturedExtensionsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetFeaturedExtensions method of the parent MockExtensionsStore instance
// is invoked and the hook queue is empty.
func (f *ExtensionsStoreGetFeaturedExtensionsFunc) SetDefaultHook(hook func(context.Context) ([]*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFeaturedExtensions method of the parent MockExtensionsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ExtensionsStoreGetFeaturedExtensionsFunc) PushHook(hook func(context.Context) ([]*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreGetFeaturedExtensionsFunc) SetDefaultReturn(r0 []*stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreGetFeaturedExtensionsFunc) PushReturn(r0 []*stores.Extension, r1 error) {
	f.PushHook(func(context.Context) ([]*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreGetFeaturedExtensionsFunc) nextHook() func(context.Context) ([]*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreGetFeaturedExtensionsFunc) appendCall(r0 ExtensionsStoreGetFeaturedExtensionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// ExtensionsStoreGetFeaturedExtensionsFuncCall objects describing the
// invocations of this function.
func (f *ExtensionsStoreGetFeaturedExtensionsFunc) History() []ExtensionsStoreGetFeaturedExtensionsFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreGetFeaturedExtensionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreGetFeaturedExtensionsFuncCall is an object that describes
// an invocation of method GetFeaturedExtensions on an instance of
// MockExtensionsStore.
type ExtensionsStoreGetFeaturedExtensionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreGetFeaturedExtensionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreGetFeaturedExtensionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreGetPublisherFunc describes the behavior when the
// GetPublisher method of the parent MockExtensionsStore instance is
// invoked.
type ExtensionsStoreGetPublisherFunc struct {
	defaultHook func(context.Context, string) (*stores.Publisher, error)
	hooks       []func(context.Context, string) (*stores.Publisher, error)
	history     []ExtensionsStoreGetPublisherFuncCall
	mutex       sync.Mutex
}

// GetPublisher delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockExtensionsStore) GetPublisher(v0 context.Context, v1 string) (*stores.Publisher, error) {
	r0, r1 := m.GetPublisherFunc.nextHook()(v0, v1)
	m.GetPublisherFunc.appendCall(ExtensionsStoreGetPublisherFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetPublisher method
// of the parent MockExtensionsStore instance is invoked and the hook queue
// is empty.
func (f *ExtensionsStoreGetPublisherFunc) SetDefaultHook(hook func(context.Context, string) (*stores.Publisher, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPublisher method of the parent MockExtensionsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExtensionsStoreGetPublisherFunc) PushHook(hook func(context.Context, string) (*stores.Publisher, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreGetPublisherFunc) SetDefaultReturn(r0 *stores.Publisher, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*stores.Publisher, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreGetPublisherFunc) PushReturn(r0 *stores.Publisher, r1 error) {
	f.PushHook(func(context.Context, string) (*stores.Publisher, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreGetPublisherFunc) nextHook() func(context.Context, string) (*stores.Publisher, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreGetPublisherFunc) appendCall(r0 ExtensionsStoreGetPublisherFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreGetPublisherFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreGetPublisherFunc) History() []ExtensionsStoreGetPublisherFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreGetPublisherFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreGetPublisherFuncCall is an object that describes an
// invocation of method GetPublisher on an instance of MockExtensionsStore.
type ExtensionsStoreGetPublisherFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Publisher
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreGetPublisherFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreGetPublisherFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreHandleFunc describes the behavior when the Handle method
// of the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []ExtensionsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ExtensionsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockExtensionsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionsStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *ExtensionsStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreHandleFunc) appendCall(r0 ExtensionsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreHandleFunc) History() []ExtensionsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockExtensionsStore.
type ExtensionsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExtensionsStoreListFunc describes the behavior when the List method of
// the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreListFunc struct {
	defaultHook func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error)
	hooks       []func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error)
	history     []ExtensionsStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) List(v0 context.Context, v1 stores.ExtensionsListOptions) ([]*stores.Extension, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(ExtensionsStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreListFunc) SetDefaultHook(hook func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockExtensionsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionsStoreListFunc) PushHook(hook func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreListFunc) SetDefaultReturn(r0 []*stores.Extension, r1 error) {
	f.SetDefaultHook(func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreListFunc) PushReturn(r0 []*stores.Extension, r1 error) {
	f.PushHook(func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreListFunc) nextHook() func(context.Context, stores.ExtensionsListOptions) ([]*stores.Extension, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreListFunc) appendCall(r0 ExtensionsStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreListFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreListFunc) History() []ExtensionsStoreListFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockExtensionsStore.
type ExtensionsStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 stores.ExtensionsListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*stores.Extension
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreListPublishersFunc describes the behavior when the
// ListPublishers method of the parent MockExtensionsStore instance is
// invoked.
type ExtensionsStoreListPublishersFunc struct {
	defaultHook func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error)
	hooks       []func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error)
	history     []ExtensionsStoreListPublishersFuncCall
	mutex       sync.Mutex
}

// ListPublishers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockExtensionsStore) ListPublishers(v0 context.Context, v1 stores.PublishersListOptions) ([]*stores.Publisher, error) {
	r0, r1 := m.ListPublishersFunc.nextHook()(v0, v1)
	m.ListPublishersFunc.appendCall(ExtensionsStoreListPublishersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListPublishers
// method of the parent MockExtensionsStore instance is invoked and the hook
// queue is empty.
func (f *ExtensionsStoreListPublishersFunc) SetDefaultHook(hook func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListPublishers method of the parent MockExtensionsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ExtensionsStoreListPublishersFunc) PushHook(hook func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreListPublishersFunc) SetDefaultReturn(r0 []*stores.Publisher, r1 error) {
	f.SetDefaultHook(func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreListPublishersFunc) PushReturn(r0 []*stores.Publisher, r1 error) {
	f.PushHook(func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreListPublishersFunc) nextHook() func(context.Context, stores.PublishersListOptions) ([]*stores.Publisher, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreListPublishersFunc) appendCall(r0 ExtensionsStoreListPublishersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreListPublishersFuncCall
// objects describing the invocations of this function.
func (f *ExtensionsStoreListPublishersFunc) History() []ExtensionsStoreListPublishersFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreListPublishersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreListPublishersFuncCall is an object that describes an
// invocation of method ListPublishers on an instance of
// MockExtensionsStore.
type ExtensionsStoreListPublishersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 stores.PublishersListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*stores.Publisher
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreListPublishersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreListPublishersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreTransactFunc struct {
	defaultHook func(context.Context) (stores.ExtensionsStore, error)
	hooks       []func(context.Context) (stores.ExtensionsStore, error)
	history     []ExtensionsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) Transact(v0 context.Context) (stores.ExtensionsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ExtensionsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (stores.ExtensionsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockExtensionsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ExtensionsStoreTransactFunc) PushHook(hook func(context.Context) (stores.ExtensionsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreTransactFunc) SetDefaultReturn(r0 stores.ExtensionsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (stores.ExtensionsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreTransactFunc) PushReturn(r0 stores.ExtensionsStore, r1 error) {
	f.PushHook(func(context.Context) (stores.ExtensionsStore, error) {
		return r0, r1
	})
}

func (f *ExtensionsStoreTransactFunc) nextHook() func(context.Context) (stores.ExtensionsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreTransactFunc) appendCall(r0 ExtensionsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreTransactFunc) History() []ExtensionsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockExtensionsStore.
type ExtensionsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 stores.ExtensionsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ExtensionsStoreUpdateFunc describes the behavior when the Update method
// of the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreUpdateFunc struct {
	defaultHook func(context.Context, int32, *string) error
	hooks       []func(context.Context, int32, *string) error
	history     []ExtensionsStoreUpdateFuncCall
	mutex       sync.Mutex
}

// Update delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) Update(v0 context.Context, v1 int32, v2 *string) error {
	r0 := m.UpdateFunc.nextHook()(v0, v1, v2)
	m.UpdateFunc.appendCall(ExtensionsStoreUpdateFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Update method of the
// parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreUpdateFunc) SetDefaultHook(hook func(context.Context, int32, *string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Update method of the parent MockExtensionsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionsStoreUpdateFunc) PushHook(hook func(context.Context, int32, *string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreUpdateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, *string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreUpdateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, *string) error {
		return r0
	})
}

func (f *ExtensionsStoreUpdateFunc) nextHook() func(context.Context, int32, *string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreUpdateFunc) appendCall(r0 ExtensionsStoreUpdateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreUpdateFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreUpdateFunc) History() []ExtensionsStoreUpdateFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreUpdateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreUpdateFuncCall is an object that describes an invocation
// of method Update on an instance of MockExtensionsStore.
type ExtensionsStoreUpdateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreUpdateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreUpdateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ExtensionsStoreWithFunc describes the behavior when the With method of
// the parent MockExtensionsStore instance is invoked.
type ExtensionsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) stores.ExtensionsStore
	hooks       []func(basestore.ShareableStore) stores.ExtensionsStore
	history     []ExtensionsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockExtensionsStore) With(v0 basestore.ShareableStore) stores.ExtensionsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ExtensionsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockExtensionsStore instance is invoked and the hook queue is
// empty.
func (f *ExtensionsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) stores.ExtensionsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockExtensionsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ExtensionsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) stores.ExtensionsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ExtensionsStoreWithFunc) SetDefaultReturn(r0 stores.ExtensionsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) stores.ExtensionsStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ExtensionsStoreWithFunc) PushReturn(r0 stores.ExtensionsStore) {
	f.PushHook(func(basestore.ShareableStore) stores.ExtensionsStore {
		return r0
	})
}

func (f *ExtensionsStoreWithFunc) nextHook() func(basestore.ShareableStore) stores.ExtensionsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ExtensionsStoreWithFunc) appendCall(r0 ExtensionsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ExtensionsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ExtensionsStoreWithFunc) History() []ExtensionsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ExtensionsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ExtensionsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockExtensionsStore.
type ExtensionsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 stores.ExtensionsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ExtensionsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ExtensionsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockReleasesStore is a mock implementation of the ReleasesStore interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/frontend/internal/registry/stores)
// used for unit testing.
type MockReleasesStore struct {
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *ReleasesStoreCreateFunc
	// GetArtifactsFunc is an instance of a mock function object controlling
	// the behavior of the method GetArtifacts.
	GetArtifactsFunc *ReleasesStoreGetArtifactsFunc
	// GetLatestFunc is an instance of a mock function object controlling
	// the behavior of the method GetLatest.
	GetLatestFunc *ReleasesStoreGetLatestFunc
	// GetLatestBatchFunc is an instance of a mock function object
	// controlling the behavior of the method GetLatestBatch.
	GetLatestBatchFunc *ReleasesStoreGetLatestBatchFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *ReleasesStoreHandleFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *ReleasesStoreTransactFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *ReleasesStoreWithFunc
}

// NewMockReleasesStore creates a new mock of the ReleasesStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockReleasesStore() *MockReleasesStore {
	return &MockReleasesStore{
		CreateFunc: &ReleasesStoreCreateFunc{
			defaultHook: func(context.Context, *stores.Release) (int64, error) {
				return 0, nil
			},
		},
		GetArtifactsFunc: &ReleasesStoreGetArtifactsFunc{
			defaultHook: func(context.Context, int64) ([]byte, []byte, error) {
				return nil, nil, nil
			},
		},
		GetLatestFunc: &ReleasesStoreGetLatestFunc{
			defaultHook: func(context.Context, int32, string, bool) (*stores.Release, error) {
				return nil, nil
			},
		},
		GetLatestBatchFunc: &ReleasesStoreGetLatestBatchFunc{
			defaultHook: func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
				return nil, nil
			},
		},
		HandleFunc: &ReleasesStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				return nil
			},
		},
		TransactFunc: &ReleasesStoreTransactFunc{
			defaultHook: func(context.Context) (stores.ReleasesStore, error) {
				return nil, nil
			},
		},
		WithFunc: &ReleasesStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) stores.ReleasesStore {
				return nil
			},
		},
	}
}

// NewStrictMockReleasesStore creates a new mock of the ReleasesStore
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockReleasesStore() *MockReleasesStore {
	return &MockReleasesStore{
		CreateFunc: &ReleasesStoreCreateFunc{
			defaultHook: func(context.Context, *stores.Release) (int64, error) {
				panic("unexpected invocation of MockReleasesStore.Create")
			},
		},
		GetArtifactsFunc: &ReleasesStoreGetArtifactsFunc{
			defaultHook: func(context.Context, int64) ([]byte, []byte, error) {
				panic("unexpected invocation of MockReleasesStore.GetArtifacts")
			},
		},
		GetLatestFunc: &ReleasesStoreGetLatestFunc{
			defaultHook: func(context.Context, int32, string, bool) (*stores.Release, error) {
				panic("unexpected invocation of MockReleasesStore.GetLatest")
			},
		},
		GetLatestBatchFunc: &ReleasesStoreGetLatestBatchFunc{
			defaultHook: func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
				panic("unexpected invocation of MockReleasesStore.GetLatestBatch")
			},
		},
		HandleFunc: &ReleasesStoreHandleFunc{
			defaultHook: func() *basestore.TransactableHandle {
				panic("unexpected invocation of MockReleasesStore.Handle")
			},
		},
		TransactFunc: &ReleasesStoreTransactFunc{
			defaultHook: func(context.Context) (stores.ReleasesStore, error) {
				panic("unexpected invocation of MockReleasesStore.Transact")
			},
		},
		WithFunc: &ReleasesStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) stores.ReleasesStore {
				panic("unexpected invocation of MockReleasesStore.With")
			},
		},
	}
}

// NewMockReleasesStoreFrom creates a new mock of the MockReleasesStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockReleasesStoreFrom(i stores.ReleasesStore) *MockReleasesStore {
	return &MockReleasesStore{
		CreateFunc: &ReleasesStoreCreateFunc{
			defaultHook: i.Create,
		},
		GetArtifactsFunc: &ReleasesStoreGetArtifactsFunc{
			defaultHook: i.GetArtifacts,
		},
		GetLatestFunc: &ReleasesStoreGetLatestFunc{
			defaultHook: i.GetLatest,
		},
		GetLatestBatchFunc: &ReleasesStoreGetLatestBatchFunc{
			defaultHook: i.GetLatestBatch,
		},
		HandleFunc: &ReleasesStoreHandleFunc{
			defaultHook: i.Handle,
		},
		TransactFunc: &ReleasesStoreTransactFunc{
			defaultHook: i.Transact,
		},
		WithFunc: &ReleasesStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// ReleasesStoreCreateFunc describes the behavior when the Create method of
// the parent MockReleasesStore instance is invoked.
type ReleasesStoreCreateFunc struct {
	defaultHook func(context.Context, *stores.Release) (int64, error)
	hooks       []func(context.Context, *stores.Release) (int64, error)
	history     []ReleasesStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleasesStore) Create(v0 context.Context, v1 *stores.Release) (int64, error) {
	r0, r1 := m.CreateFunc.nextHook()(v0, v1)
	m.CreateFunc.appendCall(ReleasesStoreCreateFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockReleasesStore instance is invoked and the hook queue is empty.
func (f *ReleasesStoreCreateFunc) SetDefaultHook(hook func(context.Context, *stores.Release) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockReleasesStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleasesStoreCreateFunc) PushHook(hook func(context.Context, *stores.Release) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReleasesStoreCreateFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, *stores.Release) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReleasesStoreCreateFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, *stores.Release) (int64, error) {
		return r0, r1
	})
}

func (f *ReleasesStoreCreateFunc) nextHook() func(context.Context, *stores.Release) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleasesStoreCreateFunc) appendCall(r0 ReleasesStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleasesStoreCreateFuncCall objects
// describing the invocations of this function.
func (f *ReleasesStoreCreateFunc) History() []ReleasesStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]ReleasesStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleasesStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockReleasesStore.
type ReleasesStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *stores.Release
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleasesStoreCreateFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleasesStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReleasesStoreGetArtifactsFunc describes the behavior when the
// GetArtifacts method of the parent MockReleasesStore instance is invoked.
type ReleasesStoreGetArtifactsFunc struct {
	defaultHook func(context.Context, int64) ([]byte, []byte, error)
	hooks       []func(context.Context, int64) ([]byte, []byte, error)
	history     []ReleasesStoreGetArtifactsFuncCall
	mutex       sync.Mutex
}

// GetArtifacts delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockReleasesStore) GetArtifacts(v0 context.Context, v1 int64) ([]byte, []byte, error) {
	r0, r1, r2 := m.GetArtifactsFunc.nextHook()(v0, v1)
	m.GetArtifactsFunc.appendCall(ReleasesStoreGetArtifactsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetArtifacts method
// of the parent MockReleasesStore instance is invoked and the hook queue is
// empty.
func (f *ReleasesStoreGetArtifactsFunc) SetDefaultHook(hook func(context.Context, int64) ([]byte, []byte, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetArtifacts method of the parent MockReleasesStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ReleasesStoreGetArtifactsFunc) PushHook(hook func(context.Context, int64) ([]byte, []byte, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReleasesStoreGetArtifactsFunc) SetDefaultReturn(r0 []byte, r1 []byte, r2 error) {
	f.SetDefaultHook(func(context.Context, int64) ([]byte, []byte, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReleasesStoreGetArtifactsFunc) PushReturn(r0 []byte, r1 []byte, r2 error) {
	f.PushHook(func(context.Context, int64) ([]byte, []byte, error) {
		return r0, r1, r2
	})
}

func (f *ReleasesStoreGetArtifactsFunc) nextHook() func(context.Context, int64) ([]byte, []byte, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleasesStoreGetArtifactsFunc) appendCall(r0 ReleasesStoreGetArtifactsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleasesStoreGetArtifactsFuncCall objects
// describing the invocations of this function.
func (f *ReleasesStoreGetArtifactsFunc) History() []ReleasesStoreGetArtifactsFuncCall {
	f.mutex.Lock()
	history := make([]ReleasesStoreGetArtifactsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleasesStoreGetArtifactsFuncCall is an object that describes an
// invocation of method GetArtifacts on an instance of MockReleasesStore.
type ReleasesStoreGetArtifactsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int64
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []byte
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []byte
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleasesStoreGetArtifactsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleasesStoreGetArtifactsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ReleasesStoreGetLatestFunc describes the behavior when the GetLatest
// method of the parent MockReleasesStore instance is invoked.
type ReleasesStoreGetLatestFunc struct {
	defaultHook func(context.Context, int32, string, bool) (*stores.Release, error)
	hooks       []func(context.Context, int32, string, bool) (*stores.Release, error)
	history     []ReleasesStoreGetLatestFuncCall
	mutex       sync.Mutex
}

// GetLatest delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleasesStore) GetLatest(v0 context.Context, v1 int32, v2 string, v3 bool) (*stores.Release, error) {
	r0, r1 := m.GetLatestFunc.nextHook()(v0, v1, v2, v3)
	m.GetLatestFunc.appendCall(ReleasesStoreGetLatestFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatest method of
// the parent MockReleasesStore instance is invoked and the hook queue is
// empty.
func (f *ReleasesStoreGetLatestFunc) SetDefaultHook(hook func(context.Context, int32, string, bool) (*stores.Release, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatest method of the parent MockReleasesStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *ReleasesStoreGetLatestFunc) PushHook(hook func(context.Context, int32, string, bool) (*stores.Release, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReleasesStoreGetLatestFunc) SetDefaultReturn(r0 *stores.Release, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, bool) (*stores.Release, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReleasesStoreGetLatestFunc) PushReturn(r0 *stores.Release, r1 error) {
	f.PushHook(func(context.Context, int32, string, bool) (*stores.Release, error) {
		return r0, r1
	})
}

func (f *ReleasesStoreGetLatestFunc) nextHook() func(context.Context, int32, string, bool) (*stores.Release, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleasesStoreGetLatestFunc) appendCall(r0 ReleasesStoreGetLatestFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleasesStoreGetLatestFuncCall objects
// describing the invocations of this function.
func (f *ReleasesStoreGetLatestFunc) History() []ReleasesStoreGetLatestFuncCall {
	f.mutex.Lock()
	history := make([]ReleasesStoreGetLatestFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleasesStoreGetLatestFuncCall is an object that describes an invocation
// of method GetLatest on an instance of MockReleasesStore.
type ReleasesStoreGetLatestFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *stores.Release
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleasesStoreGetLatestFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleasesStoreGetLatestFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReleasesStoreGetLatestBatchFunc describes the behavior when the
// GetLatestBatch method of the parent MockReleasesStore instance is
// invoked.
type ReleasesStoreGetLatestBatchFunc struct {
	defaultHook func(context.Context, []int32, string, bool) ([]*stores.Release, error)
	hooks       []func(context.Context, []int32, string, bool) ([]*stores.Release, error)
	history     []ReleasesStoreGetLatestBatchFuncCall
	mutex       sync.Mutex
}

// GetLatestBatch delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockReleasesStore) GetLatestBatch(v0 context.Context, v1 []int32, v2 string, v3 bool) ([]*stores.Release, error) {
	r0, r1 := m.GetLatestBatchFunc.nextHook()(v0, v1, v2, v3)
	m.GetLatestBatchFunc.appendCall(ReleasesStoreGetLatestBatchFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetLatestBatch
// method of the parent MockReleasesStore instance is invoked and the hook
// queue is empty.
func (f *ReleasesStoreGetLatestBatchFunc) SetDefaultHook(hook func(context.Context, []int32, string, bool) ([]*stores.Release, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLatestBatch method of the parent MockReleasesStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *ReleasesStoreGetLatestBatchFunc) PushHook(hook func(context.Context, []int32, string, bool) ([]*stores.Release, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReleasesStoreGetLatestBatchFunc) SetDefaultReturn(r0 []*stores.Release, r1 error) {
	f.SetDefaultHook(func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReleasesStoreGetLatestBatchFunc) PushReturn(r0 []*stores.Release, r1 error) {
	f.PushHook(func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
		return r0, r1
	})
}

func (f *ReleasesStoreGetLatestBatchFunc) nextHook() func(context.Context, []int32, string, bool) ([]*stores.Release, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleasesStoreGetLatestBatchFunc) appendCall(r0 ReleasesStoreGetLatestBatchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleasesStoreGetLatestBatchFuncCall objects
// describing the invocations of this function.
func (f *ReleasesStoreGetLatestBatchFunc) History() []ReleasesStoreGetLatestBatchFuncCall {
	f.mutex.Lock()
	history := make([]ReleasesStoreGetLatestBatchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleasesStoreGetLatestBatchFuncCall is an object that describes an
// invocation of method GetLatestBatch on an instance of MockReleasesStore.
type ReleasesStoreGetLatestBatchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*stores.Release
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleasesStoreGetLatestBatchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleasesStoreGetLatestBatchFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReleasesStoreHandleFunc describes the behavior when the Handle method of
// the parent MockReleasesStore instance is invoked.
type ReleasesStoreHandleFunc struct {
	defaultHook func() *basestore.TransactableHandle
	hooks       []func() *basestore.TransactableHandle
	history     []ReleasesStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleasesStore) Handle() *basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(ReleasesStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockReleasesStore instance is invoked and the hook queue is empty.
func (f *ReleasesStoreHandleFunc) SetDefaultHook(hook func() *basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockReleasesStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleasesStoreHandleFunc) PushHook(hook func() *basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReleasesStoreHandleFunc) SetDefaultReturn(r0 *basestore.TransactableHandle) {
	f.SetDefaultHook(func() *basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReleasesStoreHandleFunc) PushReturn(r0 *basestore.TransactableHandle) {
	f.PushHook(func() *basestore.TransactableHandle {
		return r0
	})
}

func (f *ReleasesStoreHandleFunc) nextHook() func() *basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleasesStoreHandleFunc) appendCall(r0 ReleasesStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleasesStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *ReleasesStoreHandleFunc) History() []ReleasesStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]ReleasesStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleasesStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockReleasesStore.
type ReleasesStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleasesStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleasesStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ReleasesStoreTransactFunc describes the behavior when the Transact method
// of the parent MockReleasesStore instance is invoked.
type ReleasesStoreTransactFunc struct {
	defaultHook func(context.Context) (stores.ReleasesStore, error)
	hooks       []func(context.Context) (stores.ReleasesStore, error)
	history     []ReleasesStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleasesStore) Transact(v0 context.Context) (stores.ReleasesStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(ReleasesStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockReleasesStore instance is invoked and the hook queue is
// empty.
func (f *ReleasesStoreTransactFunc) SetDefaultHook(hook func(context.Context) (stores.ReleasesStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockReleasesStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleasesStoreTransactFunc) PushHook(hook func(context.Context) (stores.ReleasesStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReleasesStoreTransactFunc) SetDefaultReturn(r0 stores.ReleasesStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (stores.ReleasesStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReleasesStoreTransactFunc) PushReturn(r0 stores.ReleasesStore, r1 error) {
	f.PushHook(func(context.Context) (stores.ReleasesStore, error) {
		return r0, r1
	})
}

func (f *ReleasesStoreTransactFunc) nextHook() func(context.Context) (stores.ReleasesStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleasesStoreTransactFunc) appendCall(r0 ReleasesStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleasesStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *ReleasesStoreTransactFunc) History() []ReleasesStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]ReleasesStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleasesStoreTransactFuncCall is an object that describes an invocation
// of method Transact on an instance of MockReleasesStore.
type ReleasesStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 stores.ReleasesStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleasesStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleasesStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ReleasesStoreWithFunc describes the behavior when the With method of the
// parent MockReleasesStore instance is invoked.
type ReleasesStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) stores.ReleasesStore
	hooks       []func(basestore.ShareableStore) stores.ReleasesStore
	history     []ReleasesStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockReleasesStore) With(v0 basestore.ShareableStore) stores.ReleasesStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(ReleasesStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockReleasesStore instance is invoked and the hook queue is empty.
func (f *ReleasesStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) stores.ReleasesStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockReleasesStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ReleasesStoreWithFunc) PushHook(hook func(basestore.ShareableStore) stores.ReleasesStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ReleasesStoreWithFunc) SetDefaultReturn(r0 stores.ReleasesStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) stores.ReleasesStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ReleasesStoreWithFunc) PushReturn(r0 stores.ReleasesStore) {
	f.PushHook(func(basestore.ShareableStore) stores.ReleasesStore {
		return r0
	})
}

func (f *ReleasesStoreWithFunc) nextHook() func(basestore.ShareableStore) stores.ReleasesStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleasesStoreWithFunc) appendCall(r0 ReleasesStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleasesStoreWithFuncCall objects
// describing the invocations of this function.
func (f *ReleasesStoreWithFunc) History() []ReleasesStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]ReleasesStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleasesStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockReleasesStore.
type ReleasesStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 stores.ReleasesStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleasesStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleasesStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
