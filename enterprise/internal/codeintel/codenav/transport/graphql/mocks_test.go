// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package graphql

import (
	"context"
	"sync"
	"time"

	codenav "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav"
	shared1 "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/shared"
	shared "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/uploads/shared"
)

// MockAutoIndexingService is a mock implementation of the
// AutoIndexingService interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockAutoIndexingService struct {
	// QueueRepoRevFunc is an instance of a mock function object controlling
	// the behavior of the method QueueRepoRev.
	QueueRepoRevFunc *AutoIndexingServiceQueueRepoRevFunc
}

// NewMockAutoIndexingService creates a new mock of the AutoIndexingService
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: func(context.Context, int, string) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockAutoIndexingService creates a new mock of the
// AutoIndexingService interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockAutoIndexingService() *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: func(context.Context, int, string) error {
				panic("unexpected invocation of MockAutoIndexingService.QueueRepoRev")
			},
		},
	}
}

// NewMockAutoIndexingServiceFrom creates a new mock of the
// MockAutoIndexingService interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockAutoIndexingServiceFrom(i AutoIndexingService) *MockAutoIndexingService {
	return &MockAutoIndexingService{
		QueueRepoRevFunc: &AutoIndexingServiceQueueRepoRevFunc{
			defaultHook: i.QueueRepoRev,
		},
	}
}

// AutoIndexingServiceQueueRepoRevFunc describes the behavior when the
// QueueRepoRev method of the parent MockAutoIndexingService instance is
// invoked.
type AutoIndexingServiceQueueRepoRevFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []AutoIndexingServiceQueueRepoRevFuncCall
	mutex       sync.Mutex
}

// QueueRepoRev delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockAutoIndexingService) QueueRepoRev(v0 context.Context, v1 int, v2 string) error {
	r0 := m.QueueRepoRevFunc.nextHook()(v0, v1, v2)
	m.QueueRepoRevFunc.appendCall(AutoIndexingServiceQueueRepoRevFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueueRepoRev method
// of the parent MockAutoIndexingService instance is invoked and the hook
// queue is empty.
func (f *AutoIndexingServiceQueueRepoRevFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueueRepoRev method of the parent MockAutoIndexingService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *AutoIndexingServiceQueueRepoRevFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AutoIndexingServiceQueueRepoRevFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AutoIndexingServiceQueueRepoRevFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *AutoIndexingServiceQueueRepoRevFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AutoIndexingServiceQueueRepoRevFunc) appendCall(r0 AutoIndexingServiceQueueRepoRevFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AutoIndexingServiceQueueRepoRevFuncCall
// objects describing the invocations of this function.
func (f *AutoIndexingServiceQueueRepoRevFunc) History() []AutoIndexingServiceQueueRepoRevFuncCall {
	f.mutex.Lock()
	history := make([]AutoIndexingServiceQueueRepoRevFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AutoIndexingServiceQueueRepoRevFuncCall is an object that describes an
// invocation of method QueueRepoRev on an instance of
// MockAutoIndexingService.
type AutoIndexingServiceQueueRepoRevFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AutoIndexingServiceQueueRepoRevFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AutoIndexingServiceQueueRepoRevFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockCodeNavService is a mock implementation of the CodeNavService
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockCodeNavService struct {
	// GetClosestDumpsForBlobFunc is an instance of a mock function object
	// controlling the behavior of the method GetClosestDumpsForBlob.
	GetClosestDumpsForBlobFunc *CodeNavServiceGetClosestDumpsForBlobFunc
	// GetDefinitionsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDefinitions.
	GetDefinitionsFunc *CodeNavServiceGetDefinitionsFunc
	// GetDiagnosticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDiagnostics.
	GetDiagnosticsFunc *CodeNavServiceGetDiagnosticsFunc
	// GetHoverFunc is an instance of a mock function object controlling the
	// behavior of the method GetHover.
	GetHoverFunc *CodeNavServiceGetHoverFunc
	// GetImplementationsFunc is an instance of a mock function object
	// controlling the behavior of the method GetImplementations.
	GetImplementationsFunc *CodeNavServiceGetImplementationsFunc
	// GetRangesFunc is an instance of a mock function object controlling
	// the behavior of the method GetRanges.
	GetRangesFunc *CodeNavServiceGetRangesFunc
	// GetReferencesFunc is an instance of a mock function object
	// controlling the behavior of the method GetReferences.
	GetReferencesFunc *CodeNavServiceGetReferencesFunc
	// GetStencilFunc is an instance of a mock function object controlling
	// the behavior of the method GetStencil.
	GetStencilFunc *CodeNavServiceGetStencilFunc
}

// NewMockCodeNavService creates a new mock of the CodeNavService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockCodeNavService() *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) (r0 []shared.Dump, r1 error) {
				return
			},
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (r0 []shared1.UploadLocation, r1 error) {
				return
			},
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
				return
			},
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (r0 string, r1 shared1.Range, r2 bool, r3 error) {
				return
			},
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) (r0 []shared1.UploadLocation, r1 codenav.ImplementationsCursor, r2 error) {
				return
			},
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) (r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
				return
			},
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) (r0 []shared1.UploadLocation, r1 codenav.ReferencesCursor, r2 error) {
				return
			},
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (r0 []shared1.Range, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockCodeNavService creates a new mock of the CodeNavService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockCodeNavService() *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
				panic("unexpected invocation of MockCodeNavService.GetClosestDumpsForBlob")
			},
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
				panic("unexpected invocation of MockCodeNavService.GetDefinitions")
			},
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
				panic("unexpected invocation of MockCodeNavService.GetDiagnostics")
			},
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
				panic("unexpected invocation of MockCodeNavService.GetHover")
			},
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
				panic("unexpected invocation of MockCodeNavService.GetImplementations")
			},
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
				panic("unexpected invocation of MockCodeNavService.GetRanges")
			},
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
				panic("unexpected invocation of MockCodeNavService.GetReferences")
			},
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error) {
				panic("unexpected invocation of MockCodeNavService.GetStencil")
			},
		},
	}
}

// NewMockCodeNavServiceFrom creates a new mock of the MockCodeNavService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockCodeNavServiceFrom(i CodeNavService) *MockCodeNavService {
	return &MockCodeNavService{
		GetClosestDumpsForBlobFunc: &CodeNavServiceGetClosestDumpsForBlobFunc{
			defaultHook: i.GetClosestDumpsForBlob,
		},
		GetDefinitionsFunc: &CodeNavServiceGetDefinitionsFunc{
			defaultHook: i.GetDefinitions,
		},
		GetDiagnosticsFunc: &CodeNavServiceGetDiagnosticsFunc{
			defaultHook: i.GetDiagnostics,
		},
		GetHoverFunc: &CodeNavServiceGetHoverFunc{
			defaultHook: i.GetHover,
		},
		GetImplementationsFunc: &CodeNavServiceGetImplementationsFunc{
			defaultHook: i.GetImplementations,
		},
		GetRangesFunc: &CodeNavServiceGetRangesFunc{
			defaultHook: i.GetRanges,
		},
		GetReferencesFunc: &CodeNavServiceGetReferencesFunc{
			defaultHook: i.GetReferences,
		},
		GetStencilFunc: &CodeNavServiceGetStencilFunc{
			defaultHook: i.GetStencil,
		},
	}
}

// CodeNavServiceGetClosestDumpsForBlobFunc describes the behavior when the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// is invoked.
type CodeNavServiceGetClosestDumpsForBlobFunc struct {
	defaultHook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)
	hooks       []func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)
	history     []CodeNavServiceGetClosestDumpsForBlobFuncCall
	mutex       sync.Mutex
}

// GetClosestDumpsForBlob delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetClosestDumpsForBlob(v0 context.Context, v1 int, v2 string, v3 string, v4 bool, v5 string) ([]shared.Dump, error) {
	r0, r1 := m.GetClosestDumpsForBlobFunc.nextHook()(v0, v1, v2, v3, v4, v5)
	m.GetClosestDumpsForBlobFunc.appendCall(CodeNavServiceGetClosestDumpsForBlobFuncCall{v0, v1, v2, v3, v4, v5, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// is invoked and the hook queue is empty.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) SetDefaultHook(hook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetClosestDumpsForBlob method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) PushHook(hook func(context.Context, int, string, string, bool, string) ([]shared.Dump, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) SetDefaultReturn(r0 []shared.Dump, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) PushReturn(r0 []shared.Dump, r1 error) {
	f.PushHook(func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetClosestDumpsForBlobFunc) nextHook() func(context.Context, int, string, string, bool, string) ([]shared.Dump, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetClosestDumpsForBlobFunc) appendCall(r0 CodeNavServiceGetClosestDumpsForBlobFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// CodeNavServiceGetClosestDumpsForBlobFuncCall objects describing the
// invocations of this function.
func (f *CodeNavServiceGetClosestDumpsForBlobFunc) History() []CodeNavServiceGetClosestDumpsForBlobFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetClosestDumpsForBlobFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetClosestDumpsForBlobFuncCall is an object that describes
// an invocation of method GetClosestDumpsForBlob on an instance of
// MockCodeNavService.
type CodeNavServiceGetClosestDumpsForBlobFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Dump
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetClosestDumpsForBlobFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetClosestDumpsForBlobFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetDefinitionsFunc describes the behavior when the
// GetDefinitions method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetDefinitionsFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)
	history     []CodeNavServiceGetDefinitionsFuncCall
	mutex       sync.Mutex
}

// GetDefinitions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetDefinitions(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState) ([]shared1.UploadLocation, error) {
	r0, r1 := m.GetDefinitionsFunc.nextHook()(v0, v1, v2)
	m.GetDefinitionsFunc.appendCall(CodeNavServiceGetDefinitionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetDefinitions
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetDefinitionsFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDefinitions method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetDefinitionsFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetDefinitionsFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetDefinitionsFunc) PushReturn(r0 []shared1.UploadLocation, r1 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetDefinitionsFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.UploadLocation, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetDefinitionsFunc) appendCall(r0 CodeNavServiceGetDefinitionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetDefinitionsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetDefinitionsFunc) History() []CodeNavServiceGetDefinitionsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetDefinitionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetDefinitionsFuncCall is an object that describes an
// invocation of method GetDefinitions on an instance of MockCodeNavService.
type CodeNavServiceGetDefinitionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetDefinitionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetDefinitionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetDiagnosticsFunc describes the behavior when the
// GetDiagnostics method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetDiagnosticsFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)
	history     []CodeNavServiceGetDiagnosticsFuncCall
	mutex       sync.Mutex
}

// GetDiagnostics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetDiagnostics(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
	r0, r1, r2 := m.GetDiagnosticsFunc.nextHook()(v0, v1, v2)
	m.GetDiagnosticsFunc.appendCall(CodeNavServiceGetDiagnosticsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDiagnostics
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetDiagnosticsFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDiagnostics method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetDiagnosticsFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetDiagnosticsFunc) SetDefaultReturn(r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetDiagnosticsFunc) PushReturn(r0 []codenav.DiagnosticAtUpload, r1 int, r2 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetDiagnosticsFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]codenav.DiagnosticAtUpload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetDiagnosticsFunc) appendCall(r0 CodeNavServiceGetDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetDiagnosticsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetDiagnosticsFunc) History() []CodeNavServiceGetDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetDiagnosticsFuncCall is an object that describes an
// invocation of method GetDiagnostics on an instance of MockCodeNavService.
type CodeNavServiceGetDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []codenav.DiagnosticAtUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetHoverFunc describes the behavior when the GetHover
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetHoverFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)
	history     []CodeNavServiceGetHoverFuncCall
	mutex       sync.Mutex
}

// GetHover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeNavService) GetHover(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState) (string, shared1.Range, bool, error) {
	r0, r1, r2, r3 := m.GetHoverFunc.nextHook()(v0, v1, v2)
	m.GetHoverFunc.appendCall(CodeNavServiceGetHoverFuncCall{v0, v1, v2, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the GetHover method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetHoverFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetHover method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetHoverFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetHoverFunc) SetDefaultReturn(r0 string, r1 shared1.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetHoverFunc) PushReturn(r0 string, r1 shared1.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *CodeNavServiceGetHoverFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState) (string, shared1.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetHoverFunc) appendCall(r0 CodeNavServiceGetHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetHoverFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetHoverFunc) History() []CodeNavServiceGetHoverFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetHoverFuncCall is an object that describes an invocation
// of method GetHover on an instance of MockCodeNavService.
type CodeNavServiceGetHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared1.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// CodeNavServiceGetImplementationsFunc describes the behavior when the
// GetImplementations method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetImplementationsFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error)
	history     []CodeNavServiceGetImplementationsFuncCall
	mutex       sync.Mutex
}

// GetImplementations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockCodeNavService) GetImplementations(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState, v3 codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
	r0, r1, r2 := m.GetImplementationsFunc.nextHook()(v0, v1, v2, v3)
	m.GetImplementationsFunc.appendCall(CodeNavServiceGetImplementationsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetImplementations
// method of the parent MockCodeNavService instance is invoked and the hook
// queue is empty.
func (f *CodeNavServiceGetImplementationsFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetImplementations method of the parent MockCodeNavService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *CodeNavServiceGetImplementationsFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetImplementationsFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 codenav.ImplementationsCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetImplementationsFunc) PushReturn(r0 []shared1.UploadLocation, r1 codenav.ImplementationsCursor, r2 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetImplementationsFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ImplementationsCursor) ([]shared1.UploadLocation, codenav.ImplementationsCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetImplementationsFunc) appendCall(r0 CodeNavServiceGetImplementationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetImplementationsFuncCall
// objects describing the invocations of this function.
func (f *CodeNavServiceGetImplementationsFunc) History() []CodeNavServiceGetImplementationsFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetImplementationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetImplementationsFuncCall is an object that describes an
// invocation of method GetImplementations on an instance of
// MockCodeNavService.
type CodeNavServiceGetImplementationsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 codenav.ImplementationsCursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 codenav.ImplementationsCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetImplementationsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetImplementationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetRangesFunc describes the behavior when the GetRanges
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetRangesFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)
	history     []CodeNavServiceGetRangesFuncCall
	mutex       sync.Mutex
}

// GetRanges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCodeNavService) GetRanges(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState, v3 int, v4 int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
	r0, r1 := m.GetRangesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetRangesFunc.appendCall(CodeNavServiceGetRangesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRanges method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetRangesFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRanges method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetRangesFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetRangesFunc) SetDefaultReturn(r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetRangesFunc) PushReturn(r0 []codenav.AdjustedCodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetRangesFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState, int, int) ([]codenav.AdjustedCodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetRangesFunc) appendCall(r0 CodeNavServiceGetRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetRangesFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetRangesFunc) History() []CodeNavServiceGetRangesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetRangesFuncCall is an object that describes an invocation
// of method GetRanges on an instance of MockCodeNavService.
type CodeNavServiceGetRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []codenav.AdjustedCodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// CodeNavServiceGetReferencesFunc describes the behavior when the
// GetReferences method of the parent MockCodeNavService instance is
// invoked.
type CodeNavServiceGetReferencesFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error)
	history     []CodeNavServiceGetReferencesFuncCall
	mutex       sync.Mutex
}

// GetReferences delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetReferences(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState, v3 codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
	r0, r1, r2 := m.GetReferencesFunc.nextHook()(v0, v1, v2, v3)
	m.GetReferencesFunc.appendCall(CodeNavServiceGetReferencesFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetReferences method
// of the parent MockCodeNavService instance is invoked and the hook queue
// is empty.
func (f *CodeNavServiceGetReferencesFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReferences method of the parent MockCodeNavService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *CodeNavServiceGetReferencesFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetReferencesFunc) SetDefaultReturn(r0 []shared1.UploadLocation, r1 codenav.ReferencesCursor, r2 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetReferencesFunc) PushReturn(r0 []shared1.UploadLocation, r1 codenav.ReferencesCursor, r2 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
		return r0, r1, r2
	})
}

func (f *CodeNavServiceGetReferencesFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState, codenav.ReferencesCursor) ([]shared1.UploadLocation, codenav.ReferencesCursor, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetReferencesFunc) appendCall(r0 CodeNavServiceGetReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetReferencesFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetReferencesFunc) History() []CodeNavServiceGetReferencesFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetReferencesFuncCall is an object that describes an
// invocation of method GetReferences on an instance of MockCodeNavService.
type CodeNavServiceGetReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 codenav.ReferencesCursor
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.UploadLocation
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 codenav.ReferencesCursor
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// CodeNavServiceGetStencilFunc describes the behavior when the GetStencil
// method of the parent MockCodeNavService instance is invoked.
type CodeNavServiceGetStencilFunc struct {
	defaultHook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error)
	hooks       []func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error)
	history     []CodeNavServiceGetStencilFuncCall
	mutex       sync.Mutex
}

// GetStencil delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockCodeNavService) GetStencil(v0 context.Context, v1 codenav.RequestArgs, v2 codenav.RequestState) ([]shared1.Range, error) {
	r0, r1 := m.GetStencilFunc.nextHook()(v0, v1, v2)
	m.GetStencilFunc.appendCall(CodeNavServiceGetStencilFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStencil method of
// the parent MockCodeNavService instance is invoked and the hook queue is
// empty.
func (f *CodeNavServiceGetStencilFunc) SetDefaultHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStencil method of the parent MockCodeNavService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *CodeNavServiceGetStencilFunc) PushHook(hook func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *CodeNavServiceGetStencilFunc) SetDefaultReturn(r0 []shared1.Range, r1 error) {
	f.SetDefaultHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *CodeNavServiceGetStencilFunc) PushReturn(r0 []shared1.Range, r1 error) {
	f.PushHook(func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error) {
		return r0, r1
	})
}

func (f *CodeNavServiceGetStencilFunc) nextHook() func(context.Context, codenav.RequestArgs, codenav.RequestState) ([]shared1.Range, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CodeNavServiceGetStencilFunc) appendCall(r0 CodeNavServiceGetStencilFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CodeNavServiceGetStencilFuncCall objects
// describing the invocations of this function.
func (f *CodeNavServiceGetStencilFunc) History() []CodeNavServiceGetStencilFuncCall {
	f.mutex.Lock()
	history := make([]CodeNavServiceGetStencilFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CodeNavServiceGetStencilFuncCall is an object that describes an
// invocation of method GetStencil on an instance of MockCodeNavService.
type CodeNavServiceGetStencilFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 codenav.RequestArgs
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codenav.RequestState
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CodeNavServiceGetStencilFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CodeNavServiceGetStencilFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockUploadsService is a mock implementation of the UploadsService
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/codenav/transport/graphql)
// used for unit testing.
type MockUploadsService struct {
	// DeleteIndexByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteIndexByID.
	DeleteIndexByIDFunc *UploadsServiceDeleteIndexByIDFunc
	// DeleteIndexesFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteIndexes.
	DeleteIndexesFunc *UploadsServiceDeleteIndexesFunc
	// DeleteUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploadByID.
	DeleteUploadByIDFunc *UploadsServiceDeleteUploadByIDFunc
	// DeleteUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploads.
	DeleteUploadsFunc *UploadsServiceDeleteUploadsFunc
	// GetAuditLogsForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method GetAuditLogsForUpload.
	GetAuditLogsForUploadFunc *UploadsServiceGetAuditLogsForUploadFunc
	// GetCommitGraphMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method GetCommitGraphMetadata.
	GetCommitGraphMetadataFunc *UploadsServiceGetCommitGraphMetadataFunc
	// GetIndexByIDFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexByID.
	GetIndexByIDFunc *UploadsServiceGetIndexByIDFunc
	// GetIndexersFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexers.
	GetIndexersFunc *UploadsServiceGetIndexersFunc
	// GetIndexesFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexes.
	GetIndexesFunc *UploadsServiceGetIndexesFunc
	// GetIndexesByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetIndexesByIDs.
	GetIndexesByIDsFunc *UploadsServiceGetIndexesByIDsFunc
	// GetLastUploadRetentionScanForRepositoryFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetLastUploadRetentionScanForRepository.
	GetLastUploadRetentionScanForRepositoryFunc *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc
	// GetRecentIndexesSummaryFunc is an instance of a mock function object
	// controlling the behavior of the method GetRecentIndexesSummary.
	GetRecentIndexesSummaryFunc *UploadsServiceGetRecentIndexesSummaryFunc
	// GetRecentUploadsSummaryFunc is an instance of a mock function object
	// controlling the behavior of the method GetRecentUploadsSummary.
	GetRecentUploadsSummaryFunc *UploadsServiceGetRecentUploadsSummaryFunc
	// GetUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadByID.
	GetUploadByIDFunc *UploadsServiceGetUploadByIDFunc
	// GetUploadsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUploads.
	GetUploadsFunc *UploadsServiceGetUploadsFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *UploadsServiceGetUploadsByIDsFunc
	// NumRepositoriesWithCodeIntelligenceFunc is an instance of a mock
	// function object controlling the behavior of the method
	// NumRepositoriesWithCodeIntelligence.
	NumRepositoriesWithCodeIntelligenceFunc *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc
	// ReindexIndexByIDFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexIndexByID.
	ReindexIndexByIDFunc *UploadsServiceReindexIndexByIDFunc
	// ReindexIndexesFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexIndexes.
	ReindexIndexesFunc *UploadsServiceReindexIndexesFunc
	// ReindexUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexUploadByID.
	ReindexUploadByIDFunc *UploadsServiceReindexUploadByIDFunc
	// ReindexUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexUploads.
	ReindexUploadsFunc *UploadsServiceReindexUploadsFunc
	// RepositoryIDsWithErrorsFunc is an instance of a mock function object
	// controlling the behavior of the method RepositoryIDsWithErrors.
	RepositoryIDsWithErrorsFunc *UploadsServiceRepositoryIDsWithErrorsFunc
}

// NewMockUploadsService creates a new mock of the UploadsService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		DeleteIndexByIDFunc: &UploadsServiceDeleteIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 error) {
				return
			},
		},
		DeleteIndexesFunc: &UploadsServiceDeleteIndexesFunc{
			defaultHook: func(context.Context, shared.DeleteIndexesOptions) (r0 error) {
				return
			},
		},
		DeleteUploadByIDFunc: &UploadsServiceDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 error) {
				return
			},
		},
		DeleteUploadsFunc: &UploadsServiceDeleteUploadsFunc{
			defaultHook: func(context.Context, shared.DeleteUploadsOptions) (r0 error) {
				return
			},
		},
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) (r0 []shared.UploadLog, r1 error) {
				return
			},
		},
		GetCommitGraphMetadataFunc: &UploadsServiceGetCommitGraphMetadataFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 *time.Time, r2 error) {
				return
			},
		},
		GetIndexByIDFunc: &UploadsServiceGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 shared.Index, r1 bool, r2 error) {
				return
			},
		},
		GetIndexersFunc: &UploadsServiceGetIndexersFunc{
			defaultHook: func(context.Context, shared.GetIndexersOptions) (r0 []string, r1 error) {
				return
			},
		},
		GetIndexesFunc: &UploadsServiceGetIndexesFunc{
			defaultHook: func(context.Context, shared.GetIndexesOptions) (r0 []shared.Index, r1 int, r2 error) {
				return
			},
		},
		GetIndexesByIDsFunc: &UploadsServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Index, r1 error) {
				return
			},
		},
		GetLastUploadRetentionScanForRepositoryFunc: &UploadsServiceGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (r0 *time.Time, r1 error) {
				return
			},
		},
		GetRecentIndexesSummaryFunc: &UploadsServiceGetRecentIndexesSummaryFunc{
			defaultHook: func(context.Context, int) (r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
				return
			},
		},
		GetRecentUploadsSummaryFunc: &UploadsServiceGetRecentUploadsSummaryFunc{
			defaultHook: func(context.Context, int) (r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
				return
			},
		},
		GetUploadByIDFunc: &UploadsServiceGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 shared.Upload, r1 bool, r2 error) {
				return
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, shared.GetUploadsOptions) (r0 []shared.Upload, r1 int, r2 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Upload, r1 error) {
				return
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &UploadsServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		ReindexIndexByIDFunc: &UploadsServiceReindexIndexByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		ReindexIndexesFunc: &UploadsServiceReindexIndexesFunc{
			defaultHook: func(context.Context, shared.ReindexIndexesOptions) (r0 error) {
				return
			},
		},
		ReindexUploadByIDFunc: &UploadsServiceReindexUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		ReindexUploadsFunc: &UploadsServiceReindexUploadsFunc{
			defaultHook: func(context.Context, shared.ReindexUploadsOptions) (r0 error) {
				return
			},
		},
		RepositoryIDsWithErrorsFunc: &UploadsServiceRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) (r0 []shared.RepositoryWithCount, r1 int, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadsService creates a new mock of the UploadsService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		DeleteIndexByIDFunc: &UploadsServiceDeleteIndexByIDFunc{
			defaultHook: func(context.Context, int) (bool, error) {
				panic("unexpected invocation of MockUploadsService.DeleteIndexByID")
			},
		},
		DeleteIndexesFunc: &UploadsServiceDeleteIndexesFunc{
			defaultHook: func(context.Context, shared.DeleteIndexesOptions) error {
				panic("unexpected invocation of MockUploadsService.DeleteIndexes")
			},
		},
		DeleteUploadByIDFunc: &UploadsServiceDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (bool, error) {
				panic("unexpected invocation of MockUploadsService.DeleteUploadByID")
			},
		},
		DeleteUploadsFunc: &UploadsServiceDeleteUploadsFunc{
			defaultHook: func(context.Context, shared.DeleteUploadsOptions) error {
				panic("unexpected invocation of MockUploadsService.DeleteUploads")
			},
		},
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) ([]shared.UploadLog, error) {
				panic("unexpected invocation of MockUploadsService.GetAuditLogsForUpload")
			},
		},
		GetCommitGraphMetadataFunc: &UploadsServiceGetCommitGraphMetadataFunc{
			defaultHook: func(context.Context, int) (bool, *time.Time, error) {
				panic("unexpected invocation of MockUploadsService.GetCommitGraphMetadata")
			},
		},
		GetIndexByIDFunc: &UploadsServiceGetIndexByIDFunc{
			defaultHook: func(context.Context, int) (shared.Index, bool, error) {
				panic("unexpected invocation of MockUploadsService.GetIndexByID")
			},
		},
		GetIndexersFunc: &UploadsServiceGetIndexersFunc{
			defaultHook: func(context.Context, shared.GetIndexersOptions) ([]string, error) {
				panic("unexpected invocation of MockUploadsService.GetIndexers")
			},
		},
		GetIndexesFunc: &UploadsServiceGetIndexesFunc{
			defaultHook: func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error) {
				panic("unexpected invocation of MockUploadsService.GetIndexes")
			},
		},
		GetIndexesByIDsFunc: &UploadsServiceGetIndexesByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Index, error) {
				panic("unexpected invocation of MockUploadsService.GetIndexesByIDs")
			},
		},
		GetLastUploadRetentionScanForRepositoryFunc: &UploadsServiceGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (*time.Time, error) {
				panic("unexpected invocation of MockUploadsService.GetLastUploadRetentionScanForRepository")
			},
		},
		GetRecentIndexesSummaryFunc: &UploadsServiceGetRecentIndexesSummaryFunc{
			defaultHook: func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
				panic("unexpected invocation of MockUploadsService.GetRecentIndexesSummary")
			},
		},
		GetRecentUploadsSummaryFunc: &UploadsServiceGetRecentUploadsSummaryFunc{
			defaultHook: func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
				panic("unexpected invocation of MockUploadsService.GetRecentUploadsSummary")
			},
		},
		GetUploadByIDFunc: &UploadsServiceGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (shared.Upload, bool, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadByID")
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
				panic("unexpected invocation of MockUploadsService.GetUploads")
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Upload, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadsByIDs")
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &UploadsServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockUploadsService.NumRepositoriesWithCodeIntelligence")
			},
		},
		ReindexIndexByIDFunc: &UploadsServiceReindexIndexByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockUploadsService.ReindexIndexByID")
			},
		},
		ReindexIndexesFunc: &UploadsServiceReindexIndexesFunc{
			defaultHook: func(context.Context, shared.ReindexIndexesOptions) error {
				panic("unexpected invocation of MockUploadsService.ReindexIndexes")
			},
		},
		ReindexUploadByIDFunc: &UploadsServiceReindexUploadByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockUploadsService.ReindexUploadByID")
			},
		},
		ReindexUploadsFunc: &UploadsServiceReindexUploadsFunc{
			defaultHook: func(context.Context, shared.ReindexUploadsOptions) error {
				panic("unexpected invocation of MockUploadsService.ReindexUploads")
			},
		},
		RepositoryIDsWithErrorsFunc: &UploadsServiceRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
				panic("unexpected invocation of MockUploadsService.RepositoryIDsWithErrors")
			},
		},
	}
}

// NewMockUploadsServiceFrom creates a new mock of the MockUploadsService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadsServiceFrom(i UploadsService) *MockUploadsService {
	return &MockUploadsService{
		DeleteIndexByIDFunc: &UploadsServiceDeleteIndexByIDFunc{
			defaultHook: i.DeleteIndexByID,
		},
		DeleteIndexesFunc: &UploadsServiceDeleteIndexesFunc{
			defaultHook: i.DeleteIndexes,
		},
		DeleteUploadByIDFunc: &UploadsServiceDeleteUploadByIDFunc{
			defaultHook: i.DeleteUploadByID,
		},
		DeleteUploadsFunc: &UploadsServiceDeleteUploadsFunc{
			defaultHook: i.DeleteUploads,
		},
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: i.GetAuditLogsForUpload,
		},
		GetCommitGraphMetadataFunc: &UploadsServiceGetCommitGraphMetadataFunc{
			defaultHook: i.GetCommitGraphMetadata,
		},
		GetIndexByIDFunc: &UploadsServiceGetIndexByIDFunc{
			defaultHook: i.GetIndexByID,
		},
		GetIndexersFunc: &UploadsServiceGetIndexersFunc{
			defaultHook: i.GetIndexers,
		},
		GetIndexesFunc: &UploadsServiceGetIndexesFunc{
			defaultHook: i.GetIndexes,
		},
		GetIndexesByIDsFunc: &UploadsServiceGetIndexesByIDsFunc{
			defaultHook: i.GetIndexesByIDs,
		},
		GetLastUploadRetentionScanForRepositoryFunc: &UploadsServiceGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: i.GetLastUploadRetentionScanForRepository,
		},
		GetRecentIndexesSummaryFunc: &UploadsServiceGetRecentIndexesSummaryFunc{
			defaultHook: i.GetRecentIndexesSummary,
		},
		GetRecentUploadsSummaryFunc: &UploadsServiceGetRecentUploadsSummaryFunc{
			defaultHook: i.GetRecentUploadsSummary,
		},
		GetUploadByIDFunc: &UploadsServiceGetUploadByIDFunc{
			defaultHook: i.GetUploadByID,
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: i.GetUploads,
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
		NumRepositoriesWithCodeIntelligenceFunc: &UploadsServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: i.NumRepositoriesWithCodeIntelligence,
		},
		ReindexIndexByIDFunc: &UploadsServiceReindexIndexByIDFunc{
			defaultHook: i.ReindexIndexByID,
		},
		ReindexIndexesFunc: &UploadsServiceReindexIndexesFunc{
			defaultHook: i.ReindexIndexes,
		},
		ReindexUploadByIDFunc: &UploadsServiceReindexUploadByIDFunc{
			defaultHook: i.ReindexUploadByID,
		},
		ReindexUploadsFunc: &UploadsServiceReindexUploadsFunc{
			defaultHook: i.ReindexUploads,
		},
		RepositoryIDsWithErrorsFunc: &UploadsServiceRepositoryIDsWithErrorsFunc{
			defaultHook: i.RepositoryIDsWithErrors,
		},
	}
}

// UploadsServiceDeleteIndexByIDFunc describes the behavior when the
// DeleteIndexByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceDeleteIndexByIDFunc struct {
	defaultHook func(context.Context, int) (bool, error)
	hooks       []func(context.Context, int) (bool, error)
	history     []UploadsServiceDeleteIndexByIDFuncCall
	mutex       sync.Mutex
}

// DeleteIndexByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) DeleteIndexByID(v0 context.Context, v1 int) (bool, error) {
	r0, r1 := m.DeleteIndexByIDFunc.nextHook()(v0, v1)
	m.DeleteIndexByIDFunc.appendCall(UploadsServiceDeleteIndexByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteIndexByID
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceDeleteIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteIndexByID method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceDeleteIndexByIDFunc) PushHook(hook func(context.Context, int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceDeleteIndexByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceDeleteIndexByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

func (f *UploadsServiceDeleteIndexByIDFunc) nextHook() func(context.Context, int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceDeleteIndexByIDFunc) appendCall(r0 UploadsServiceDeleteIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceDeleteIndexByIDFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceDeleteIndexByIDFunc) History() []UploadsServiceDeleteIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceDeleteIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceDeleteIndexByIDFuncCall is an object that describes an
// invocation of method DeleteIndexByID on an instance of
// MockUploadsService.
type UploadsServiceDeleteIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceDeleteIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceDeleteIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceDeleteIndexesFunc describes the behavior when the
// DeleteIndexes method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceDeleteIndexesFunc struct {
	defaultHook func(context.Context, shared.DeleteIndexesOptions) error
	hooks       []func(context.Context, shared.DeleteIndexesOptions) error
	history     []UploadsServiceDeleteIndexesFuncCall
	mutex       sync.Mutex
}

// DeleteIndexes delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) DeleteIndexes(v0 context.Context, v1 shared.DeleteIndexesOptions) error {
	r0 := m.DeleteIndexesFunc.nextHook()(v0, v1)
	m.DeleteIndexesFunc.appendCall(UploadsServiceDeleteIndexesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteIndexes method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceDeleteIndexesFunc) SetDefaultHook(hook func(context.Context, shared.DeleteIndexesOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteIndexes method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceDeleteIndexesFunc) PushHook(hook func(context.Context, shared.DeleteIndexesOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceDeleteIndexesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.DeleteIndexesOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceDeleteIndexesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.DeleteIndexesOptions) error {
		return r0
	})
}

func (f *UploadsServiceDeleteIndexesFunc) nextHook() func(context.Context, shared.DeleteIndexesOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceDeleteIndexesFunc) appendCall(r0 UploadsServiceDeleteIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceDeleteIndexesFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceDeleteIndexesFunc) History() []UploadsServiceDeleteIndexesFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceDeleteIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceDeleteIndexesFuncCall is an object that describes an
// invocation of method DeleteIndexes on an instance of MockUploadsService.
type UploadsServiceDeleteIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.DeleteIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceDeleteIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceDeleteIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceDeleteUploadByIDFunc describes the behavior when the
// DeleteUploadByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceDeleteUploadByIDFunc struct {
	defaultHook func(context.Context, int) (bool, error)
	hooks       []func(context.Context, int) (bool, error)
	history     []UploadsServiceDeleteUploadByIDFuncCall
	mutex       sync.Mutex
}

// DeleteUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) DeleteUploadByID(v0 context.Context, v1 int) (bool, error) {
	r0, r1 := m.DeleteUploadByIDFunc.nextHook()(v0, v1)
	m.DeleteUploadByIDFunc.appendCall(UploadsServiceDeleteUploadByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteUploadByID
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadByID method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceDeleteUploadByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceDeleteUploadByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

func (f *UploadsServiceDeleteUploadByIDFunc) nextHook() func(context.Context, int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceDeleteUploadByIDFunc) appendCall(r0 UploadsServiceDeleteUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceDeleteUploadByIDFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceDeleteUploadByIDFunc) History() []UploadsServiceDeleteUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceDeleteUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceDeleteUploadByIDFuncCall is an object that describes an
// invocation of method DeleteUploadByID on an instance of
// MockUploadsService.
type UploadsServiceDeleteUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceDeleteUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceDeleteUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceDeleteUploadsFunc describes the behavior when the
// DeleteUploads method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceDeleteUploadsFunc struct {
	defaultHook func(context.Context, shared.DeleteUploadsOptions) error
	hooks       []func(context.Context, shared.DeleteUploadsOptions) error
	history     []UploadsServiceDeleteUploadsFuncCall
	mutex       sync.Mutex
}

// DeleteUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) DeleteUploads(v0 context.Context, v1 shared.DeleteUploadsOptions) error {
	r0 := m.DeleteUploadsFunc.nextHook()(v0, v1)
	m.DeleteUploadsFunc.appendCall(UploadsServiceDeleteUploadsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteUploads method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceDeleteUploadsFunc) SetDefaultHook(hook func(context.Context, shared.DeleteUploadsOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploads method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceDeleteUploadsFunc) PushHook(hook func(context.Context, shared.DeleteUploadsOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceDeleteUploadsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.DeleteUploadsOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceDeleteUploadsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.DeleteUploadsOptions) error {
		return r0
	})
}

func (f *UploadsServiceDeleteUploadsFunc) nextHook() func(context.Context, shared.DeleteUploadsOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceDeleteUploadsFunc) appendCall(r0 UploadsServiceDeleteUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceDeleteUploadsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceDeleteUploadsFunc) History() []UploadsServiceDeleteUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceDeleteUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceDeleteUploadsFuncCall is an object that describes an
// invocation of method DeleteUploads on an instance of MockUploadsService.
type UploadsServiceDeleteUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.DeleteUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceDeleteUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceDeleteUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceGetAuditLogsForUploadFunc describes the behavior when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetAuditLogsForUploadFunc struct {
	defaultHook func(context.Context, int) ([]shared.UploadLog, error)
	hooks       []func(context.Context, int) ([]shared.UploadLog, error)
	history     []UploadsServiceGetAuditLogsForUploadFuncCall
	mutex       sync.Mutex
}

// GetAuditLogsForUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetAuditLogsForUpload(v0 context.Context, v1 int) ([]shared.UploadLog, error) {
	r0, r1 := m.GetAuditLogsForUploadFunc.nextHook()(v0, v1)
	m.GetAuditLogsForUploadFunc.appendCall(UploadsServiceGetAuditLogsForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked and the hook queue is empty.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.UploadLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuditLogsForUpload method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushHook(hook func(context.Context, int) ([]shared.UploadLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultReturn(r0 []shared.UploadLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.UploadLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushReturn(r0 []shared.UploadLog, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.UploadLog, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) nextHook() func(context.Context, int) ([]shared.UploadLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) appendCall(r0 UploadsServiceGetAuditLogsForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetAuditLogsForUploadFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetAuditLogsForUploadFunc) History() []UploadsServiceGetAuditLogsForUploadFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetAuditLogsForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetAuditLogsForUploadFuncCall is an object that describes
// an invocation of method GetAuditLogsForUpload on an instance of
// MockUploadsService.
type UploadsServiceGetAuditLogsForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetCommitGraphMetadataFunc describes the behavior when the
// GetCommitGraphMetadata method of the parent MockUploadsService instance
// is invoked.
type UploadsServiceGetCommitGraphMetadataFunc struct {
	defaultHook func(context.Context, int) (bool, *time.Time, error)
	hooks       []func(context.Context, int) (bool, *time.Time, error)
	history     []UploadsServiceGetCommitGraphMetadataFuncCall
	mutex       sync.Mutex
}

// GetCommitGraphMetadata delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetCommitGraphMetadata(v0 context.Context, v1 int) (bool, *time.Time, error) {
	r0, r1, r2 := m.GetCommitGraphMetadataFunc.nextHook()(v0, v1)
	m.GetCommitGraphMetadataFunc.appendCall(UploadsServiceGetCommitGraphMetadataFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetCommitGraphMetadata method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceGetCommitGraphMetadataFunc) SetDefaultHook(hook func(context.Context, int) (bool, *time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommitGraphMetadata method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetCommitGraphMetadataFunc) PushHook(hook func(context.Context, int) (bool, *time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetCommitGraphMetadataFunc) SetDefaultReturn(r0 bool, r1 *time.Time, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, *time.Time, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetCommitGraphMetadataFunc) PushReturn(r0 bool, r1 *time.Time, r2 error) {
	f.PushHook(func(context.Context, int) (bool, *time.Time, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetCommitGraphMetadataFunc) nextHook() func(context.Context, int) (bool, *time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetCommitGraphMetadataFunc) appendCall(r0 UploadsServiceGetCommitGraphMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetCommitGraphMetadataFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceGetCommitGraphMetadataFunc) History() []UploadsServiceGetCommitGraphMetadataFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetCommitGraphMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetCommitGraphMetadataFuncCall is an object that describes
// an invocation of method GetCommitGraphMetadata on an instance of
// MockUploadsService.
type UploadsServiceGetCommitGraphMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *time.Time
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetCommitGraphMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetCommitGraphMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetIndexByIDFunc describes the behavior when the
// GetIndexByID method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetIndexByIDFunc struct {
	defaultHook func(context.Context, int) (shared.Index, bool, error)
	hooks       []func(context.Context, int) (shared.Index, bool, error)
	history     []UploadsServiceGetIndexByIDFuncCall
	mutex       sync.Mutex
}

// GetIndexByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetIndexByID(v0 context.Context, v1 int) (shared.Index, bool, error) {
	r0, r1, r2 := m.GetIndexByIDFunc.nextHook()(v0, v1)
	m.GetIndexByIDFunc.appendCall(UploadsServiceGetIndexByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexByID method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceGetIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) (shared.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexByID method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetIndexByIDFunc) PushHook(hook func(context.Context, int) (shared.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetIndexByIDFunc) SetDefaultReturn(r0 shared.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (shared.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetIndexByIDFunc) PushReturn(r0 shared.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (shared.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetIndexByIDFunc) nextHook() func(context.Context, int) (shared.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetIndexByIDFunc) appendCall(r0 UploadsServiceGetIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetIndexByIDFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetIndexByIDFunc) History() []UploadsServiceGetIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetIndexByIDFuncCall is an object that describes an
// invocation of method GetIndexByID on an instance of MockUploadsService.
type UploadsServiceGetIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetIndexersFunc describes the behavior when the GetIndexers
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetIndexersFunc struct {
	defaultHook func(context.Context, shared.GetIndexersOptions) ([]string, error)
	hooks       []func(context.Context, shared.GetIndexersOptions) ([]string, error)
	history     []UploadsServiceGetIndexersFuncCall
	mutex       sync.Mutex
}

// GetIndexers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetIndexers(v0 context.Context, v1 shared.GetIndexersOptions) ([]string, error) {
	r0, r1 := m.GetIndexersFunc.nextHook()(v0, v1)
	m.GetIndexersFunc.appendCall(UploadsServiceGetIndexersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexers method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceGetIndexersFunc) SetDefaultHook(hook func(context.Context, shared.GetIndexersOptions) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexers method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetIndexersFunc) PushHook(hook func(context.Context, shared.GetIndexersOptions) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetIndexersFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, shared.GetIndexersOptions) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetIndexersFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, shared.GetIndexersOptions) ([]string, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetIndexersFunc) nextHook() func(context.Context, shared.GetIndexersOptions) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetIndexersFunc) appendCall(r0 UploadsServiceGetIndexersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetIndexersFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetIndexersFunc) History() []UploadsServiceGetIndexersFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetIndexersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetIndexersFuncCall is an object that describes an
// invocation of method GetIndexers on an instance of MockUploadsService.
type UploadsServiceGetIndexersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetIndexersOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetIndexersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetIndexersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetIndexesFunc describes the behavior when the GetIndexes
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetIndexesFunc struct {
	defaultHook func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error)
	hooks       []func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error)
	history     []UploadsServiceGetIndexesFuncCall
	mutex       sync.Mutex
}

// GetIndexes delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetIndexes(v0 context.Context, v1 shared.GetIndexesOptions) ([]shared.Index, int, error) {
	r0, r1, r2 := m.GetIndexesFunc.nextHook()(v0, v1)
	m.GetIndexesFunc.appendCall(UploadsServiceGetIndexesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetIndexes method of
// the parent MockUploadsService instance is invoked and the hook queue is
// empty.
func (f *UploadsServiceGetIndexesFunc) SetDefaultHook(hook func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexes method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetIndexesFunc) PushHook(hook func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetIndexesFunc) SetDefaultReturn(r0 []shared.Index, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetIndexesFunc) PushReturn(r0 []shared.Index, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetIndexesFunc) nextHook() func(context.Context, shared.GetIndexesOptions) ([]shared.Index, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetIndexesFunc) appendCall(r0 UploadsServiceGetIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetIndexesFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetIndexesFunc) History() []UploadsServiceGetIndexesFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetIndexesFuncCall is an object that describes an
// invocation of method GetIndexes on an instance of MockUploadsService.
type UploadsServiceGetIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetIndexesByIDsFunc describes the behavior when the
// GetIndexesByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetIndexesByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Index, error)
	hooks       []func(context.Context, ...int) ([]shared.Index, error)
	history     []UploadsServiceGetIndexesByIDsFuncCall
	mutex       sync.Mutex
}

// GetIndexesByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetIndexesByIDs(v0 context.Context, v1 ...int) ([]shared.Index, error) {
	r0, r1 := m.GetIndexesByIDsFunc.nextHook()(v0, v1...)
	m.GetIndexesByIDsFunc.appendCall(UploadsServiceGetIndexesByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexesByIDs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetIndexesByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Index, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexesByIDs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetIndexesByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Index, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetIndexesByIDsFunc) SetDefaultReturn(r0 []shared.Index, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Index, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetIndexesByIDsFunc) PushReturn(r0 []shared.Index, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Index, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetIndexesByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Index, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetIndexesByIDsFunc) appendCall(r0 UploadsServiceGetIndexesByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetIndexesByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetIndexesByIDsFunc) History() []UploadsServiceGetIndexesByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetIndexesByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetIndexesByIDsFuncCall is an object that describes an
// invocation of method GetIndexesByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetIndexesByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetIndexesByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetIndexesByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetLastUploadRetentionScanForRepositoryFunc describes the
// behavior when the GetLastUploadRetentionScanForRepository method of the
// parent MockUploadsService instance is invoked.
type UploadsServiceGetLastUploadRetentionScanForRepositoryFunc struct {
	defaultHook func(context.Context, int) (*time.Time, error)
	hooks       []func(context.Context, int) (*time.Time, error)
	history     []UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall
	mutex       sync.Mutex
}

// GetLastUploadRetentionScanForRepository delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockUploadsService) GetLastUploadRetentionScanForRepository(v0 context.Context, v1 int) (*time.Time, error) {
	r0, r1 := m.GetLastUploadRetentionScanForRepositoryFunc.nextHook()(v0, v1)
	m.GetLastUploadRetentionScanForRepositoryFunc.appendCall(UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastUploadRetentionScanForRepository method of the parent
// MockUploadsService instance is invoked and the hook queue is empty.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastUploadRetentionScanForRepository method of the parent
// MockUploadsService instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) PushHook(hook func(context.Context, int) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) nextHook() func(context.Context, int) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) appendCall(r0 UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) History() []UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall is an
// object that describes an invocation of method
// GetLastUploadRetentionScanForRepository on an instance of
// MockUploadsService.
type UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetRecentIndexesSummaryFunc describes the behavior when the
// GetRecentIndexesSummary method of the parent MockUploadsService instance
// is invoked.
type UploadsServiceGetRecentIndexesSummaryFunc struct {
	defaultHook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)
	hooks       []func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)
	history     []UploadsServiceGetRecentIndexesSummaryFuncCall
	mutex       sync.Mutex
}

// GetRecentIndexesSummary delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetRecentIndexesSummary(v0 context.Context, v1 int) ([]shared.IndexesWithRepositoryNamespace, error) {
	r0, r1 := m.GetRecentIndexesSummaryFunc.nextHook()(v0, v1)
	m.GetRecentIndexesSummaryFunc.appendCall(UploadsServiceGetRecentIndexesSummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRecentIndexesSummary method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceGetRecentIndexesSummaryFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRecentIndexesSummary method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetRecentIndexesSummaryFunc) PushHook(hook func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetRecentIndexesSummaryFunc) SetDefaultReturn(r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetRecentIndexesSummaryFunc) PushReturn(r0 []shared.IndexesWithRepositoryNamespace, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetRecentIndexesSummaryFunc) nextHook() func(context.Context, int) ([]shared.IndexesWithRepositoryNamespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetRecentIndexesSummaryFunc) appendCall(r0 UploadsServiceGetRecentIndexesSummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetRecentIndexesSummaryFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceGetRecentIndexesSummaryFunc) History() []UploadsServiceGetRecentIndexesSummaryFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetRecentIndexesSummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetRecentIndexesSummaryFuncCall is an object that describes
// an invocation of method GetRecentIndexesSummary on an instance of
// MockUploadsService.
type UploadsServiceGetRecentIndexesSummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.IndexesWithRepositoryNamespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetRecentIndexesSummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetRecentIndexesSummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetRecentUploadsSummaryFunc describes the behavior when the
// GetRecentUploadsSummary method of the parent MockUploadsService instance
// is invoked.
type UploadsServiceGetRecentUploadsSummaryFunc struct {
	defaultHook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)
	hooks       []func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)
	history     []UploadsServiceGetRecentUploadsSummaryFuncCall
	mutex       sync.Mutex
}

// GetRecentUploadsSummary delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetRecentUploadsSummary(v0 context.Context, v1 int) ([]shared.UploadsWithRepositoryNamespace, error) {
	r0, r1 := m.GetRecentUploadsSummaryFunc.nextHook()(v0, v1)
	m.GetRecentUploadsSummaryFunc.appendCall(UploadsServiceGetRecentUploadsSummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRecentUploadsSummary method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRecentUploadsSummary method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) PushHook(hook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) SetDefaultReturn(r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) PushReturn(r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetRecentUploadsSummaryFunc) nextHook() func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetRecentUploadsSummaryFunc) appendCall(r0 UploadsServiceGetRecentUploadsSummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetRecentUploadsSummaryFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) History() []UploadsServiceGetRecentUploadsSummaryFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetRecentUploadsSummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetRecentUploadsSummaryFuncCall is an object that describes
// an invocation of method GetRecentUploadsSummary on an instance of
// MockUploadsService.
type UploadsServiceGetRecentUploadsSummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadsWithRepositoryNamespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetRecentUploadsSummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetRecentUploadsSummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetUploadByIDFunc describes the behavior when the
// GetUploadByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetUploadByIDFunc struct {
	defaultHook func(context.Context, int) (shared.Upload, bool, error)
	hooks       []func(context.Context, int) (shared.Upload, bool, error)
	history     []UploadsServiceGetUploadByIDFuncCall
	mutex       sync.Mutex
}

// GetUploadByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadByID(v0 context.Context, v1 int) (shared.Upload, bool, error) {
	r0, r1, r2 := m.GetUploadByIDFunc.nextHook()(v0, v1)
	m.GetUploadByIDFunc.appendCall(UploadsServiceGetUploadByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploadByID method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (shared.Upload, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadByID method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadByIDFunc) PushHook(hook func(context.Context, int) (shared.Upload, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadByIDFunc) SetDefaultReturn(r0 shared.Upload, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (shared.Upload, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadByIDFunc) PushReturn(r0 shared.Upload, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (shared.Upload, bool, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadByIDFunc) nextHook() func(context.Context, int) (shared.Upload, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadByIDFunc) appendCall(r0 UploadsServiceGetUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetUploadByIDFunc) History() []UploadsServiceGetUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadByIDFuncCall is an object that describes an
// invocation of method GetUploadByID on an instance of MockUploadsService.
type UploadsServiceGetUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsFunc describes the behavior when the GetUploads
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetUploadsFunc struct {
	defaultHook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)
	hooks       []func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)
	history     []UploadsServiceGetUploadsFuncCall
	mutex       sync.Mutex
}

// GetUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploads(v0 context.Context, v1 shared.GetUploadsOptions) ([]shared.Upload, int, error) {
	r0, r1, r2 := m.GetUploadsFunc.nextHook()(v0, v1)
	m.GetUploadsFunc.appendCall(UploadsServiceGetUploadsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploads method of
// the parent MockUploadsService instance is invoked and the hook queue is
// empty.
func (f *UploadsServiceGetUploadsFunc) SetDefaultHook(hook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploads method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsFunc) PushHook(hook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsFunc) SetDefaultReturn(r0 []shared.Upload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsFunc) PushReturn(r0 []shared.Upload, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadsFunc) nextHook() func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsFunc) appendCall(r0 UploadsServiceGetUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetUploadsFunc) History() []UploadsServiceGetUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsFuncCall is an object that describes an
// invocation of method GetUploads on an instance of MockUploadsService.
type UploadsServiceGetUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsByIDsFunc describes the behavior when the
// GetUploadsByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Upload, error)
	hooks       []func(context.Context, ...int) ([]shared.Upload, error)
	history     []UploadsServiceGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]shared.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(UploadsServiceGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultReturn(r0 []shared.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsByIDsFunc) PushReturn(r0 []shared.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsByIDsFunc) appendCall(r0 UploadsServiceGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetUploadsByIDsFunc) History() []UploadsServiceGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsByIDsFuncCall is an object that describes an
// invocation of method GetUploadsByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceNumRepositoriesWithCodeIntelligenceFunc describes the
// behavior when the NumRepositoriesWithCodeIntelligence method of the
// parent MockUploadsService instance is invoked.
type UploadsServiceNumRepositoriesWithCodeIntelligenceFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall
	mutex       sync.Mutex
}

// NumRepositoriesWithCodeIntelligence delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockUploadsService) NumRepositoriesWithCodeIntelligence(v0 context.Context) (int, error) {
	r0, r1 := m.NumRepositoriesWithCodeIntelligenceFunc.nextHook()(v0)
	m.NumRepositoriesWithCodeIntelligenceFunc.appendCall(UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// NumRepositoriesWithCodeIntelligence method of the parent
// MockUploadsService instance is invoked and the hook queue is empty.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NumRepositoriesWithCodeIntelligence method of the parent
// MockUploadsService instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) appendCall(r0 UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) History() []UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall is an object
// that describes an invocation of method
// NumRepositoriesWithCodeIntelligence on an instance of MockUploadsService.
type UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceReindexIndexByIDFunc describes the behavior when the
// ReindexIndexByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceReindexIndexByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []UploadsServiceReindexIndexByIDFuncCall
	mutex       sync.Mutex
}

// ReindexIndexByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) ReindexIndexByID(v0 context.Context, v1 int) error {
	r0 := m.ReindexIndexByIDFunc.nextHook()(v0, v1)
	m.ReindexIndexByIDFunc.appendCall(UploadsServiceReindexIndexByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexIndexByID
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceReindexIndexByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexIndexByID method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceReindexIndexByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceReindexIndexByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceReindexIndexByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *UploadsServiceReindexIndexByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceReindexIndexByIDFunc) appendCall(r0 UploadsServiceReindexIndexByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceReindexIndexByIDFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceReindexIndexByIDFunc) History() []UploadsServiceReindexIndexByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceReindexIndexByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceReindexIndexByIDFuncCall is an object that describes an
// invocation of method ReindexIndexByID on an instance of
// MockUploadsService.
type UploadsServiceReindexIndexByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceReindexIndexByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceReindexIndexByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceReindexIndexesFunc describes the behavior when the
// ReindexIndexes method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceReindexIndexesFunc struct {
	defaultHook func(context.Context, shared.ReindexIndexesOptions) error
	hooks       []func(context.Context, shared.ReindexIndexesOptions) error
	history     []UploadsServiceReindexIndexesFuncCall
	mutex       sync.Mutex
}

// ReindexIndexes delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) ReindexIndexes(v0 context.Context, v1 shared.ReindexIndexesOptions) error {
	r0 := m.ReindexIndexesFunc.nextHook()(v0, v1)
	m.ReindexIndexesFunc.appendCall(UploadsServiceReindexIndexesFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexIndexes
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceReindexIndexesFunc) SetDefaultHook(hook func(context.Context, shared.ReindexIndexesOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexIndexes method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceReindexIndexesFunc) PushHook(hook func(context.Context, shared.ReindexIndexesOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceReindexIndexesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.ReindexIndexesOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceReindexIndexesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.ReindexIndexesOptions) error {
		return r0
	})
}

func (f *UploadsServiceReindexIndexesFunc) nextHook() func(context.Context, shared.ReindexIndexesOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceReindexIndexesFunc) appendCall(r0 UploadsServiceReindexIndexesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceReindexIndexesFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceReindexIndexesFunc) History() []UploadsServiceReindexIndexesFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceReindexIndexesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceReindexIndexesFuncCall is an object that describes an
// invocation of method ReindexIndexes on an instance of MockUploadsService.
type UploadsServiceReindexIndexesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.ReindexIndexesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceReindexIndexesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceReindexIndexesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceReindexUploadByIDFunc describes the behavior when the
// ReindexUploadByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceReindexUploadByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []UploadsServiceReindexUploadByIDFuncCall
	mutex       sync.Mutex
}

// ReindexUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) ReindexUploadByID(v0 context.Context, v1 int) error {
	r0 := m.ReindexUploadByIDFunc.nextHook()(v0, v1)
	m.ReindexUploadByIDFunc.appendCall(UploadsServiceReindexUploadByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexUploadByID
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceReindexUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexUploadByID method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceReindexUploadByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceReindexUploadByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceReindexUploadByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *UploadsServiceReindexUploadByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceReindexUploadByIDFunc) appendCall(r0 UploadsServiceReindexUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceReindexUploadByIDFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceReindexUploadByIDFunc) History() []UploadsServiceReindexUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceReindexUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceReindexUploadByIDFuncCall is an object that describes an
// invocation of method ReindexUploadByID on an instance of
// MockUploadsService.
type UploadsServiceReindexUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceReindexUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceReindexUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceReindexUploadsFunc describes the behavior when the
// ReindexUploads method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceReindexUploadsFunc struct {
	defaultHook func(context.Context, shared.ReindexUploadsOptions) error
	hooks       []func(context.Context, shared.ReindexUploadsOptions) error
	history     []UploadsServiceReindexUploadsFuncCall
	mutex       sync.Mutex
}

// ReindexUploads delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) ReindexUploads(v0 context.Context, v1 shared.ReindexUploadsOptions) error {
	r0 := m.ReindexUploadsFunc.nextHook()(v0, v1)
	m.ReindexUploadsFunc.appendCall(UploadsServiceReindexUploadsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexUploads
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceReindexUploadsFunc) SetDefaultHook(hook func(context.Context, shared.ReindexUploadsOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexUploads method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceReindexUploadsFunc) PushHook(hook func(context.Context, shared.ReindexUploadsOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceReindexUploadsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.ReindexUploadsOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceReindexUploadsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.ReindexUploadsOptions) error {
		return r0
	})
}

func (f *UploadsServiceReindexUploadsFunc) nextHook() func(context.Context, shared.ReindexUploadsOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceReindexUploadsFunc) appendCall(r0 UploadsServiceReindexUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceReindexUploadsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceReindexUploadsFunc) History() []UploadsServiceReindexUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceReindexUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceReindexUploadsFuncCall is an object that describes an
// invocation of method ReindexUploads on an instance of MockUploadsService.
type UploadsServiceReindexUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.ReindexUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceReindexUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceReindexUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceRepositoryIDsWithErrorsFunc describes the behavior when the
// RepositoryIDsWithErrors method of the parent MockUploadsService instance
// is invoked.
type UploadsServiceRepositoryIDsWithErrorsFunc struct {
	defaultHook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	hooks       []func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	history     []UploadsServiceRepositoryIDsWithErrorsFuncCall
	mutex       sync.Mutex
}

// RepositoryIDsWithErrors delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) RepositoryIDsWithErrors(v0 context.Context, v1 int, v2 int) ([]shared.RepositoryWithCount, int, error) {
	r0, r1, r2 := m.RepositoryIDsWithErrorsFunc.nextHook()(v0, v1, v2)
	m.RepositoryIDsWithErrorsFunc.appendCall(UploadsServiceRepositoryIDsWithErrorsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// RepositoryIDsWithErrors method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepositoryIDsWithErrors method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) PushHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) SetDefaultReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) PushReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceRepositoryIDsWithErrorsFunc) nextHook() func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceRepositoryIDsWithErrorsFunc) appendCall(r0 UploadsServiceRepositoryIDsWithErrorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceRepositoryIDsWithErrorsFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) History() []UploadsServiceRepositoryIDsWithErrorsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceRepositoryIDsWithErrorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceRepositoryIDsWithErrorsFuncCall is an object that describes
// an invocation of method RepositoryIDsWithErrors on an instance of
// MockUploadsService.
type UploadsServiceRepositoryIDsWithErrorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.RepositoryWithCount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceRepositoryIDsWithErrorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceRepositoryIDsWithErrorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}
