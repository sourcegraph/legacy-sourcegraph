// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package database

import (
	"context"
	"database/sql"
	"sync"
	"time"

	store "github.com/sourcegraph/sourcegraph/enterprise/internal/github_apps/store"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	authz "github.com/sourcegraph/sourcegraph/internal/authz"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	encryption "github.com/sourcegraph/sourcegraph/internal/encryption"
	extsvc "github.com/sourcegraph/sourcegraph/internal/extsvc"
	schema "github.com/sourcegraph/sourcegraph/schema"
)

// MockEnterpriseDB is a mock implementation of the EnterpriseDB interface
// (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/database) used for
// unit testing.
type MockEnterpriseDB struct {
	// AccessRequestsFunc is an instance of a mock function object
	// controlling the behavior of the method AccessRequests.
	AccessRequestsFunc *EnterpriseDBAccessRequestsFunc
	// AccessTokensFunc is an instance of a mock function object controlling
	// the behavior of the method AccessTokens.
	AccessTokensFunc *EnterpriseDBAccessTokensFunc
	// AssignedOwnersFunc is an instance of a mock function object
	// controlling the behavior of the method AssignedOwners.
	AssignedOwnersFunc *EnterpriseDBAssignedOwnersFunc
	// AssignedTeamsFunc is an instance of a mock function object
	// controlling the behavior of the method AssignedTeams.
	AssignedTeamsFunc *EnterpriseDBAssignedTeamsFunc
	// AuthzFunc is an instance of a mock function object controlling the
	// behavior of the method Authz.
	AuthzFunc *EnterpriseDBAuthzFunc
	// BitbucketProjectPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// BitbucketProjectPermissions.
	BitbucketProjectPermissionsFunc *EnterpriseDBBitbucketProjectPermissionsFunc
	// CodeMonitorsFunc is an instance of a mock function object controlling
	// the behavior of the method CodeMonitors.
	CodeMonitorsFunc *EnterpriseDBCodeMonitorsFunc
	// CodeownersFunc is an instance of a mock function object controlling
	// the behavior of the method Codeowners.
	CodeownersFunc *EnterpriseDBCodeownersFunc
	// ConfFunc is an instance of a mock function object controlling the
	// behavior of the method Conf.
	ConfFunc *EnterpriseDBConfFunc
	// EventLogsFunc is an instance of a mock function object controlling
	// the behavior of the method EventLogs.
	EventLogsFunc *EnterpriseDBEventLogsFunc
	// EventLogsScrapeStateFunc is an instance of a mock function object
	// controlling the behavior of the method EventLogsScrapeState.
	EventLogsScrapeStateFunc *EnterpriseDBEventLogsScrapeStateFunc
	// ExecContextFunc is an instance of a mock function object controlling
	// the behavior of the method ExecContext.
	ExecContextFunc *EnterpriseDBExecContextFunc
	// ExecutorSecretAccessLogsFunc is an instance of a mock function object
	// controlling the behavior of the method ExecutorSecretAccessLogs.
	ExecutorSecretAccessLogsFunc *EnterpriseDBExecutorSecretAccessLogsFunc
	// ExecutorSecretsFunc is an instance of a mock function object
	// controlling the behavior of the method ExecutorSecrets.
	ExecutorSecretsFunc *EnterpriseDBExecutorSecretsFunc
	// ExecutorsFunc is an instance of a mock function object controlling
	// the behavior of the method Executors.
	ExecutorsFunc *EnterpriseDBExecutorsFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *EnterpriseDBExternalServicesFunc
	// FeatureFlagsFunc is an instance of a mock function object controlling
	// the behavior of the method FeatureFlags.
	FeatureFlagsFunc *EnterpriseDBFeatureFlagsFunc
	// GitHubAppsFunc is an instance of a mock function object controlling
	// the behavior of the method GitHubApps.
	GitHubAppsFunc *EnterpriseDBGitHubAppsFunc
	// GitserverLocalCloneFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverLocalClone.
	GitserverLocalCloneFunc *EnterpriseDBGitserverLocalCloneFunc
	// GitserverReposFunc is an instance of a mock function object
	// controlling the behavior of the method GitserverRepos.
	GitserverReposFunc *EnterpriseDBGitserverReposFunc
	// GlobalStateFunc is an instance of a mock function object controlling
	// the behavior of the method GlobalState.
	GlobalStateFunc *EnterpriseDBGlobalStateFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *EnterpriseDBHandleFunc
	// NamespacePermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method NamespacePermissions.
	NamespacePermissionsFunc *EnterpriseDBNamespacePermissionsFunc
	// NamespacesFunc is an instance of a mock function object controlling
	// the behavior of the method Namespaces.
	NamespacesFunc *EnterpriseDBNamespacesFunc
	// OrgInvitationsFunc is an instance of a mock function object
	// controlling the behavior of the method OrgInvitations.
	OrgInvitationsFunc *EnterpriseDBOrgInvitationsFunc
	// OrgMembersFunc is an instance of a mock function object controlling
	// the behavior of the method OrgMembers.
	OrgMembersFunc *EnterpriseDBOrgMembersFunc
	// OrgsFunc is an instance of a mock function object controlling the
	// behavior of the method Orgs.
	OrgsFunc *EnterpriseDBOrgsFunc
	// OutboundWebhookJobsFunc is an instance of a mock function object
	// controlling the behavior of the method OutboundWebhookJobs.
	OutboundWebhookJobsFunc *EnterpriseDBOutboundWebhookJobsFunc
	// OutboundWebhookLogsFunc is an instance of a mock function object
	// controlling the behavior of the method OutboundWebhookLogs.
	OutboundWebhookLogsFunc *EnterpriseDBOutboundWebhookLogsFunc
	// OutboundWebhooksFunc is an instance of a mock function object
	// controlling the behavior of the method OutboundWebhooks.
	OutboundWebhooksFunc *EnterpriseDBOutboundWebhooksFunc
	// OwnSignalConfigurationsFunc is an instance of a mock function object
	// controlling the behavior of the method OwnSignalConfigurations.
	OwnSignalConfigurationsFunc *EnterpriseDBOwnSignalConfigurationsFunc
	// OwnershipStatsFunc is an instance of a mock function object
	// controlling the behavior of the method OwnershipStats.
	OwnershipStatsFunc *EnterpriseDBOwnershipStatsFunc
	// PermissionSyncJobsFunc is an instance of a mock function object
	// controlling the behavior of the method PermissionSyncJobs.
	PermissionSyncJobsFunc *EnterpriseDBPermissionSyncJobsFunc
	// PermissionsFunc is an instance of a mock function object controlling
	// the behavior of the method Permissions.
	PermissionsFunc *EnterpriseDBPermissionsFunc
	// PermsFunc is an instance of a mock function object controlling the
	// behavior of the method Perms.
	PermsFunc *EnterpriseDBPermsFunc
	// PhabricatorFunc is an instance of a mock function object controlling
	// the behavior of the method Phabricator.
	PhabricatorFunc *EnterpriseDBPhabricatorFunc
	// QueryContextFunc is an instance of a mock function object controlling
	// the behavior of the method QueryContext.
	QueryContextFunc *EnterpriseDBQueryContextFunc
	// QueryRowContextFunc is an instance of a mock function object
	// controlling the behavior of the method QueryRowContext.
	QueryRowContextFunc *EnterpriseDBQueryRowContextFunc
	// RecentContributionSignalsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// RecentContributionSignals.
	RecentContributionSignalsFunc *EnterpriseDBRecentContributionSignalsFunc
	// RecentViewSignalFunc is an instance of a mock function object
	// controlling the behavior of the method RecentViewSignal.
	RecentViewSignalFunc *EnterpriseDBRecentViewSignalFunc
	// RedisKeyValueFunc is an instance of a mock function object
	// controlling the behavior of the method RedisKeyValue.
	RedisKeyValueFunc *EnterpriseDBRedisKeyValueFunc
	// RepoCommitsChangelistsFunc is an instance of a mock function object
	// controlling the behavior of the method RepoCommitsChangelists.
	RepoCommitsChangelistsFunc *EnterpriseDBRepoCommitsChangelistsFunc
	// RepoKVPsFunc is an instance of a mock function object controlling the
	// behavior of the method RepoKVPs.
	RepoKVPsFunc *EnterpriseDBRepoKVPsFunc
	// RepoPathsFunc is an instance of a mock function object controlling
	// the behavior of the method RepoPaths.
	RepoPathsFunc *EnterpriseDBRepoPathsFunc
	// RepoStatisticsFunc is an instance of a mock function object
	// controlling the behavior of the method RepoStatistics.
	RepoStatisticsFunc *EnterpriseDBRepoStatisticsFunc
	// ReposFunc is an instance of a mock function object controlling the
	// behavior of the method Repos.
	ReposFunc *EnterpriseDBReposFunc
	// RolePermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method RolePermissions.
	RolePermissionsFunc *EnterpriseDBRolePermissionsFunc
	// RolesFunc is an instance of a mock function object controlling the
	// behavior of the method Roles.
	RolesFunc *EnterpriseDBRolesFunc
	// SavedSearchesFunc is an instance of a mock function object
	// controlling the behavior of the method SavedSearches.
	SavedSearchesFunc *EnterpriseDBSavedSearchesFunc
	// SearchContextsFunc is an instance of a mock function object
	// controlling the behavior of the method SearchContexts.
	SearchContextsFunc *EnterpriseDBSearchContextsFunc
	// SecurityEventLogsFunc is an instance of a mock function object
	// controlling the behavior of the method SecurityEventLogs.
	SecurityEventLogsFunc *EnterpriseDBSecurityEventLogsFunc
	// SettingsFunc is an instance of a mock function object controlling the
	// behavior of the method Settings.
	SettingsFunc *EnterpriseDBSettingsFunc
	// SubRepoPermsFunc is an instance of a mock function object controlling
	// the behavior of the method SubRepoPerms.
	SubRepoPermsFunc *EnterpriseDBSubRepoPermsFunc
	// TeamsFunc is an instance of a mock function object controlling the
	// behavior of the method Teams.
	TeamsFunc *EnterpriseDBTeamsFunc
	// TemporarySettingsFunc is an instance of a mock function object
	// controlling the behavior of the method TemporarySettings.
	TemporarySettingsFunc *EnterpriseDBTemporarySettingsFunc
	// UserCredentialsFunc is an instance of a mock function object
	// controlling the behavior of the method UserCredentials.
	UserCredentialsFunc *EnterpriseDBUserCredentialsFunc
	// UserEmailsFunc is an instance of a mock function object controlling
	// the behavior of the method UserEmails.
	UserEmailsFunc *EnterpriseDBUserEmailsFunc
	// UserExternalAccountsFunc is an instance of a mock function object
	// controlling the behavior of the method UserExternalAccounts.
	UserExternalAccountsFunc *EnterpriseDBUserExternalAccountsFunc
	// UserRolesFunc is an instance of a mock function object controlling
	// the behavior of the method UserRoles.
	UserRolesFunc *EnterpriseDBUserRolesFunc
	// UsersFunc is an instance of a mock function object controlling the
	// behavior of the method Users.
	UsersFunc *EnterpriseDBUsersFunc
	// WebhookLogsFunc is an instance of a mock function object controlling
	// the behavior of the method WebhookLogs.
	WebhookLogsFunc *EnterpriseDBWebhookLogsFunc
	// WebhooksFunc is an instance of a mock function object controlling the
	// behavior of the method Webhooks.
	WebhooksFunc *EnterpriseDBWebhooksFunc
	// WithTransactFunc is an instance of a mock function object controlling
	// the behavior of the method WithTransact.
	WithTransactFunc *EnterpriseDBWithTransactFunc
	// ZoektReposFunc is an instance of a mock function object controlling
	// the behavior of the method ZoektRepos.
	ZoektReposFunc *EnterpriseDBZoektReposFunc
}

// NewMockEnterpriseDB creates a new mock of the EnterpriseDB interface. All
// methods return zero values for all results, unless overwritten.
func NewMockEnterpriseDB() *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessRequestsFunc: &EnterpriseDBAccessRequestsFunc{
			defaultHook: func() (r0 database.AccessRequestStore) {
				return
			},
		},
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: func() (r0 database.AccessTokenStore) {
				return
			},
		},
		AssignedOwnersFunc: &EnterpriseDBAssignedOwnersFunc{
			defaultHook: func() (r0 database.AssignedOwnersStore) {
				return
			},
		},
		AssignedTeamsFunc: &EnterpriseDBAssignedTeamsFunc{
			defaultHook: func() (r0 database.AssignedTeamsStore) {
				return
			},
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: func() (r0 database.AuthzStore) {
				return
			},
		},
		BitbucketProjectPermissionsFunc: &EnterpriseDBBitbucketProjectPermissionsFunc{
			defaultHook: func() (r0 database.BitbucketProjectPermissionsStore) {
				return
			},
		},
		CodeMonitorsFunc: &EnterpriseDBCodeMonitorsFunc{
			defaultHook: func() (r0 database.CodeMonitorStore) {
				return
			},
		},
		CodeownersFunc: &EnterpriseDBCodeownersFunc{
			defaultHook: func() (r0 database.CodeownersStore) {
				return
			},
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: func() (r0 database.ConfStore) {
				return
			},
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: func() (r0 database.EventLogStore) {
				return
			},
		},
		EventLogsScrapeStateFunc: &EnterpriseDBEventLogsScrapeStateFunc{
			defaultHook: func() (r0 database.EventLogsScrapeStateStore) {
				return
			},
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 sql.Result, r1 error) {
				return
			},
		},
		ExecutorSecretAccessLogsFunc: &EnterpriseDBExecutorSecretAccessLogsFunc{
			defaultHook: func() (r0 database.ExecutorSecretAccessLogStore) {
				return
			},
		},
		ExecutorSecretsFunc: &EnterpriseDBExecutorSecretsFunc{
			defaultHook: func(encryption.Key) (r0 database.ExecutorSecretStore) {
				return
			},
		},
		ExecutorsFunc: &EnterpriseDBExecutorsFunc{
			defaultHook: func() (r0 database.ExecutorStore) {
				return
			},
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: func() (r0 database.ExternalServiceStore) {
				return
			},
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: func() (r0 database.FeatureFlagStore) {
				return
			},
		},
		GitHubAppsFunc: &EnterpriseDBGitHubAppsFunc{
			defaultHook: func() (r0 store.GitHubAppsStore) {
				return
			},
		},
		GitserverLocalCloneFunc: &EnterpriseDBGitserverLocalCloneFunc{
			defaultHook: func() (r0 database.GitserverLocalCloneStore) {
				return
			},
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: func() (r0 database.GitserverRepoStore) {
				return
			},
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: func() (r0 database.GlobalStateStore) {
				return
			},
		},
		HandleFunc: &EnterpriseDBHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		NamespacePermissionsFunc: &EnterpriseDBNamespacePermissionsFunc{
			defaultHook: func() (r0 database.NamespacePermissionStore) {
				return
			},
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: func() (r0 database.NamespaceStore) {
				return
			},
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: func() (r0 database.OrgInvitationStore) {
				return
			},
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: func() (r0 database.OrgMemberStore) {
				return
			},
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: func() (r0 database.OrgStore) {
				return
			},
		},
		OutboundWebhookJobsFunc: &EnterpriseDBOutboundWebhookJobsFunc{
			defaultHook: func(encryption.Key) (r0 database.OutboundWebhookJobStore) {
				return
			},
		},
		OutboundWebhookLogsFunc: &EnterpriseDBOutboundWebhookLogsFunc{
			defaultHook: func(encryption.Key) (r0 database.OutboundWebhookLogStore) {
				return
			},
		},
		OutboundWebhooksFunc: &EnterpriseDBOutboundWebhooksFunc{
			defaultHook: func(encryption.Key) (r0 database.OutboundWebhookStore) {
				return
			},
		},
		OwnSignalConfigurationsFunc: &EnterpriseDBOwnSignalConfigurationsFunc{
			defaultHook: func() (r0 database.SignalConfigurationStore) {
				return
			},
		},
		OwnershipStatsFunc: &EnterpriseDBOwnershipStatsFunc{
			defaultHook: func() (r0 database.OwnershipStatsStore) {
				return
			},
		},
		PermissionSyncJobsFunc: &EnterpriseDBPermissionSyncJobsFunc{
			defaultHook: func() (r0 database.PermissionSyncJobStore) {
				return
			},
		},
		PermissionsFunc: &EnterpriseDBPermissionsFunc{
			defaultHook: func() (r0 database.PermissionStore) {
				return
			},
		},
		PermsFunc: &EnterpriseDBPermsFunc{
			defaultHook: func() (r0 PermsStore) {
				return
			},
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: func() (r0 database.PhabricatorStore) {
				return
			},
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 *sql.Rows, r1 error) {
				return
			},
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (r0 *sql.Row) {
				return
			},
		},
		RecentContributionSignalsFunc: &EnterpriseDBRecentContributionSignalsFunc{
			defaultHook: func() (r0 database.RecentContributionSignalStore) {
				return
			},
		},
		RecentViewSignalFunc: &EnterpriseDBRecentViewSignalFunc{
			defaultHook: func() (r0 database.RecentViewSignalStore) {
				return
			},
		},
		RedisKeyValueFunc: &EnterpriseDBRedisKeyValueFunc{
			defaultHook: func() (r0 database.RedisKeyValueStore) {
				return
			},
		},
		RepoCommitsChangelistsFunc: &EnterpriseDBRepoCommitsChangelistsFunc{
			defaultHook: func() (r0 database.RepoCommitsChangelistsStore) {
				return
			},
		},
		RepoKVPsFunc: &EnterpriseDBRepoKVPsFunc{
			defaultHook: func() (r0 database.RepoKVPStore) {
				return
			},
		},
		RepoPathsFunc: &EnterpriseDBRepoPathsFunc{
			defaultHook: func() (r0 database.RepoPathStore) {
				return
			},
		},
		RepoStatisticsFunc: &EnterpriseDBRepoStatisticsFunc{
			defaultHook: func() (r0 database.RepoStatisticsStore) {
				return
			},
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: func() (r0 database.RepoStore) {
				return
			},
		},
		RolePermissionsFunc: &EnterpriseDBRolePermissionsFunc{
			defaultHook: func() (r0 database.RolePermissionStore) {
				return
			},
		},
		RolesFunc: &EnterpriseDBRolesFunc{
			defaultHook: func() (r0 database.RoleStore) {
				return
			},
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: func() (r0 database.SavedSearchStore) {
				return
			},
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: func() (r0 database.SearchContextsStore) {
				return
			},
		},
		SecurityEventLogsFunc: &EnterpriseDBSecurityEventLogsFunc{
			defaultHook: func() (r0 database.SecurityEventLogsStore) {
				return
			},
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: func() (r0 database.SettingsStore) {
				return
			},
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: func() (r0 SubRepoPermsStore) {
				return
			},
		},
		TeamsFunc: &EnterpriseDBTeamsFunc{
			defaultHook: func() (r0 database.TeamStore) {
				return
			},
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: func() (r0 database.TemporarySettingsStore) {
				return
			},
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: func(encryption.Key) (r0 database.UserCredentialsStore) {
				return
			},
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: func() (r0 database.UserEmailsStore) {
				return
			},
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: func() (r0 database.UserExternalAccountsStore) {
				return
			},
		},
		UserRolesFunc: &EnterpriseDBUserRolesFunc{
			defaultHook: func() (r0 database.UserRoleStore) {
				return
			},
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: func() (r0 database.UserStore) {
				return
			},
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: func(encryption.Key) (r0 database.WebhookLogStore) {
				return
			},
		},
		WebhooksFunc: &EnterpriseDBWebhooksFunc{
			defaultHook: func(encryption.Key) (r0 database.WebhookStore) {
				return
			},
		},
		WithTransactFunc: &EnterpriseDBWithTransactFunc{
			defaultHook: func(context.Context, func(tx database.DB) error) (r0 error) {
				return
			},
		},
		ZoektReposFunc: &EnterpriseDBZoektReposFunc{
			defaultHook: func() (r0 database.ZoektReposStore) {
				return
			},
		},
	}
}

// NewStrictMockEnterpriseDB creates a new mock of the EnterpriseDB
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockEnterpriseDB() *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessRequestsFunc: &EnterpriseDBAccessRequestsFunc{
			defaultHook: func() database.AccessRequestStore {
				panic("unexpected invocation of MockEnterpriseDB.AccessRequests")
			},
		},
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: func() database.AccessTokenStore {
				panic("unexpected invocation of MockEnterpriseDB.AccessTokens")
			},
		},
		AssignedOwnersFunc: &EnterpriseDBAssignedOwnersFunc{
			defaultHook: func() database.AssignedOwnersStore {
				panic("unexpected invocation of MockEnterpriseDB.AssignedOwners")
			},
		},
		AssignedTeamsFunc: &EnterpriseDBAssignedTeamsFunc{
			defaultHook: func() database.AssignedTeamsStore {
				panic("unexpected invocation of MockEnterpriseDB.AssignedTeams")
			},
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: func() database.AuthzStore {
				panic("unexpected invocation of MockEnterpriseDB.Authz")
			},
		},
		BitbucketProjectPermissionsFunc: &EnterpriseDBBitbucketProjectPermissionsFunc{
			defaultHook: func() database.BitbucketProjectPermissionsStore {
				panic("unexpected invocation of MockEnterpriseDB.BitbucketProjectPermissions")
			},
		},
		CodeMonitorsFunc: &EnterpriseDBCodeMonitorsFunc{
			defaultHook: func() database.CodeMonitorStore {
				panic("unexpected invocation of MockEnterpriseDB.CodeMonitors")
			},
		},
		CodeownersFunc: &EnterpriseDBCodeownersFunc{
			defaultHook: func() database.CodeownersStore {
				panic("unexpected invocation of MockEnterpriseDB.Codeowners")
			},
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: func() database.ConfStore {
				panic("unexpected invocation of MockEnterpriseDB.Conf")
			},
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: func() database.EventLogStore {
				panic("unexpected invocation of MockEnterpriseDB.EventLogs")
			},
		},
		EventLogsScrapeStateFunc: &EnterpriseDBEventLogsScrapeStateFunc{
			defaultHook: func() database.EventLogsScrapeStateStore {
				panic("unexpected invocation of MockEnterpriseDB.EventLogsScrapeState")
			},
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (sql.Result, error) {
				panic("unexpected invocation of MockEnterpriseDB.ExecContext")
			},
		},
		ExecutorSecretAccessLogsFunc: &EnterpriseDBExecutorSecretAccessLogsFunc{
			defaultHook: func() database.ExecutorSecretAccessLogStore {
				panic("unexpected invocation of MockEnterpriseDB.ExecutorSecretAccessLogs")
			},
		},
		ExecutorSecretsFunc: &EnterpriseDBExecutorSecretsFunc{
			defaultHook: func(encryption.Key) database.ExecutorSecretStore {
				panic("unexpected invocation of MockEnterpriseDB.ExecutorSecrets")
			},
		},
		ExecutorsFunc: &EnterpriseDBExecutorsFunc{
			defaultHook: func() database.ExecutorStore {
				panic("unexpected invocation of MockEnterpriseDB.Executors")
			},
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: func() database.ExternalServiceStore {
				panic("unexpected invocation of MockEnterpriseDB.ExternalServices")
			},
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: func() database.FeatureFlagStore {
				panic("unexpected invocation of MockEnterpriseDB.FeatureFlags")
			},
		},
		GitHubAppsFunc: &EnterpriseDBGitHubAppsFunc{
			defaultHook: func() store.GitHubAppsStore {
				panic("unexpected invocation of MockEnterpriseDB.GitHubApps")
			},
		},
		GitserverLocalCloneFunc: &EnterpriseDBGitserverLocalCloneFunc{
			defaultHook: func() database.GitserverLocalCloneStore {
				panic("unexpected invocation of MockEnterpriseDB.GitserverLocalClone")
			},
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: func() database.GitserverRepoStore {
				panic("unexpected invocation of MockEnterpriseDB.GitserverRepos")
			},
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: func() database.GlobalStateStore {
				panic("unexpected invocation of MockEnterpriseDB.GlobalState")
			},
		},
		HandleFunc: &EnterpriseDBHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockEnterpriseDB.Handle")
			},
		},
		NamespacePermissionsFunc: &EnterpriseDBNamespacePermissionsFunc{
			defaultHook: func() database.NamespacePermissionStore {
				panic("unexpected invocation of MockEnterpriseDB.NamespacePermissions")
			},
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: func() database.NamespaceStore {
				panic("unexpected invocation of MockEnterpriseDB.Namespaces")
			},
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: func() database.OrgInvitationStore {
				panic("unexpected invocation of MockEnterpriseDB.OrgInvitations")
			},
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: func() database.OrgMemberStore {
				panic("unexpected invocation of MockEnterpriseDB.OrgMembers")
			},
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: func() database.OrgStore {
				panic("unexpected invocation of MockEnterpriseDB.Orgs")
			},
		},
		OutboundWebhookJobsFunc: &EnterpriseDBOutboundWebhookJobsFunc{
			defaultHook: func(encryption.Key) database.OutboundWebhookJobStore {
				panic("unexpected invocation of MockEnterpriseDB.OutboundWebhookJobs")
			},
		},
		OutboundWebhookLogsFunc: &EnterpriseDBOutboundWebhookLogsFunc{
			defaultHook: func(encryption.Key) database.OutboundWebhookLogStore {
				panic("unexpected invocation of MockEnterpriseDB.OutboundWebhookLogs")
			},
		},
		OutboundWebhooksFunc: &EnterpriseDBOutboundWebhooksFunc{
			defaultHook: func(encryption.Key) database.OutboundWebhookStore {
				panic("unexpected invocation of MockEnterpriseDB.OutboundWebhooks")
			},
		},
		OwnSignalConfigurationsFunc: &EnterpriseDBOwnSignalConfigurationsFunc{
			defaultHook: func() database.SignalConfigurationStore {
				panic("unexpected invocation of MockEnterpriseDB.OwnSignalConfigurations")
			},
		},
		OwnershipStatsFunc: &EnterpriseDBOwnershipStatsFunc{
			defaultHook: func() database.OwnershipStatsStore {
				panic("unexpected invocation of MockEnterpriseDB.OwnershipStats")
			},
		},
		PermissionSyncJobsFunc: &EnterpriseDBPermissionSyncJobsFunc{
			defaultHook: func() database.PermissionSyncJobStore {
				panic("unexpected invocation of MockEnterpriseDB.PermissionSyncJobs")
			},
		},
		PermissionsFunc: &EnterpriseDBPermissionsFunc{
			defaultHook: func() database.PermissionStore {
				panic("unexpected invocation of MockEnterpriseDB.Permissions")
			},
		},
		PermsFunc: &EnterpriseDBPermsFunc{
			defaultHook: func() PermsStore {
				panic("unexpected invocation of MockEnterpriseDB.Perms")
			},
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: func() database.PhabricatorStore {
				panic("unexpected invocation of MockEnterpriseDB.Phabricator")
			},
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) (*sql.Rows, error) {
				panic("unexpected invocation of MockEnterpriseDB.QueryContext")
			},
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: func(context.Context, string, ...interface{}) *sql.Row {
				panic("unexpected invocation of MockEnterpriseDB.QueryRowContext")
			},
		},
		RecentContributionSignalsFunc: &EnterpriseDBRecentContributionSignalsFunc{
			defaultHook: func() database.RecentContributionSignalStore {
				panic("unexpected invocation of MockEnterpriseDB.RecentContributionSignals")
			},
		},
		RecentViewSignalFunc: &EnterpriseDBRecentViewSignalFunc{
			defaultHook: func() database.RecentViewSignalStore {
				panic("unexpected invocation of MockEnterpriseDB.RecentViewSignal")
			},
		},
		RedisKeyValueFunc: &EnterpriseDBRedisKeyValueFunc{
			defaultHook: func() database.RedisKeyValueStore {
				panic("unexpected invocation of MockEnterpriseDB.RedisKeyValue")
			},
		},
		RepoCommitsChangelistsFunc: &EnterpriseDBRepoCommitsChangelistsFunc{
			defaultHook: func() database.RepoCommitsChangelistsStore {
				panic("unexpected invocation of MockEnterpriseDB.RepoCommitsChangelists")
			},
		},
		RepoKVPsFunc: &EnterpriseDBRepoKVPsFunc{
			defaultHook: func() database.RepoKVPStore {
				panic("unexpected invocation of MockEnterpriseDB.RepoKVPs")
			},
		},
		RepoPathsFunc: &EnterpriseDBRepoPathsFunc{
			defaultHook: func() database.RepoPathStore {
				panic("unexpected invocation of MockEnterpriseDB.RepoPaths")
			},
		},
		RepoStatisticsFunc: &EnterpriseDBRepoStatisticsFunc{
			defaultHook: func() database.RepoStatisticsStore {
				panic("unexpected invocation of MockEnterpriseDB.RepoStatistics")
			},
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: func() database.RepoStore {
				panic("unexpected invocation of MockEnterpriseDB.Repos")
			},
		},
		RolePermissionsFunc: &EnterpriseDBRolePermissionsFunc{
			defaultHook: func() database.RolePermissionStore {
				panic("unexpected invocation of MockEnterpriseDB.RolePermissions")
			},
		},
		RolesFunc: &EnterpriseDBRolesFunc{
			defaultHook: func() database.RoleStore {
				panic("unexpected invocation of MockEnterpriseDB.Roles")
			},
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: func() database.SavedSearchStore {
				panic("unexpected invocation of MockEnterpriseDB.SavedSearches")
			},
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: func() database.SearchContextsStore {
				panic("unexpected invocation of MockEnterpriseDB.SearchContexts")
			},
		},
		SecurityEventLogsFunc: &EnterpriseDBSecurityEventLogsFunc{
			defaultHook: func() database.SecurityEventLogsStore {
				panic("unexpected invocation of MockEnterpriseDB.SecurityEventLogs")
			},
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: func() database.SettingsStore {
				panic("unexpected invocation of MockEnterpriseDB.Settings")
			},
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: func() SubRepoPermsStore {
				panic("unexpected invocation of MockEnterpriseDB.SubRepoPerms")
			},
		},
		TeamsFunc: &EnterpriseDBTeamsFunc{
			defaultHook: func() database.TeamStore {
				panic("unexpected invocation of MockEnterpriseDB.Teams")
			},
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: func() database.TemporarySettingsStore {
				panic("unexpected invocation of MockEnterpriseDB.TemporarySettings")
			},
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: func(encryption.Key) database.UserCredentialsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserCredentials")
			},
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: func() database.UserEmailsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserEmails")
			},
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: func() database.UserExternalAccountsStore {
				panic("unexpected invocation of MockEnterpriseDB.UserExternalAccounts")
			},
		},
		UserRolesFunc: &EnterpriseDBUserRolesFunc{
			defaultHook: func() database.UserRoleStore {
				panic("unexpected invocation of MockEnterpriseDB.UserRoles")
			},
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: func() database.UserStore {
				panic("unexpected invocation of MockEnterpriseDB.Users")
			},
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: func(encryption.Key) database.WebhookLogStore {
				panic("unexpected invocation of MockEnterpriseDB.WebhookLogs")
			},
		},
		WebhooksFunc: &EnterpriseDBWebhooksFunc{
			defaultHook: func(encryption.Key) database.WebhookStore {
				panic("unexpected invocation of MockEnterpriseDB.Webhooks")
			},
		},
		WithTransactFunc: &EnterpriseDBWithTransactFunc{
			defaultHook: func(context.Context, func(tx database.DB) error) error {
				panic("unexpected invocation of MockEnterpriseDB.WithTransact")
			},
		},
		ZoektReposFunc: &EnterpriseDBZoektReposFunc{
			defaultHook: func() database.ZoektReposStore {
				panic("unexpected invocation of MockEnterpriseDB.ZoektRepos")
			},
		},
	}
}

// NewMockEnterpriseDBFrom creates a new mock of the MockEnterpriseDB
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockEnterpriseDBFrom(i EnterpriseDB) *MockEnterpriseDB {
	return &MockEnterpriseDB{
		AccessRequestsFunc: &EnterpriseDBAccessRequestsFunc{
			defaultHook: i.AccessRequests,
		},
		AccessTokensFunc: &EnterpriseDBAccessTokensFunc{
			defaultHook: i.AccessTokens,
		},
		AssignedOwnersFunc: &EnterpriseDBAssignedOwnersFunc{
			defaultHook: i.AssignedOwners,
		},
		AssignedTeamsFunc: &EnterpriseDBAssignedTeamsFunc{
			defaultHook: i.AssignedTeams,
		},
		AuthzFunc: &EnterpriseDBAuthzFunc{
			defaultHook: i.Authz,
		},
		BitbucketProjectPermissionsFunc: &EnterpriseDBBitbucketProjectPermissionsFunc{
			defaultHook: i.BitbucketProjectPermissions,
		},
		CodeMonitorsFunc: &EnterpriseDBCodeMonitorsFunc{
			defaultHook: i.CodeMonitors,
		},
		CodeownersFunc: &EnterpriseDBCodeownersFunc{
			defaultHook: i.Codeowners,
		},
		ConfFunc: &EnterpriseDBConfFunc{
			defaultHook: i.Conf,
		},
		EventLogsFunc: &EnterpriseDBEventLogsFunc{
			defaultHook: i.EventLogs,
		},
		EventLogsScrapeStateFunc: &EnterpriseDBEventLogsScrapeStateFunc{
			defaultHook: i.EventLogsScrapeState,
		},
		ExecContextFunc: &EnterpriseDBExecContextFunc{
			defaultHook: i.ExecContext,
		},
		ExecutorSecretAccessLogsFunc: &EnterpriseDBExecutorSecretAccessLogsFunc{
			defaultHook: i.ExecutorSecretAccessLogs,
		},
		ExecutorSecretsFunc: &EnterpriseDBExecutorSecretsFunc{
			defaultHook: i.ExecutorSecrets,
		},
		ExecutorsFunc: &EnterpriseDBExecutorsFunc{
			defaultHook: i.Executors,
		},
		ExternalServicesFunc: &EnterpriseDBExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		FeatureFlagsFunc: &EnterpriseDBFeatureFlagsFunc{
			defaultHook: i.FeatureFlags,
		},
		GitHubAppsFunc: &EnterpriseDBGitHubAppsFunc{
			defaultHook: i.GitHubApps,
		},
		GitserverLocalCloneFunc: &EnterpriseDBGitserverLocalCloneFunc{
			defaultHook: i.GitserverLocalClone,
		},
		GitserverReposFunc: &EnterpriseDBGitserverReposFunc{
			defaultHook: i.GitserverRepos,
		},
		GlobalStateFunc: &EnterpriseDBGlobalStateFunc{
			defaultHook: i.GlobalState,
		},
		HandleFunc: &EnterpriseDBHandleFunc{
			defaultHook: i.Handle,
		},
		NamespacePermissionsFunc: &EnterpriseDBNamespacePermissionsFunc{
			defaultHook: i.NamespacePermissions,
		},
		NamespacesFunc: &EnterpriseDBNamespacesFunc{
			defaultHook: i.Namespaces,
		},
		OrgInvitationsFunc: &EnterpriseDBOrgInvitationsFunc{
			defaultHook: i.OrgInvitations,
		},
		OrgMembersFunc: &EnterpriseDBOrgMembersFunc{
			defaultHook: i.OrgMembers,
		},
		OrgsFunc: &EnterpriseDBOrgsFunc{
			defaultHook: i.Orgs,
		},
		OutboundWebhookJobsFunc: &EnterpriseDBOutboundWebhookJobsFunc{
			defaultHook: i.OutboundWebhookJobs,
		},
		OutboundWebhookLogsFunc: &EnterpriseDBOutboundWebhookLogsFunc{
			defaultHook: i.OutboundWebhookLogs,
		},
		OutboundWebhooksFunc: &EnterpriseDBOutboundWebhooksFunc{
			defaultHook: i.OutboundWebhooks,
		},
		OwnSignalConfigurationsFunc: &EnterpriseDBOwnSignalConfigurationsFunc{
			defaultHook: i.OwnSignalConfigurations,
		},
		OwnershipStatsFunc: &EnterpriseDBOwnershipStatsFunc{
			defaultHook: i.OwnershipStats,
		},
		PermissionSyncJobsFunc: &EnterpriseDBPermissionSyncJobsFunc{
			defaultHook: i.PermissionSyncJobs,
		},
		PermissionsFunc: &EnterpriseDBPermissionsFunc{
			defaultHook: i.Permissions,
		},
		PermsFunc: &EnterpriseDBPermsFunc{
			defaultHook: i.Perms,
		},
		PhabricatorFunc: &EnterpriseDBPhabricatorFunc{
			defaultHook: i.Phabricator,
		},
		QueryContextFunc: &EnterpriseDBQueryContextFunc{
			defaultHook: i.QueryContext,
		},
		QueryRowContextFunc: &EnterpriseDBQueryRowContextFunc{
			defaultHook: i.QueryRowContext,
		},
		RecentContributionSignalsFunc: &EnterpriseDBRecentContributionSignalsFunc{
			defaultHook: i.RecentContributionSignals,
		},
		RecentViewSignalFunc: &EnterpriseDBRecentViewSignalFunc{
			defaultHook: i.RecentViewSignal,
		},
		RedisKeyValueFunc: &EnterpriseDBRedisKeyValueFunc{
			defaultHook: i.RedisKeyValue,
		},
		RepoCommitsChangelistsFunc: &EnterpriseDBRepoCommitsChangelistsFunc{
			defaultHook: i.RepoCommitsChangelists,
		},
		RepoKVPsFunc: &EnterpriseDBRepoKVPsFunc{
			defaultHook: i.RepoKVPs,
		},
		RepoPathsFunc: &EnterpriseDBRepoPathsFunc{
			defaultHook: i.RepoPaths,
		},
		RepoStatisticsFunc: &EnterpriseDBRepoStatisticsFunc{
			defaultHook: i.RepoStatistics,
		},
		ReposFunc: &EnterpriseDBReposFunc{
			defaultHook: i.Repos,
		},
		RolePermissionsFunc: &EnterpriseDBRolePermissionsFunc{
			defaultHook: i.RolePermissions,
		},
		RolesFunc: &EnterpriseDBRolesFunc{
			defaultHook: i.Roles,
		},
		SavedSearchesFunc: &EnterpriseDBSavedSearchesFunc{
			defaultHook: i.SavedSearches,
		},
		SearchContextsFunc: &EnterpriseDBSearchContextsFunc{
			defaultHook: i.SearchContexts,
		},
		SecurityEventLogsFunc: &EnterpriseDBSecurityEventLogsFunc{
			defaultHook: i.SecurityEventLogs,
		},
		SettingsFunc: &EnterpriseDBSettingsFunc{
			defaultHook: i.Settings,
		},
		SubRepoPermsFunc: &EnterpriseDBSubRepoPermsFunc{
			defaultHook: i.SubRepoPerms,
		},
		TeamsFunc: &EnterpriseDBTeamsFunc{
			defaultHook: i.Teams,
		},
		TemporarySettingsFunc: &EnterpriseDBTemporarySettingsFunc{
			defaultHook: i.TemporarySettings,
		},
		UserCredentialsFunc: &EnterpriseDBUserCredentialsFunc{
			defaultHook: i.UserCredentials,
		},
		UserEmailsFunc: &EnterpriseDBUserEmailsFunc{
			defaultHook: i.UserEmails,
		},
		UserExternalAccountsFunc: &EnterpriseDBUserExternalAccountsFunc{
			defaultHook: i.UserExternalAccounts,
		},
		UserRolesFunc: &EnterpriseDBUserRolesFunc{
			defaultHook: i.UserRoles,
		},
		UsersFunc: &EnterpriseDBUsersFunc{
			defaultHook: i.Users,
		},
		WebhookLogsFunc: &EnterpriseDBWebhookLogsFunc{
			defaultHook: i.WebhookLogs,
		},
		WebhooksFunc: &EnterpriseDBWebhooksFunc{
			defaultHook: i.Webhooks,
		},
		WithTransactFunc: &EnterpriseDBWithTransactFunc{
			defaultHook: i.WithTransact,
		},
		ZoektReposFunc: &EnterpriseDBZoektReposFunc{
			defaultHook: i.ZoektRepos,
		},
	}
}

// EnterpriseDBAccessRequestsFunc describes the behavior when the
// AccessRequests method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAccessRequestsFunc struct {
	defaultHook func() database.AccessRequestStore
	hooks       []func() database.AccessRequestStore
	history     []EnterpriseDBAccessRequestsFuncCall
	mutex       sync.Mutex
}

// AccessRequests delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) AccessRequests() database.AccessRequestStore {
	r0 := m.AccessRequestsFunc.nextHook()()
	m.AccessRequestsFunc.appendCall(EnterpriseDBAccessRequestsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AccessRequests
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBAccessRequestsFunc) SetDefaultHook(hook func() database.AccessRequestStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccessRequests method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBAccessRequestsFunc) PushHook(hook func() database.AccessRequestStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBAccessRequestsFunc) SetDefaultReturn(r0 database.AccessRequestStore) {
	f.SetDefaultHook(func() database.AccessRequestStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBAccessRequestsFunc) PushReturn(r0 database.AccessRequestStore) {
	f.PushHook(func() database.AccessRequestStore {
		return r0
	})
}

func (f *EnterpriseDBAccessRequestsFunc) nextHook() func() database.AccessRequestStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAccessRequestsFunc) appendCall(r0 EnterpriseDBAccessRequestsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAccessRequestsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAccessRequestsFunc) History() []EnterpriseDBAccessRequestsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAccessRequestsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAccessRequestsFuncCall is an object that describes an
// invocation of method AccessRequests on an instance of MockEnterpriseDB.
type EnterpriseDBAccessRequestsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AccessRequestStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAccessRequestsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAccessRequestsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBAccessTokensFunc describes the behavior when the AccessTokens
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAccessTokensFunc struct {
	defaultHook func() database.AccessTokenStore
	hooks       []func() database.AccessTokenStore
	history     []EnterpriseDBAccessTokensFuncCall
	mutex       sync.Mutex
}

// AccessTokens delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) AccessTokens() database.AccessTokenStore {
	r0 := m.AccessTokensFunc.nextHook()()
	m.AccessTokensFunc.appendCall(EnterpriseDBAccessTokensFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AccessTokens method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBAccessTokensFunc) SetDefaultHook(hook func() database.AccessTokenStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AccessTokens method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBAccessTokensFunc) PushHook(hook func() database.AccessTokenStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBAccessTokensFunc) SetDefaultReturn(r0 database.AccessTokenStore) {
	f.SetDefaultHook(func() database.AccessTokenStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBAccessTokensFunc) PushReturn(r0 database.AccessTokenStore) {
	f.PushHook(func() database.AccessTokenStore {
		return r0
	})
}

func (f *EnterpriseDBAccessTokensFunc) nextHook() func() database.AccessTokenStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAccessTokensFunc) appendCall(r0 EnterpriseDBAccessTokensFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAccessTokensFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAccessTokensFunc) History() []EnterpriseDBAccessTokensFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAccessTokensFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAccessTokensFuncCall is an object that describes an
// invocation of method AccessTokens on an instance of MockEnterpriseDB.
type EnterpriseDBAccessTokensFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AccessTokenStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAccessTokensFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAccessTokensFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBAssignedOwnersFunc describes the behavior when the
// AssignedOwners method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAssignedOwnersFunc struct {
	defaultHook func() database.AssignedOwnersStore
	hooks       []func() database.AssignedOwnersStore
	history     []EnterpriseDBAssignedOwnersFuncCall
	mutex       sync.Mutex
}

// AssignedOwners delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) AssignedOwners() database.AssignedOwnersStore {
	r0 := m.AssignedOwnersFunc.nextHook()()
	m.AssignedOwnersFunc.appendCall(EnterpriseDBAssignedOwnersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssignedOwners
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBAssignedOwnersFunc) SetDefaultHook(hook func() database.AssignedOwnersStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssignedOwners method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBAssignedOwnersFunc) PushHook(hook func() database.AssignedOwnersStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBAssignedOwnersFunc) SetDefaultReturn(r0 database.AssignedOwnersStore) {
	f.SetDefaultHook(func() database.AssignedOwnersStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBAssignedOwnersFunc) PushReturn(r0 database.AssignedOwnersStore) {
	f.PushHook(func() database.AssignedOwnersStore {
		return r0
	})
}

func (f *EnterpriseDBAssignedOwnersFunc) nextHook() func() database.AssignedOwnersStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAssignedOwnersFunc) appendCall(r0 EnterpriseDBAssignedOwnersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAssignedOwnersFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAssignedOwnersFunc) History() []EnterpriseDBAssignedOwnersFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAssignedOwnersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAssignedOwnersFuncCall is an object that describes an
// invocation of method AssignedOwners on an instance of MockEnterpriseDB.
type EnterpriseDBAssignedOwnersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AssignedOwnersStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAssignedOwnersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAssignedOwnersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBAssignedTeamsFunc describes the behavior when the
// AssignedTeams method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAssignedTeamsFunc struct {
	defaultHook func() database.AssignedTeamsStore
	hooks       []func() database.AssignedTeamsStore
	history     []EnterpriseDBAssignedTeamsFuncCall
	mutex       sync.Mutex
}

// AssignedTeams delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) AssignedTeams() database.AssignedTeamsStore {
	r0 := m.AssignedTeamsFunc.nextHook()()
	m.AssignedTeamsFunc.appendCall(EnterpriseDBAssignedTeamsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the AssignedTeams method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBAssignedTeamsFunc) SetDefaultHook(hook func() database.AssignedTeamsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AssignedTeams method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBAssignedTeamsFunc) PushHook(hook func() database.AssignedTeamsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBAssignedTeamsFunc) SetDefaultReturn(r0 database.AssignedTeamsStore) {
	f.SetDefaultHook(func() database.AssignedTeamsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBAssignedTeamsFunc) PushReturn(r0 database.AssignedTeamsStore) {
	f.PushHook(func() database.AssignedTeamsStore {
		return r0
	})
}

func (f *EnterpriseDBAssignedTeamsFunc) nextHook() func() database.AssignedTeamsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAssignedTeamsFunc) appendCall(r0 EnterpriseDBAssignedTeamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAssignedTeamsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAssignedTeamsFunc) History() []EnterpriseDBAssignedTeamsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAssignedTeamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAssignedTeamsFuncCall is an object that describes an
// invocation of method AssignedTeams on an instance of MockEnterpriseDB.
type EnterpriseDBAssignedTeamsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AssignedTeamsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAssignedTeamsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAssignedTeamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBAuthzFunc describes the behavior when the Authz method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBAuthzFunc struct {
	defaultHook func() database.AuthzStore
	hooks       []func() database.AuthzStore
	history     []EnterpriseDBAuthzFuncCall
	mutex       sync.Mutex
}

// Authz delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Authz() database.AuthzStore {
	r0 := m.AuthzFunc.nextHook()()
	m.AuthzFunc.appendCall(EnterpriseDBAuthzFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Authz method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBAuthzFunc) SetDefaultHook(hook func() database.AuthzStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Authz method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBAuthzFunc) PushHook(hook func() database.AuthzStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBAuthzFunc) SetDefaultReturn(r0 database.AuthzStore) {
	f.SetDefaultHook(func() database.AuthzStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBAuthzFunc) PushReturn(r0 database.AuthzStore) {
	f.PushHook(func() database.AuthzStore {
		return r0
	})
}

func (f *EnterpriseDBAuthzFunc) nextHook() func() database.AuthzStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBAuthzFunc) appendCall(r0 EnterpriseDBAuthzFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBAuthzFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBAuthzFunc) History() []EnterpriseDBAuthzFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBAuthzFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBAuthzFuncCall is an object that describes an invocation of
// method Authz on an instance of MockEnterpriseDB.
type EnterpriseDBAuthzFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.AuthzStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBAuthzFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBAuthzFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBBitbucketProjectPermissionsFunc describes the behavior when
// the BitbucketProjectPermissions method of the parent MockEnterpriseDB
// instance is invoked.
type EnterpriseDBBitbucketProjectPermissionsFunc struct {
	defaultHook func() database.BitbucketProjectPermissionsStore
	hooks       []func() database.BitbucketProjectPermissionsStore
	history     []EnterpriseDBBitbucketProjectPermissionsFuncCall
	mutex       sync.Mutex
}

// BitbucketProjectPermissions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) BitbucketProjectPermissions() database.BitbucketProjectPermissionsStore {
	r0 := m.BitbucketProjectPermissionsFunc.nextHook()()
	m.BitbucketProjectPermissionsFunc.appendCall(EnterpriseDBBitbucketProjectPermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// BitbucketProjectPermissions method of the parent MockEnterpriseDB
// instance is invoked and the hook queue is empty.
func (f *EnterpriseDBBitbucketProjectPermissionsFunc) SetDefaultHook(hook func() database.BitbucketProjectPermissionsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// BitbucketProjectPermissions method of the parent MockEnterpriseDB
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *EnterpriseDBBitbucketProjectPermissionsFunc) PushHook(hook func() database.BitbucketProjectPermissionsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBBitbucketProjectPermissionsFunc) SetDefaultReturn(r0 database.BitbucketProjectPermissionsStore) {
	f.SetDefaultHook(func() database.BitbucketProjectPermissionsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBBitbucketProjectPermissionsFunc) PushReturn(r0 database.BitbucketProjectPermissionsStore) {
	f.PushHook(func() database.BitbucketProjectPermissionsStore {
		return r0
	})
}

func (f *EnterpriseDBBitbucketProjectPermissionsFunc) nextHook() func() database.BitbucketProjectPermissionsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBBitbucketProjectPermissionsFunc) appendCall(r0 EnterpriseDBBitbucketProjectPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EnterpriseDBBitbucketProjectPermissionsFuncCall objects describing the
// invocations of this function.
func (f *EnterpriseDBBitbucketProjectPermissionsFunc) History() []EnterpriseDBBitbucketProjectPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBBitbucketProjectPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBBitbucketProjectPermissionsFuncCall is an object that
// describes an invocation of method BitbucketProjectPermissions on an
// instance of MockEnterpriseDB.
type EnterpriseDBBitbucketProjectPermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.BitbucketProjectPermissionsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBBitbucketProjectPermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBBitbucketProjectPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBCodeMonitorsFunc describes the behavior when the CodeMonitors
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBCodeMonitorsFunc struct {
	defaultHook func() database.CodeMonitorStore
	hooks       []func() database.CodeMonitorStore
	history     []EnterpriseDBCodeMonitorsFuncCall
	mutex       sync.Mutex
}

// CodeMonitors delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) CodeMonitors() database.CodeMonitorStore {
	r0 := m.CodeMonitorsFunc.nextHook()()
	m.CodeMonitorsFunc.appendCall(EnterpriseDBCodeMonitorsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the CodeMonitors method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBCodeMonitorsFunc) SetDefaultHook(hook func() database.CodeMonitorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CodeMonitors method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBCodeMonitorsFunc) PushHook(hook func() database.CodeMonitorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBCodeMonitorsFunc) SetDefaultReturn(r0 database.CodeMonitorStore) {
	f.SetDefaultHook(func() database.CodeMonitorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBCodeMonitorsFunc) PushReturn(r0 database.CodeMonitorStore) {
	f.PushHook(func() database.CodeMonitorStore {
		return r0
	})
}

func (f *EnterpriseDBCodeMonitorsFunc) nextHook() func() database.CodeMonitorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBCodeMonitorsFunc) appendCall(r0 EnterpriseDBCodeMonitorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBCodeMonitorsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBCodeMonitorsFunc) History() []EnterpriseDBCodeMonitorsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBCodeMonitorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBCodeMonitorsFuncCall is an object that describes an
// invocation of method CodeMonitors on an instance of MockEnterpriseDB.
type EnterpriseDBCodeMonitorsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.CodeMonitorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBCodeMonitorsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBCodeMonitorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBCodeownersFunc describes the behavior when the Codeowners
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBCodeownersFunc struct {
	defaultHook func() database.CodeownersStore
	hooks       []func() database.CodeownersStore
	history     []EnterpriseDBCodeownersFuncCall
	mutex       sync.Mutex
}

// Codeowners delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) Codeowners() database.CodeownersStore {
	r0 := m.CodeownersFunc.nextHook()()
	m.CodeownersFunc.appendCall(EnterpriseDBCodeownersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Codeowners method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBCodeownersFunc) SetDefaultHook(hook func() database.CodeownersStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Codeowners method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBCodeownersFunc) PushHook(hook func() database.CodeownersStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBCodeownersFunc) SetDefaultReturn(r0 database.CodeownersStore) {
	f.SetDefaultHook(func() database.CodeownersStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBCodeownersFunc) PushReturn(r0 database.CodeownersStore) {
	f.PushHook(func() database.CodeownersStore {
		return r0
	})
}

func (f *EnterpriseDBCodeownersFunc) nextHook() func() database.CodeownersStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBCodeownersFunc) appendCall(r0 EnterpriseDBCodeownersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBCodeownersFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBCodeownersFunc) History() []EnterpriseDBCodeownersFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBCodeownersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBCodeownersFuncCall is an object that describes an invocation
// of method Codeowners on an instance of MockEnterpriseDB.
type EnterpriseDBCodeownersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.CodeownersStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBCodeownersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBCodeownersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBConfFunc describes the behavior when the Conf method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBConfFunc struct {
	defaultHook func() database.ConfStore
	hooks       []func() database.ConfStore
	history     []EnterpriseDBConfFuncCall
	mutex       sync.Mutex
}

// Conf delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Conf() database.ConfStore {
	r0 := m.ConfFunc.nextHook()()
	m.ConfFunc.appendCall(EnterpriseDBConfFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Conf method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBConfFunc) SetDefaultHook(hook func() database.ConfStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Conf method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBConfFunc) PushHook(hook func() database.ConfStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBConfFunc) SetDefaultReturn(r0 database.ConfStore) {
	f.SetDefaultHook(func() database.ConfStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBConfFunc) PushReturn(r0 database.ConfStore) {
	f.PushHook(func() database.ConfStore {
		return r0
	})
}

func (f *EnterpriseDBConfFunc) nextHook() func() database.ConfStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBConfFunc) appendCall(r0 EnterpriseDBConfFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBConfFuncCall objects describing
// the invocations of this function.
func (f *EnterpriseDBConfFunc) History() []EnterpriseDBConfFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBConfFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBConfFuncCall is an object that describes an invocation of
// method Conf on an instance of MockEnterpriseDB.
type EnterpriseDBConfFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ConfStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBConfFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBConfFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBEventLogsFunc describes the behavior when the EventLogs
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBEventLogsFunc struct {
	defaultHook func() database.EventLogStore
	hooks       []func() database.EventLogStore
	history     []EnterpriseDBEventLogsFuncCall
	mutex       sync.Mutex
}

// EventLogs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) EventLogs() database.EventLogStore {
	r0 := m.EventLogsFunc.nextHook()()
	m.EventLogsFunc.appendCall(EnterpriseDBEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EventLogs method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBEventLogsFunc) SetDefaultHook(hook func() database.EventLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EventLogs method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBEventLogsFunc) PushHook(hook func() database.EventLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBEventLogsFunc) SetDefaultReturn(r0 database.EventLogStore) {
	f.SetDefaultHook(func() database.EventLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBEventLogsFunc) PushReturn(r0 database.EventLogStore) {
	f.PushHook(func() database.EventLogStore {
		return r0
	})
}

func (f *EnterpriseDBEventLogsFunc) nextHook() func() database.EventLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBEventLogsFunc) appendCall(r0 EnterpriseDBEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBEventLogsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBEventLogsFunc) History() []EnterpriseDBEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBEventLogsFuncCall is an object that describes an invocation
// of method EventLogs on an instance of MockEnterpriseDB.
type EnterpriseDBEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.EventLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBEventLogsScrapeStateFunc describes the behavior when the
// EventLogsScrapeState method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBEventLogsScrapeStateFunc struct {
	defaultHook func() database.EventLogsScrapeStateStore
	hooks       []func() database.EventLogsScrapeStateStore
	history     []EnterpriseDBEventLogsScrapeStateFuncCall
	mutex       sync.Mutex
}

// EventLogsScrapeState delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) EventLogsScrapeState() database.EventLogsScrapeStateStore {
	r0 := m.EventLogsScrapeStateFunc.nextHook()()
	m.EventLogsScrapeStateFunc.appendCall(EnterpriseDBEventLogsScrapeStateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the EventLogsScrapeState
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBEventLogsScrapeStateFunc) SetDefaultHook(hook func() database.EventLogsScrapeStateStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// EventLogsScrapeState method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBEventLogsScrapeStateFunc) PushHook(hook func() database.EventLogsScrapeStateStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBEventLogsScrapeStateFunc) SetDefaultReturn(r0 database.EventLogsScrapeStateStore) {
	f.SetDefaultHook(func() database.EventLogsScrapeStateStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBEventLogsScrapeStateFunc) PushReturn(r0 database.EventLogsScrapeStateStore) {
	f.PushHook(func() database.EventLogsScrapeStateStore {
		return r0
	})
}

func (f *EnterpriseDBEventLogsScrapeStateFunc) nextHook() func() database.EventLogsScrapeStateStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBEventLogsScrapeStateFunc) appendCall(r0 EnterpriseDBEventLogsScrapeStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBEventLogsScrapeStateFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBEventLogsScrapeStateFunc) History() []EnterpriseDBEventLogsScrapeStateFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBEventLogsScrapeStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBEventLogsScrapeStateFuncCall is an object that describes an
// invocation of method EventLogsScrapeState on an instance of
// MockEnterpriseDB.
type EnterpriseDBEventLogsScrapeStateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.EventLogsScrapeStateStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBEventLogsScrapeStateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBEventLogsScrapeStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBExecContextFunc describes the behavior when the ExecContext
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBExecContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (sql.Result, error)
	hooks       []func(context.Context, string, ...interface{}) (sql.Result, error)
	history     []EnterpriseDBExecContextFuncCall
	mutex       sync.Mutex
}

// ExecContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ExecContext(v0 context.Context, v1 string, v2 ...interface{}) (sql.Result, error) {
	r0, r1 := m.ExecContextFunc.nextHook()(v0, v1, v2...)
	m.ExecContextFunc.appendCall(EnterpriseDBExecContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExecContext method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBExecContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecContext method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBExecContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (sql.Result, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBExecContextFunc) SetDefaultReturn(r0 sql.Result, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBExecContextFunc) PushReturn(r0 sql.Result, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (sql.Result, error) {
		return r0, r1
	})
}

func (f *EnterpriseDBExecContextFunc) nextHook() func(context.Context, string, ...interface{}) (sql.Result, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExecContextFunc) appendCall(r0 EnterpriseDBExecContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExecContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBExecContextFunc) History() []EnterpriseDBExecContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExecContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExecContextFuncCall is an object that describes an invocation
// of method ExecContext on an instance of MockEnterpriseDB.
type EnterpriseDBExecContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 sql.Result
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBExecContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExecContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EnterpriseDBExecutorSecretAccessLogsFunc describes the behavior when the
// ExecutorSecretAccessLogs method of the parent MockEnterpriseDB instance
// is invoked.
type EnterpriseDBExecutorSecretAccessLogsFunc struct {
	defaultHook func() database.ExecutorSecretAccessLogStore
	hooks       []func() database.ExecutorSecretAccessLogStore
	history     []EnterpriseDBExecutorSecretAccessLogsFuncCall
	mutex       sync.Mutex
}

// ExecutorSecretAccessLogs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ExecutorSecretAccessLogs() database.ExecutorSecretAccessLogStore {
	r0 := m.ExecutorSecretAccessLogsFunc.nextHook()()
	m.ExecutorSecretAccessLogsFunc.appendCall(EnterpriseDBExecutorSecretAccessLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// ExecutorSecretAccessLogs method of the parent MockEnterpriseDB instance
// is invoked and the hook queue is empty.
func (f *EnterpriseDBExecutorSecretAccessLogsFunc) SetDefaultHook(hook func() database.ExecutorSecretAccessLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecutorSecretAccessLogs method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBExecutorSecretAccessLogsFunc) PushHook(hook func() database.ExecutorSecretAccessLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBExecutorSecretAccessLogsFunc) SetDefaultReturn(r0 database.ExecutorSecretAccessLogStore) {
	f.SetDefaultHook(func() database.ExecutorSecretAccessLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBExecutorSecretAccessLogsFunc) PushReturn(r0 database.ExecutorSecretAccessLogStore) {
	f.PushHook(func() database.ExecutorSecretAccessLogStore {
		return r0
	})
}

func (f *EnterpriseDBExecutorSecretAccessLogsFunc) nextHook() func() database.ExecutorSecretAccessLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExecutorSecretAccessLogsFunc) appendCall(r0 EnterpriseDBExecutorSecretAccessLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EnterpriseDBExecutorSecretAccessLogsFuncCall objects describing the
// invocations of this function.
func (f *EnterpriseDBExecutorSecretAccessLogsFunc) History() []EnterpriseDBExecutorSecretAccessLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExecutorSecretAccessLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExecutorSecretAccessLogsFuncCall is an object that describes
// an invocation of method ExecutorSecretAccessLogs on an instance of
// MockEnterpriseDB.
type EnterpriseDBExecutorSecretAccessLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExecutorSecretAccessLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBExecutorSecretAccessLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExecutorSecretAccessLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBExecutorSecretsFunc describes the behavior when the
// ExecutorSecrets method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBExecutorSecretsFunc struct {
	defaultHook func(encryption.Key) database.ExecutorSecretStore
	hooks       []func(encryption.Key) database.ExecutorSecretStore
	history     []EnterpriseDBExecutorSecretsFuncCall
	mutex       sync.Mutex
}

// ExecutorSecrets delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ExecutorSecrets(v0 encryption.Key) database.ExecutorSecretStore {
	r0 := m.ExecutorSecretsFunc.nextHook()(v0)
	m.ExecutorSecretsFunc.appendCall(EnterpriseDBExecutorSecretsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExecutorSecrets
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBExecutorSecretsFunc) SetDefaultHook(hook func(encryption.Key) database.ExecutorSecretStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExecutorSecrets method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBExecutorSecretsFunc) PushHook(hook func(encryption.Key) database.ExecutorSecretStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBExecutorSecretsFunc) SetDefaultReturn(r0 database.ExecutorSecretStore) {
	f.SetDefaultHook(func(encryption.Key) database.ExecutorSecretStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBExecutorSecretsFunc) PushReturn(r0 database.ExecutorSecretStore) {
	f.PushHook(func(encryption.Key) database.ExecutorSecretStore {
		return r0
	})
}

func (f *EnterpriseDBExecutorSecretsFunc) nextHook() func(encryption.Key) database.ExecutorSecretStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExecutorSecretsFunc) appendCall(r0 EnterpriseDBExecutorSecretsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExecutorSecretsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBExecutorSecretsFunc) History() []EnterpriseDBExecutorSecretsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExecutorSecretsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExecutorSecretsFuncCall is an object that describes an
// invocation of method ExecutorSecrets on an instance of MockEnterpriseDB.
type EnterpriseDBExecutorSecretsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExecutorSecretStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBExecutorSecretsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExecutorSecretsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBExecutorsFunc describes the behavior when the Executors
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBExecutorsFunc struct {
	defaultHook func() database.ExecutorStore
	hooks       []func() database.ExecutorStore
	history     []EnterpriseDBExecutorsFuncCall
	mutex       sync.Mutex
}

// Executors delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Executors() database.ExecutorStore {
	r0 := m.ExecutorsFunc.nextHook()()
	m.ExecutorsFunc.appendCall(EnterpriseDBExecutorsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Executors method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBExecutorsFunc) SetDefaultHook(hook func() database.ExecutorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Executors method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBExecutorsFunc) PushHook(hook func() database.ExecutorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBExecutorsFunc) SetDefaultReturn(r0 database.ExecutorStore) {
	f.SetDefaultHook(func() database.ExecutorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBExecutorsFunc) PushReturn(r0 database.ExecutorStore) {
	f.PushHook(func() database.ExecutorStore {
		return r0
	})
}

func (f *EnterpriseDBExecutorsFunc) nextHook() func() database.ExecutorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExecutorsFunc) appendCall(r0 EnterpriseDBExecutorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExecutorsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBExecutorsFunc) History() []EnterpriseDBExecutorsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExecutorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExecutorsFuncCall is an object that describes an invocation
// of method Executors on an instance of MockEnterpriseDB.
type EnterpriseDBExecutorsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExecutorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBExecutorsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExecutorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBExternalServicesFunc struct {
	defaultHook func() database.ExternalServiceStore
	hooks       []func() database.ExternalServiceStore
	history     []EnterpriseDBExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ExternalServices() database.ExternalServiceStore {
	r0 := m.ExternalServicesFunc.nextHook()()
	m.ExternalServicesFunc.appendCall(EnterpriseDBExternalServicesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBExternalServicesFunc) SetDefaultHook(hook func() database.ExternalServiceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBExternalServicesFunc) PushHook(hook func() database.ExternalServiceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBExternalServicesFunc) SetDefaultReturn(r0 database.ExternalServiceStore) {
	f.SetDefaultHook(func() database.ExternalServiceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBExternalServicesFunc) PushReturn(r0 database.ExternalServiceStore) {
	f.PushHook(func() database.ExternalServiceStore {
		return r0
	})
}

func (f *EnterpriseDBExternalServicesFunc) nextHook() func() database.ExternalServiceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBExternalServicesFunc) appendCall(r0 EnterpriseDBExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBExternalServicesFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBExternalServicesFunc) History() []EnterpriseDBExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockEnterpriseDB.
type EnterpriseDBExternalServicesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ExternalServiceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBFeatureFlagsFunc describes the behavior when the FeatureFlags
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBFeatureFlagsFunc struct {
	defaultHook func() database.FeatureFlagStore
	hooks       []func() database.FeatureFlagStore
	history     []EnterpriseDBFeatureFlagsFuncCall
	mutex       sync.Mutex
}

// FeatureFlags delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) FeatureFlags() database.FeatureFlagStore {
	r0 := m.FeatureFlagsFunc.nextHook()()
	m.FeatureFlagsFunc.appendCall(EnterpriseDBFeatureFlagsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the FeatureFlags method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBFeatureFlagsFunc) SetDefaultHook(hook func() database.FeatureFlagStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FeatureFlags method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBFeatureFlagsFunc) PushHook(hook func() database.FeatureFlagStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBFeatureFlagsFunc) SetDefaultReturn(r0 database.FeatureFlagStore) {
	f.SetDefaultHook(func() database.FeatureFlagStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBFeatureFlagsFunc) PushReturn(r0 database.FeatureFlagStore) {
	f.PushHook(func() database.FeatureFlagStore {
		return r0
	})
}

func (f *EnterpriseDBFeatureFlagsFunc) nextHook() func() database.FeatureFlagStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBFeatureFlagsFunc) appendCall(r0 EnterpriseDBFeatureFlagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBFeatureFlagsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBFeatureFlagsFunc) History() []EnterpriseDBFeatureFlagsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBFeatureFlagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBFeatureFlagsFuncCall is an object that describes an
// invocation of method FeatureFlags on an instance of MockEnterpriseDB.
type EnterpriseDBFeatureFlagsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.FeatureFlagStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBFeatureFlagsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBFeatureFlagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGitHubAppsFunc describes the behavior when the GitHubApps
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBGitHubAppsFunc struct {
	defaultHook func() store.GitHubAppsStore
	hooks       []func() store.GitHubAppsStore
	history     []EnterpriseDBGitHubAppsFuncCall
	mutex       sync.Mutex
}

// GitHubApps delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GitHubApps() store.GitHubAppsStore {
	r0 := m.GitHubAppsFunc.nextHook()()
	m.GitHubAppsFunc.appendCall(EnterpriseDBGitHubAppsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitHubApps method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBGitHubAppsFunc) SetDefaultHook(hook func() store.GitHubAppsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitHubApps method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBGitHubAppsFunc) PushHook(hook func() store.GitHubAppsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBGitHubAppsFunc) SetDefaultReturn(r0 store.GitHubAppsStore) {
	f.SetDefaultHook(func() store.GitHubAppsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBGitHubAppsFunc) PushReturn(r0 store.GitHubAppsStore) {
	f.PushHook(func() store.GitHubAppsStore {
		return r0
	})
}

func (f *EnterpriseDBGitHubAppsFunc) nextHook() func() store.GitHubAppsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGitHubAppsFunc) appendCall(r0 EnterpriseDBGitHubAppsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGitHubAppsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBGitHubAppsFunc) History() []EnterpriseDBGitHubAppsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGitHubAppsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGitHubAppsFuncCall is an object that describes an invocation
// of method GitHubApps on an instance of MockEnterpriseDB.
type EnterpriseDBGitHubAppsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store.GitHubAppsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGitHubAppsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGitHubAppsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGitserverLocalCloneFunc describes the behavior when the
// GitserverLocalClone method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBGitserverLocalCloneFunc struct {
	defaultHook func() database.GitserverLocalCloneStore
	hooks       []func() database.GitserverLocalCloneStore
	history     []EnterpriseDBGitserverLocalCloneFuncCall
	mutex       sync.Mutex
}

// GitserverLocalClone delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GitserverLocalClone() database.GitserverLocalCloneStore {
	r0 := m.GitserverLocalCloneFunc.nextHook()()
	m.GitserverLocalCloneFunc.appendCall(EnterpriseDBGitserverLocalCloneFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverLocalClone
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBGitserverLocalCloneFunc) SetDefaultHook(hook func() database.GitserverLocalCloneStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverLocalClone method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBGitserverLocalCloneFunc) PushHook(hook func() database.GitserverLocalCloneStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBGitserverLocalCloneFunc) SetDefaultReturn(r0 database.GitserverLocalCloneStore) {
	f.SetDefaultHook(func() database.GitserverLocalCloneStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBGitserverLocalCloneFunc) PushReturn(r0 database.GitserverLocalCloneStore) {
	f.PushHook(func() database.GitserverLocalCloneStore {
		return r0
	})
}

func (f *EnterpriseDBGitserverLocalCloneFunc) nextHook() func() database.GitserverLocalCloneStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGitserverLocalCloneFunc) appendCall(r0 EnterpriseDBGitserverLocalCloneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGitserverLocalCloneFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBGitserverLocalCloneFunc) History() []EnterpriseDBGitserverLocalCloneFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGitserverLocalCloneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGitserverLocalCloneFuncCall is an object that describes an
// invocation of method GitserverLocalClone on an instance of
// MockEnterpriseDB.
type EnterpriseDBGitserverLocalCloneFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GitserverLocalCloneStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGitserverLocalCloneFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGitserverLocalCloneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGitserverReposFunc describes the behavior when the
// GitserverRepos method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBGitserverReposFunc struct {
	defaultHook func() database.GitserverRepoStore
	hooks       []func() database.GitserverRepoStore
	history     []EnterpriseDBGitserverReposFuncCall
	mutex       sync.Mutex
}

// GitserverRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GitserverRepos() database.GitserverRepoStore {
	r0 := m.GitserverReposFunc.nextHook()()
	m.GitserverReposFunc.appendCall(EnterpriseDBGitserverReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GitserverRepos
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBGitserverReposFunc) SetDefaultHook(hook func() database.GitserverRepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GitserverRepos method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBGitserverReposFunc) PushHook(hook func() database.GitserverRepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBGitserverReposFunc) SetDefaultReturn(r0 database.GitserverRepoStore) {
	f.SetDefaultHook(func() database.GitserverRepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBGitserverReposFunc) PushReturn(r0 database.GitserverRepoStore) {
	f.PushHook(func() database.GitserverRepoStore {
		return r0
	})
}

func (f *EnterpriseDBGitserverReposFunc) nextHook() func() database.GitserverRepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGitserverReposFunc) appendCall(r0 EnterpriseDBGitserverReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGitserverReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBGitserverReposFunc) History() []EnterpriseDBGitserverReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGitserverReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGitserverReposFuncCall is an object that describes an
// invocation of method GitserverRepos on an instance of MockEnterpriseDB.
type EnterpriseDBGitserverReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GitserverRepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGitserverReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGitserverReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBGlobalStateFunc describes the behavior when the GlobalState
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBGlobalStateFunc struct {
	defaultHook func() database.GlobalStateStore
	hooks       []func() database.GlobalStateStore
	history     []EnterpriseDBGlobalStateFuncCall
	mutex       sync.Mutex
}

// GlobalState delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) GlobalState() database.GlobalStateStore {
	r0 := m.GlobalStateFunc.nextHook()()
	m.GlobalStateFunc.appendCall(EnterpriseDBGlobalStateFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GlobalState method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBGlobalStateFunc) SetDefaultHook(hook func() database.GlobalStateStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GlobalState method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBGlobalStateFunc) PushHook(hook func() database.GlobalStateStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBGlobalStateFunc) SetDefaultReturn(r0 database.GlobalStateStore) {
	f.SetDefaultHook(func() database.GlobalStateStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBGlobalStateFunc) PushReturn(r0 database.GlobalStateStore) {
	f.PushHook(func() database.GlobalStateStore {
		return r0
	})
}

func (f *EnterpriseDBGlobalStateFunc) nextHook() func() database.GlobalStateStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBGlobalStateFunc) appendCall(r0 EnterpriseDBGlobalStateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBGlobalStateFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBGlobalStateFunc) History() []EnterpriseDBGlobalStateFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBGlobalStateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBGlobalStateFuncCall is an object that describes an invocation
// of method GlobalState on an instance of MockEnterpriseDB.
type EnterpriseDBGlobalStateFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.GlobalStateStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBGlobalStateFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBGlobalStateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBHandleFunc describes the behavior when the Handle method of
// the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []EnterpriseDBHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(EnterpriseDBHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *EnterpriseDBHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBHandleFunc) appendCall(r0 EnterpriseDBHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBHandleFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBHandleFunc) History() []EnterpriseDBHandleFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockEnterpriseDB.
type EnterpriseDBHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBNamespacePermissionsFunc describes the behavior when the
// NamespacePermissions method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBNamespacePermissionsFunc struct {
	defaultHook func() database.NamespacePermissionStore
	hooks       []func() database.NamespacePermissionStore
	history     []EnterpriseDBNamespacePermissionsFuncCall
	mutex       sync.Mutex
}

// NamespacePermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) NamespacePermissions() database.NamespacePermissionStore {
	r0 := m.NamespacePermissionsFunc.nextHook()()
	m.NamespacePermissionsFunc.appendCall(EnterpriseDBNamespacePermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the NamespacePermissions
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBNamespacePermissionsFunc) SetDefaultHook(hook func() database.NamespacePermissionStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NamespacePermissions method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBNamespacePermissionsFunc) PushHook(hook func() database.NamespacePermissionStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBNamespacePermissionsFunc) SetDefaultReturn(r0 database.NamespacePermissionStore) {
	f.SetDefaultHook(func() database.NamespacePermissionStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBNamespacePermissionsFunc) PushReturn(r0 database.NamespacePermissionStore) {
	f.PushHook(func() database.NamespacePermissionStore {
		return r0
	})
}

func (f *EnterpriseDBNamespacePermissionsFunc) nextHook() func() database.NamespacePermissionStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBNamespacePermissionsFunc) appendCall(r0 EnterpriseDBNamespacePermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBNamespacePermissionsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBNamespacePermissionsFunc) History() []EnterpriseDBNamespacePermissionsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBNamespacePermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBNamespacePermissionsFuncCall is an object that describes an
// invocation of method NamespacePermissions on an instance of
// MockEnterpriseDB.
type EnterpriseDBNamespacePermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.NamespacePermissionStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBNamespacePermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBNamespacePermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBNamespacesFunc describes the behavior when the Namespaces
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBNamespacesFunc struct {
	defaultHook func() database.NamespaceStore
	hooks       []func() database.NamespaceStore
	history     []EnterpriseDBNamespacesFuncCall
	mutex       sync.Mutex
}

// Namespaces delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) Namespaces() database.NamespaceStore {
	r0 := m.NamespacesFunc.nextHook()()
	m.NamespacesFunc.appendCall(EnterpriseDBNamespacesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Namespaces method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBNamespacesFunc) SetDefaultHook(hook func() database.NamespaceStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Namespaces method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBNamespacesFunc) PushHook(hook func() database.NamespaceStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBNamespacesFunc) SetDefaultReturn(r0 database.NamespaceStore) {
	f.SetDefaultHook(func() database.NamespaceStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBNamespacesFunc) PushReturn(r0 database.NamespaceStore) {
	f.PushHook(func() database.NamespaceStore {
		return r0
	})
}

func (f *EnterpriseDBNamespacesFunc) nextHook() func() database.NamespaceStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBNamespacesFunc) appendCall(r0 EnterpriseDBNamespacesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBNamespacesFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBNamespacesFunc) History() []EnterpriseDBNamespacesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBNamespacesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBNamespacesFuncCall is an object that describes an invocation
// of method Namespaces on an instance of MockEnterpriseDB.
type EnterpriseDBNamespacesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.NamespaceStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBNamespacesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBNamespacesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgInvitationsFunc describes the behavior when the
// OrgInvitations method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgInvitationsFunc struct {
	defaultHook func() database.OrgInvitationStore
	hooks       []func() database.OrgInvitationStore
	history     []EnterpriseDBOrgInvitationsFuncCall
	mutex       sync.Mutex
}

// OrgInvitations delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OrgInvitations() database.OrgInvitationStore {
	r0 := m.OrgInvitationsFunc.nextHook()()
	m.OrgInvitationsFunc.appendCall(EnterpriseDBOrgInvitationsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgInvitations
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBOrgInvitationsFunc) SetDefaultHook(hook func() database.OrgInvitationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgInvitations method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBOrgInvitationsFunc) PushHook(hook func() database.OrgInvitationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOrgInvitationsFunc) SetDefaultReturn(r0 database.OrgInvitationStore) {
	f.SetDefaultHook(func() database.OrgInvitationStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOrgInvitationsFunc) PushReturn(r0 database.OrgInvitationStore) {
	f.PushHook(func() database.OrgInvitationStore {
		return r0
	})
}

func (f *EnterpriseDBOrgInvitationsFunc) nextHook() func() database.OrgInvitationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgInvitationsFunc) appendCall(r0 EnterpriseDBOrgInvitationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgInvitationsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOrgInvitationsFunc) History() []EnterpriseDBOrgInvitationsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgInvitationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgInvitationsFuncCall is an object that describes an
// invocation of method OrgInvitations on an instance of MockEnterpriseDB.
type EnterpriseDBOrgInvitationsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgInvitationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgInvitationsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgInvitationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgMembersFunc describes the behavior when the OrgMembers
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgMembersFunc struct {
	defaultHook func() database.OrgMemberStore
	hooks       []func() database.OrgMemberStore
	history     []EnterpriseDBOrgMembersFuncCall
	mutex       sync.Mutex
}

// OrgMembers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OrgMembers() database.OrgMemberStore {
	r0 := m.OrgMembersFunc.nextHook()()
	m.OrgMembersFunc.appendCall(EnterpriseDBOrgMembersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OrgMembers method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBOrgMembersFunc) SetDefaultHook(hook func() database.OrgMemberStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OrgMembers method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBOrgMembersFunc) PushHook(hook func() database.OrgMemberStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOrgMembersFunc) SetDefaultReturn(r0 database.OrgMemberStore) {
	f.SetDefaultHook(func() database.OrgMemberStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOrgMembersFunc) PushReturn(r0 database.OrgMemberStore) {
	f.PushHook(func() database.OrgMemberStore {
		return r0
	})
}

func (f *EnterpriseDBOrgMembersFunc) nextHook() func() database.OrgMemberStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgMembersFunc) appendCall(r0 EnterpriseDBOrgMembersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgMembersFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOrgMembersFunc) History() []EnterpriseDBOrgMembersFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgMembersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgMembersFuncCall is an object that describes an invocation
// of method OrgMembers on an instance of MockEnterpriseDB.
type EnterpriseDBOrgMembersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgMemberStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgMembersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgMembersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOrgsFunc describes the behavior when the Orgs method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOrgsFunc struct {
	defaultHook func() database.OrgStore
	hooks       []func() database.OrgStore
	history     []EnterpriseDBOrgsFuncCall
	mutex       sync.Mutex
}

// Orgs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Orgs() database.OrgStore {
	r0 := m.OrgsFunc.nextHook()()
	m.OrgsFunc.appendCall(EnterpriseDBOrgsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Orgs method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBOrgsFunc) SetDefaultHook(hook func() database.OrgStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Orgs method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBOrgsFunc) PushHook(hook func() database.OrgStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOrgsFunc) SetDefaultReturn(r0 database.OrgStore) {
	f.SetDefaultHook(func() database.OrgStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOrgsFunc) PushReturn(r0 database.OrgStore) {
	f.PushHook(func() database.OrgStore {
		return r0
	})
}

func (f *EnterpriseDBOrgsFunc) nextHook() func() database.OrgStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOrgsFunc) appendCall(r0 EnterpriseDBOrgsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOrgsFuncCall objects describing
// the invocations of this function.
func (f *EnterpriseDBOrgsFunc) History() []EnterpriseDBOrgsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOrgsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOrgsFuncCall is an object that describes an invocation of
// method Orgs on an instance of MockEnterpriseDB.
type EnterpriseDBOrgsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OrgStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOrgsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOrgsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOutboundWebhookJobsFunc describes the behavior when the
// OutboundWebhookJobs method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBOutboundWebhookJobsFunc struct {
	defaultHook func(encryption.Key) database.OutboundWebhookJobStore
	hooks       []func(encryption.Key) database.OutboundWebhookJobStore
	history     []EnterpriseDBOutboundWebhookJobsFuncCall
	mutex       sync.Mutex
}

// OutboundWebhookJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OutboundWebhookJobs(v0 encryption.Key) database.OutboundWebhookJobStore {
	r0 := m.OutboundWebhookJobsFunc.nextHook()(v0)
	m.OutboundWebhookJobsFunc.appendCall(EnterpriseDBOutboundWebhookJobsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the OutboundWebhookJobs
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBOutboundWebhookJobsFunc) SetDefaultHook(hook func(encryption.Key) database.OutboundWebhookJobStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OutboundWebhookJobs method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBOutboundWebhookJobsFunc) PushHook(hook func(encryption.Key) database.OutboundWebhookJobStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOutboundWebhookJobsFunc) SetDefaultReturn(r0 database.OutboundWebhookJobStore) {
	f.SetDefaultHook(func(encryption.Key) database.OutboundWebhookJobStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOutboundWebhookJobsFunc) PushReturn(r0 database.OutboundWebhookJobStore) {
	f.PushHook(func(encryption.Key) database.OutboundWebhookJobStore {
		return r0
	})
}

func (f *EnterpriseDBOutboundWebhookJobsFunc) nextHook() func(encryption.Key) database.OutboundWebhookJobStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOutboundWebhookJobsFunc) appendCall(r0 EnterpriseDBOutboundWebhookJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOutboundWebhookJobsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBOutboundWebhookJobsFunc) History() []EnterpriseDBOutboundWebhookJobsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOutboundWebhookJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOutboundWebhookJobsFuncCall is an object that describes an
// invocation of method OutboundWebhookJobs on an instance of
// MockEnterpriseDB.
type EnterpriseDBOutboundWebhookJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OutboundWebhookJobStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOutboundWebhookJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOutboundWebhookJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOutboundWebhookLogsFunc describes the behavior when the
// OutboundWebhookLogs method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBOutboundWebhookLogsFunc struct {
	defaultHook func(encryption.Key) database.OutboundWebhookLogStore
	hooks       []func(encryption.Key) database.OutboundWebhookLogStore
	history     []EnterpriseDBOutboundWebhookLogsFuncCall
	mutex       sync.Mutex
}

// OutboundWebhookLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OutboundWebhookLogs(v0 encryption.Key) database.OutboundWebhookLogStore {
	r0 := m.OutboundWebhookLogsFunc.nextHook()(v0)
	m.OutboundWebhookLogsFunc.appendCall(EnterpriseDBOutboundWebhookLogsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the OutboundWebhookLogs
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBOutboundWebhookLogsFunc) SetDefaultHook(hook func(encryption.Key) database.OutboundWebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OutboundWebhookLogs method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBOutboundWebhookLogsFunc) PushHook(hook func(encryption.Key) database.OutboundWebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOutboundWebhookLogsFunc) SetDefaultReturn(r0 database.OutboundWebhookLogStore) {
	f.SetDefaultHook(func(encryption.Key) database.OutboundWebhookLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOutboundWebhookLogsFunc) PushReturn(r0 database.OutboundWebhookLogStore) {
	f.PushHook(func(encryption.Key) database.OutboundWebhookLogStore {
		return r0
	})
}

func (f *EnterpriseDBOutboundWebhookLogsFunc) nextHook() func(encryption.Key) database.OutboundWebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOutboundWebhookLogsFunc) appendCall(r0 EnterpriseDBOutboundWebhookLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOutboundWebhookLogsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBOutboundWebhookLogsFunc) History() []EnterpriseDBOutboundWebhookLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOutboundWebhookLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOutboundWebhookLogsFuncCall is an object that describes an
// invocation of method OutboundWebhookLogs on an instance of
// MockEnterpriseDB.
type EnterpriseDBOutboundWebhookLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OutboundWebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOutboundWebhookLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOutboundWebhookLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOutboundWebhooksFunc describes the behavior when the
// OutboundWebhooks method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBOutboundWebhooksFunc struct {
	defaultHook func(encryption.Key) database.OutboundWebhookStore
	hooks       []func(encryption.Key) database.OutboundWebhookStore
	history     []EnterpriseDBOutboundWebhooksFuncCall
	mutex       sync.Mutex
}

// OutboundWebhooks delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OutboundWebhooks(v0 encryption.Key) database.OutboundWebhookStore {
	r0 := m.OutboundWebhooksFunc.nextHook()(v0)
	m.OutboundWebhooksFunc.appendCall(EnterpriseDBOutboundWebhooksFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the OutboundWebhooks
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBOutboundWebhooksFunc) SetDefaultHook(hook func(encryption.Key) database.OutboundWebhookStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OutboundWebhooks method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBOutboundWebhooksFunc) PushHook(hook func(encryption.Key) database.OutboundWebhookStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOutboundWebhooksFunc) SetDefaultReturn(r0 database.OutboundWebhookStore) {
	f.SetDefaultHook(func(encryption.Key) database.OutboundWebhookStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOutboundWebhooksFunc) PushReturn(r0 database.OutboundWebhookStore) {
	f.PushHook(func(encryption.Key) database.OutboundWebhookStore {
		return r0
	})
}

func (f *EnterpriseDBOutboundWebhooksFunc) nextHook() func(encryption.Key) database.OutboundWebhookStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOutboundWebhooksFunc) appendCall(r0 EnterpriseDBOutboundWebhooksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOutboundWebhooksFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBOutboundWebhooksFunc) History() []EnterpriseDBOutboundWebhooksFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOutboundWebhooksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOutboundWebhooksFuncCall is an object that describes an
// invocation of method OutboundWebhooks on an instance of MockEnterpriseDB.
type EnterpriseDBOutboundWebhooksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OutboundWebhookStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOutboundWebhooksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOutboundWebhooksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOwnSignalConfigurationsFunc describes the behavior when the
// OwnSignalConfigurations method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBOwnSignalConfigurationsFunc struct {
	defaultHook func() database.SignalConfigurationStore
	hooks       []func() database.SignalConfigurationStore
	history     []EnterpriseDBOwnSignalConfigurationsFuncCall
	mutex       sync.Mutex
}

// OwnSignalConfigurations delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OwnSignalConfigurations() database.SignalConfigurationStore {
	r0 := m.OwnSignalConfigurationsFunc.nextHook()()
	m.OwnSignalConfigurationsFunc.appendCall(EnterpriseDBOwnSignalConfigurationsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// OwnSignalConfigurations method of the parent MockEnterpriseDB instance is
// invoked and the hook queue is empty.
func (f *EnterpriseDBOwnSignalConfigurationsFunc) SetDefaultHook(hook func() database.SignalConfigurationStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OwnSignalConfigurations method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBOwnSignalConfigurationsFunc) PushHook(hook func() database.SignalConfigurationStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOwnSignalConfigurationsFunc) SetDefaultReturn(r0 database.SignalConfigurationStore) {
	f.SetDefaultHook(func() database.SignalConfigurationStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOwnSignalConfigurationsFunc) PushReturn(r0 database.SignalConfigurationStore) {
	f.PushHook(func() database.SignalConfigurationStore {
		return r0
	})
}

func (f *EnterpriseDBOwnSignalConfigurationsFunc) nextHook() func() database.SignalConfigurationStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOwnSignalConfigurationsFunc) appendCall(r0 EnterpriseDBOwnSignalConfigurationsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOwnSignalConfigurationsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBOwnSignalConfigurationsFunc) History() []EnterpriseDBOwnSignalConfigurationsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOwnSignalConfigurationsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOwnSignalConfigurationsFuncCall is an object that describes
// an invocation of method OwnSignalConfigurations on an instance of
// MockEnterpriseDB.
type EnterpriseDBOwnSignalConfigurationsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SignalConfigurationStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOwnSignalConfigurationsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOwnSignalConfigurationsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBOwnershipStatsFunc describes the behavior when the
// OwnershipStats method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBOwnershipStatsFunc struct {
	defaultHook func() database.OwnershipStatsStore
	hooks       []func() database.OwnershipStatsStore
	history     []EnterpriseDBOwnershipStatsFuncCall
	mutex       sync.Mutex
}

// OwnershipStats delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) OwnershipStats() database.OwnershipStatsStore {
	r0 := m.OwnershipStatsFunc.nextHook()()
	m.OwnershipStatsFunc.appendCall(EnterpriseDBOwnershipStatsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the OwnershipStats
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBOwnershipStatsFunc) SetDefaultHook(hook func() database.OwnershipStatsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// OwnershipStats method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBOwnershipStatsFunc) PushHook(hook func() database.OwnershipStatsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBOwnershipStatsFunc) SetDefaultReturn(r0 database.OwnershipStatsStore) {
	f.SetDefaultHook(func() database.OwnershipStatsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBOwnershipStatsFunc) PushReturn(r0 database.OwnershipStatsStore) {
	f.PushHook(func() database.OwnershipStatsStore {
		return r0
	})
}

func (f *EnterpriseDBOwnershipStatsFunc) nextHook() func() database.OwnershipStatsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBOwnershipStatsFunc) appendCall(r0 EnterpriseDBOwnershipStatsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBOwnershipStatsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBOwnershipStatsFunc) History() []EnterpriseDBOwnershipStatsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBOwnershipStatsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBOwnershipStatsFuncCall is an object that describes an
// invocation of method OwnershipStats on an instance of MockEnterpriseDB.
type EnterpriseDBOwnershipStatsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.OwnershipStatsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBOwnershipStatsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBOwnershipStatsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBPermissionSyncJobsFunc describes the behavior when the
// PermissionSyncJobs method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBPermissionSyncJobsFunc struct {
	defaultHook func() database.PermissionSyncJobStore
	hooks       []func() database.PermissionSyncJobStore
	history     []EnterpriseDBPermissionSyncJobsFuncCall
	mutex       sync.Mutex
}

// PermissionSyncJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) PermissionSyncJobs() database.PermissionSyncJobStore {
	r0 := m.PermissionSyncJobsFunc.nextHook()()
	m.PermissionSyncJobsFunc.appendCall(EnterpriseDBPermissionSyncJobsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the PermissionSyncJobs
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBPermissionSyncJobsFunc) SetDefaultHook(hook func() database.PermissionSyncJobStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// PermissionSyncJobs method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBPermissionSyncJobsFunc) PushHook(hook func() database.PermissionSyncJobStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBPermissionSyncJobsFunc) SetDefaultReturn(r0 database.PermissionSyncJobStore) {
	f.SetDefaultHook(func() database.PermissionSyncJobStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBPermissionSyncJobsFunc) PushReturn(r0 database.PermissionSyncJobStore) {
	f.PushHook(func() database.PermissionSyncJobStore {
		return r0
	})
}

func (f *EnterpriseDBPermissionSyncJobsFunc) nextHook() func() database.PermissionSyncJobStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBPermissionSyncJobsFunc) appendCall(r0 EnterpriseDBPermissionSyncJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBPermissionSyncJobsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBPermissionSyncJobsFunc) History() []EnterpriseDBPermissionSyncJobsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBPermissionSyncJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBPermissionSyncJobsFuncCall is an object that describes an
// invocation of method PermissionSyncJobs on an instance of
// MockEnterpriseDB.
type EnterpriseDBPermissionSyncJobsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.PermissionSyncJobStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBPermissionSyncJobsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBPermissionSyncJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBPermissionsFunc describes the behavior when the Permissions
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBPermissionsFunc struct {
	defaultHook func() database.PermissionStore
	hooks       []func() database.PermissionStore
	history     []EnterpriseDBPermissionsFuncCall
	mutex       sync.Mutex
}

// Permissions delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) Permissions() database.PermissionStore {
	r0 := m.PermissionsFunc.nextHook()()
	m.PermissionsFunc.appendCall(EnterpriseDBPermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Permissions method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBPermissionsFunc) SetDefaultHook(hook func() database.PermissionStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Permissions method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBPermissionsFunc) PushHook(hook func() database.PermissionStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBPermissionsFunc) SetDefaultReturn(r0 database.PermissionStore) {
	f.SetDefaultHook(func() database.PermissionStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBPermissionsFunc) PushReturn(r0 database.PermissionStore) {
	f.PushHook(func() database.PermissionStore {
		return r0
	})
}

func (f *EnterpriseDBPermissionsFunc) nextHook() func() database.PermissionStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBPermissionsFunc) appendCall(r0 EnterpriseDBPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBPermissionsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBPermissionsFunc) History() []EnterpriseDBPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBPermissionsFuncCall is an object that describes an invocation
// of method Permissions on an instance of MockEnterpriseDB.
type EnterpriseDBPermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.PermissionStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBPermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBPermsFunc describes the behavior when the Perms method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBPermsFunc struct {
	defaultHook func() PermsStore
	hooks       []func() PermsStore
	history     []EnterpriseDBPermsFuncCall
	mutex       sync.Mutex
}

// Perms delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Perms() PermsStore {
	r0 := m.PermsFunc.nextHook()()
	m.PermsFunc.appendCall(EnterpriseDBPermsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Perms method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBPermsFunc) SetDefaultHook(hook func() PermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Perms method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBPermsFunc) PushHook(hook func() PermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBPermsFunc) SetDefaultReturn(r0 PermsStore) {
	f.SetDefaultHook(func() PermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBPermsFunc) PushReturn(r0 PermsStore) {
	f.PushHook(func() PermsStore {
		return r0
	})
}

func (f *EnterpriseDBPermsFunc) nextHook() func() PermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBPermsFunc) appendCall(r0 EnterpriseDBPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBPermsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBPermsFunc) History() []EnterpriseDBPermsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBPermsFuncCall is an object that describes an invocation of
// method Perms on an instance of MockEnterpriseDB.
type EnterpriseDBPermsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBPermsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBPhabricatorFunc describes the behavior when the Phabricator
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBPhabricatorFunc struct {
	defaultHook func() database.PhabricatorStore
	hooks       []func() database.PhabricatorStore
	history     []EnterpriseDBPhabricatorFuncCall
	mutex       sync.Mutex
}

// Phabricator delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) Phabricator() database.PhabricatorStore {
	r0 := m.PhabricatorFunc.nextHook()()
	m.PhabricatorFunc.appendCall(EnterpriseDBPhabricatorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Phabricator method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBPhabricatorFunc) SetDefaultHook(hook func() database.PhabricatorStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Phabricator method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBPhabricatorFunc) PushHook(hook func() database.PhabricatorStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBPhabricatorFunc) SetDefaultReturn(r0 database.PhabricatorStore) {
	f.SetDefaultHook(func() database.PhabricatorStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBPhabricatorFunc) PushReturn(r0 database.PhabricatorStore) {
	f.PushHook(func() database.PhabricatorStore {
		return r0
	})
}

func (f *EnterpriseDBPhabricatorFunc) nextHook() func() database.PhabricatorStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBPhabricatorFunc) appendCall(r0 EnterpriseDBPhabricatorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBPhabricatorFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBPhabricatorFunc) History() []EnterpriseDBPhabricatorFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBPhabricatorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBPhabricatorFuncCall is an object that describes an invocation
// of method Phabricator on an instance of MockEnterpriseDB.
type EnterpriseDBPhabricatorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.PhabricatorStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBPhabricatorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBPhabricatorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBQueryContextFunc describes the behavior when the QueryContext
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBQueryContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) (*sql.Rows, error)
	hooks       []func(context.Context, string, ...interface{}) (*sql.Rows, error)
	history     []EnterpriseDBQueryContextFuncCall
	mutex       sync.Mutex
}

// QueryContext delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) QueryContext(v0 context.Context, v1 string, v2 ...interface{}) (*sql.Rows, error) {
	r0, r1 := m.QueryContextFunc.nextHook()(v0, v1, v2...)
	m.QueryContextFunc.appendCall(EnterpriseDBQueryContextFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueryContext method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBQueryContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryContext method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBQueryContextFunc) PushHook(hook func(context.Context, string, ...interface{}) (*sql.Rows, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBQueryContextFunc) SetDefaultReturn(r0 *sql.Rows, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBQueryContextFunc) PushReturn(r0 *sql.Rows, r1 error) {
	f.PushHook(func(context.Context, string, ...interface{}) (*sql.Rows, error) {
		return r0, r1
	})
}

func (f *EnterpriseDBQueryContextFunc) nextHook() func(context.Context, string, ...interface{}) (*sql.Rows, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBQueryContextFunc) appendCall(r0 EnterpriseDBQueryContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBQueryContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBQueryContextFunc) History() []EnterpriseDBQueryContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBQueryContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBQueryContextFuncCall is an object that describes an
// invocation of method QueryContext on an instance of MockEnterpriseDB.
type EnterpriseDBQueryContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Rows
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBQueryContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBQueryContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// EnterpriseDBQueryRowContextFunc describes the behavior when the
// QueryRowContext method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBQueryRowContextFunc struct {
	defaultHook func(context.Context, string, ...interface{}) *sql.Row
	hooks       []func(context.Context, string, ...interface{}) *sql.Row
	history     []EnterpriseDBQueryRowContextFuncCall
	mutex       sync.Mutex
}

// QueryRowContext delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) QueryRowContext(v0 context.Context, v1 string, v2 ...interface{}) *sql.Row {
	r0 := m.QueryRowContextFunc.nextHook()(v0, v1, v2...)
	m.QueryRowContextFunc.appendCall(EnterpriseDBQueryRowContextFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the QueryRowContext
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBQueryRowContextFunc) SetDefaultHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueryRowContext method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBQueryRowContextFunc) PushHook(hook func(context.Context, string, ...interface{}) *sql.Row) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBQueryRowContextFunc) SetDefaultReturn(r0 *sql.Row) {
	f.SetDefaultHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBQueryRowContextFunc) PushReturn(r0 *sql.Row) {
	f.PushHook(func(context.Context, string, ...interface{}) *sql.Row {
		return r0
	})
}

func (f *EnterpriseDBQueryRowContextFunc) nextHook() func(context.Context, string, ...interface{}) *sql.Row {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBQueryRowContextFunc) appendCall(r0 EnterpriseDBQueryRowContextFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBQueryRowContextFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBQueryRowContextFunc) History() []EnterpriseDBQueryRowContextFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBQueryRowContextFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBQueryRowContextFuncCall is an object that describes an
// invocation of method QueryRowContext on an instance of MockEnterpriseDB.
type EnterpriseDBQueryRowContextFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sql.Row
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c EnterpriseDBQueryRowContextFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBQueryRowContextFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRecentContributionSignalsFunc describes the behavior when the
// RecentContributionSignals method of the parent MockEnterpriseDB instance
// is invoked.
type EnterpriseDBRecentContributionSignalsFunc struct {
	defaultHook func() database.RecentContributionSignalStore
	hooks       []func() database.RecentContributionSignalStore
	history     []EnterpriseDBRecentContributionSignalsFuncCall
	mutex       sync.Mutex
}

// RecentContributionSignals delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) RecentContributionSignals() database.RecentContributionSignalStore {
	r0 := m.RecentContributionSignalsFunc.nextHook()()
	m.RecentContributionSignalsFunc.appendCall(EnterpriseDBRecentContributionSignalsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RecentContributionSignals method of the parent MockEnterpriseDB instance
// is invoked and the hook queue is empty.
func (f *EnterpriseDBRecentContributionSignalsFunc) SetDefaultHook(hook func() database.RecentContributionSignalStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecentContributionSignals method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBRecentContributionSignalsFunc) PushHook(hook func() database.RecentContributionSignalStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRecentContributionSignalsFunc) SetDefaultReturn(r0 database.RecentContributionSignalStore) {
	f.SetDefaultHook(func() database.RecentContributionSignalStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRecentContributionSignalsFunc) PushReturn(r0 database.RecentContributionSignalStore) {
	f.PushHook(func() database.RecentContributionSignalStore {
		return r0
	})
}

func (f *EnterpriseDBRecentContributionSignalsFunc) nextHook() func() database.RecentContributionSignalStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRecentContributionSignalsFunc) appendCall(r0 EnterpriseDBRecentContributionSignalsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// EnterpriseDBRecentContributionSignalsFuncCall objects describing the
// invocations of this function.
func (f *EnterpriseDBRecentContributionSignalsFunc) History() []EnterpriseDBRecentContributionSignalsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRecentContributionSignalsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRecentContributionSignalsFuncCall is an object that describes
// an invocation of method RecentContributionSignals on an instance of
// MockEnterpriseDB.
type EnterpriseDBRecentContributionSignalsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RecentContributionSignalStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRecentContributionSignalsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRecentContributionSignalsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRecentViewSignalFunc describes the behavior when the
// RecentViewSignal method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBRecentViewSignalFunc struct {
	defaultHook func() database.RecentViewSignalStore
	hooks       []func() database.RecentViewSignalStore
	history     []EnterpriseDBRecentViewSignalFuncCall
	mutex       sync.Mutex
}

// RecentViewSignal delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) RecentViewSignal() database.RecentViewSignalStore {
	r0 := m.RecentViewSignalFunc.nextHook()()
	m.RecentViewSignalFunc.appendCall(EnterpriseDBRecentViewSignalFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RecentViewSignal
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBRecentViewSignalFunc) SetDefaultHook(hook func() database.RecentViewSignalStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RecentViewSignal method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBRecentViewSignalFunc) PushHook(hook func() database.RecentViewSignalStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRecentViewSignalFunc) SetDefaultReturn(r0 database.RecentViewSignalStore) {
	f.SetDefaultHook(func() database.RecentViewSignalStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRecentViewSignalFunc) PushReturn(r0 database.RecentViewSignalStore) {
	f.PushHook(func() database.RecentViewSignalStore {
		return r0
	})
}

func (f *EnterpriseDBRecentViewSignalFunc) nextHook() func() database.RecentViewSignalStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRecentViewSignalFunc) appendCall(r0 EnterpriseDBRecentViewSignalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBRecentViewSignalFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBRecentViewSignalFunc) History() []EnterpriseDBRecentViewSignalFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRecentViewSignalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRecentViewSignalFuncCall is an object that describes an
// invocation of method RecentViewSignal on an instance of MockEnterpriseDB.
type EnterpriseDBRecentViewSignalFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RecentViewSignalStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRecentViewSignalFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRecentViewSignalFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRedisKeyValueFunc describes the behavior when the
// RedisKeyValue method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBRedisKeyValueFunc struct {
	defaultHook func() database.RedisKeyValueStore
	hooks       []func() database.RedisKeyValueStore
	history     []EnterpriseDBRedisKeyValueFuncCall
	mutex       sync.Mutex
}

// RedisKeyValue delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) RedisKeyValue() database.RedisKeyValueStore {
	r0 := m.RedisKeyValueFunc.nextHook()()
	m.RedisKeyValueFunc.appendCall(EnterpriseDBRedisKeyValueFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RedisKeyValue method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBRedisKeyValueFunc) SetDefaultHook(hook func() database.RedisKeyValueStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RedisKeyValue method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBRedisKeyValueFunc) PushHook(hook func() database.RedisKeyValueStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRedisKeyValueFunc) SetDefaultReturn(r0 database.RedisKeyValueStore) {
	f.SetDefaultHook(func() database.RedisKeyValueStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRedisKeyValueFunc) PushReturn(r0 database.RedisKeyValueStore) {
	f.PushHook(func() database.RedisKeyValueStore {
		return r0
	})
}

func (f *EnterpriseDBRedisKeyValueFunc) nextHook() func() database.RedisKeyValueStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRedisKeyValueFunc) appendCall(r0 EnterpriseDBRedisKeyValueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBRedisKeyValueFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBRedisKeyValueFunc) History() []EnterpriseDBRedisKeyValueFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRedisKeyValueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRedisKeyValueFuncCall is an object that describes an
// invocation of method RedisKeyValue on an instance of MockEnterpriseDB.
type EnterpriseDBRedisKeyValueFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RedisKeyValueStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRedisKeyValueFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRedisKeyValueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRepoCommitsChangelistsFunc describes the behavior when the
// RepoCommitsChangelists method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBRepoCommitsChangelistsFunc struct {
	defaultHook func() database.RepoCommitsChangelistsStore
	hooks       []func() database.RepoCommitsChangelistsStore
	history     []EnterpriseDBRepoCommitsChangelistsFuncCall
	mutex       sync.Mutex
}

// RepoCommitsChangelists delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) RepoCommitsChangelists() database.RepoCommitsChangelistsStore {
	r0 := m.RepoCommitsChangelistsFunc.nextHook()()
	m.RepoCommitsChangelistsFunc.appendCall(EnterpriseDBRepoCommitsChangelistsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// RepoCommitsChangelists method of the parent MockEnterpriseDB instance is
// invoked and the hook queue is empty.
func (f *EnterpriseDBRepoCommitsChangelistsFunc) SetDefaultHook(hook func() database.RepoCommitsChangelistsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoCommitsChangelists method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBRepoCommitsChangelistsFunc) PushHook(hook func() database.RepoCommitsChangelistsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRepoCommitsChangelistsFunc) SetDefaultReturn(r0 database.RepoCommitsChangelistsStore) {
	f.SetDefaultHook(func() database.RepoCommitsChangelistsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRepoCommitsChangelistsFunc) PushReturn(r0 database.RepoCommitsChangelistsStore) {
	f.PushHook(func() database.RepoCommitsChangelistsStore {
		return r0
	})
}

func (f *EnterpriseDBRepoCommitsChangelistsFunc) nextHook() func() database.RepoCommitsChangelistsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRepoCommitsChangelistsFunc) appendCall(r0 EnterpriseDBRepoCommitsChangelistsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBRepoCommitsChangelistsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBRepoCommitsChangelistsFunc) History() []EnterpriseDBRepoCommitsChangelistsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRepoCommitsChangelistsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRepoCommitsChangelistsFuncCall is an object that describes an
// invocation of method RepoCommitsChangelists on an instance of
// MockEnterpriseDB.
type EnterpriseDBRepoCommitsChangelistsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoCommitsChangelistsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRepoCommitsChangelistsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRepoCommitsChangelistsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRepoKVPsFunc describes the behavior when the RepoKVPs method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBRepoKVPsFunc struct {
	defaultHook func() database.RepoKVPStore
	hooks       []func() database.RepoKVPStore
	history     []EnterpriseDBRepoKVPsFuncCall
	mutex       sync.Mutex
}

// RepoKVPs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) RepoKVPs() database.RepoKVPStore {
	r0 := m.RepoKVPsFunc.nextHook()()
	m.RepoKVPsFunc.appendCall(EnterpriseDBRepoKVPsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RepoKVPs method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBRepoKVPsFunc) SetDefaultHook(hook func() database.RepoKVPStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoKVPs method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBRepoKVPsFunc) PushHook(hook func() database.RepoKVPStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRepoKVPsFunc) SetDefaultReturn(r0 database.RepoKVPStore) {
	f.SetDefaultHook(func() database.RepoKVPStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRepoKVPsFunc) PushReturn(r0 database.RepoKVPStore) {
	f.PushHook(func() database.RepoKVPStore {
		return r0
	})
}

func (f *EnterpriseDBRepoKVPsFunc) nextHook() func() database.RepoKVPStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRepoKVPsFunc) appendCall(r0 EnterpriseDBRepoKVPsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBRepoKVPsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBRepoKVPsFunc) History() []EnterpriseDBRepoKVPsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRepoKVPsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRepoKVPsFuncCall is an object that describes an invocation of
// method RepoKVPs on an instance of MockEnterpriseDB.
type EnterpriseDBRepoKVPsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoKVPStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRepoKVPsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRepoKVPsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRepoPathsFunc describes the behavior when the RepoPaths
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBRepoPathsFunc struct {
	defaultHook func() database.RepoPathStore
	hooks       []func() database.RepoPathStore
	history     []EnterpriseDBRepoPathsFuncCall
	mutex       sync.Mutex
}

// RepoPaths delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) RepoPaths() database.RepoPathStore {
	r0 := m.RepoPathsFunc.nextHook()()
	m.RepoPathsFunc.appendCall(EnterpriseDBRepoPathsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RepoPaths method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBRepoPathsFunc) SetDefaultHook(hook func() database.RepoPathStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoPaths method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBRepoPathsFunc) PushHook(hook func() database.RepoPathStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRepoPathsFunc) SetDefaultReturn(r0 database.RepoPathStore) {
	f.SetDefaultHook(func() database.RepoPathStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRepoPathsFunc) PushReturn(r0 database.RepoPathStore) {
	f.PushHook(func() database.RepoPathStore {
		return r0
	})
}

func (f *EnterpriseDBRepoPathsFunc) nextHook() func() database.RepoPathStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRepoPathsFunc) appendCall(r0 EnterpriseDBRepoPathsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBRepoPathsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBRepoPathsFunc) History() []EnterpriseDBRepoPathsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRepoPathsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRepoPathsFuncCall is an object that describes an invocation
// of method RepoPaths on an instance of MockEnterpriseDB.
type EnterpriseDBRepoPathsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoPathStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRepoPathsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRepoPathsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRepoStatisticsFunc describes the behavior when the
// RepoStatistics method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBRepoStatisticsFunc struct {
	defaultHook func() database.RepoStatisticsStore
	hooks       []func() database.RepoStatisticsStore
	history     []EnterpriseDBRepoStatisticsFuncCall
	mutex       sync.Mutex
}

// RepoStatistics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) RepoStatistics() database.RepoStatisticsStore {
	r0 := m.RepoStatisticsFunc.nextHook()()
	m.RepoStatisticsFunc.appendCall(EnterpriseDBRepoStatisticsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RepoStatistics
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBRepoStatisticsFunc) SetDefaultHook(hook func() database.RepoStatisticsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoStatistics method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBRepoStatisticsFunc) PushHook(hook func() database.RepoStatisticsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRepoStatisticsFunc) SetDefaultReturn(r0 database.RepoStatisticsStore) {
	f.SetDefaultHook(func() database.RepoStatisticsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRepoStatisticsFunc) PushReturn(r0 database.RepoStatisticsStore) {
	f.PushHook(func() database.RepoStatisticsStore {
		return r0
	})
}

func (f *EnterpriseDBRepoStatisticsFunc) nextHook() func() database.RepoStatisticsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRepoStatisticsFunc) appendCall(r0 EnterpriseDBRepoStatisticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBRepoStatisticsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBRepoStatisticsFunc) History() []EnterpriseDBRepoStatisticsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRepoStatisticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRepoStatisticsFuncCall is an object that describes an
// invocation of method RepoStatistics on an instance of MockEnterpriseDB.
type EnterpriseDBRepoStatisticsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStatisticsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRepoStatisticsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRepoStatisticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBReposFunc describes the behavior when the Repos method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBReposFunc struct {
	defaultHook func() database.RepoStore
	hooks       []func() database.RepoStore
	history     []EnterpriseDBReposFuncCall
	mutex       sync.Mutex
}

// Repos delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Repos() database.RepoStore {
	r0 := m.ReposFunc.nextHook()()
	m.ReposFunc.appendCall(EnterpriseDBReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Repos method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBReposFunc) SetDefaultHook(hook func() database.RepoStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Repos method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBReposFunc) PushHook(hook func() database.RepoStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBReposFunc) SetDefaultReturn(r0 database.RepoStore) {
	f.SetDefaultHook(func() database.RepoStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBReposFunc) PushReturn(r0 database.RepoStore) {
	f.PushHook(func() database.RepoStore {
		return r0
	})
}

func (f *EnterpriseDBReposFunc) nextHook() func() database.RepoStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBReposFunc) appendCall(r0 EnterpriseDBReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBReposFunc) History() []EnterpriseDBReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBReposFuncCall is an object that describes an invocation of
// method Repos on an instance of MockEnterpriseDB.
type EnterpriseDBReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RepoStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRolePermissionsFunc describes the behavior when the
// RolePermissions method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBRolePermissionsFunc struct {
	defaultHook func() database.RolePermissionStore
	hooks       []func() database.RolePermissionStore
	history     []EnterpriseDBRolePermissionsFuncCall
	mutex       sync.Mutex
}

// RolePermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) RolePermissions() database.RolePermissionStore {
	r0 := m.RolePermissionsFunc.nextHook()()
	m.RolePermissionsFunc.appendCall(EnterpriseDBRolePermissionsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the RolePermissions
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBRolePermissionsFunc) SetDefaultHook(hook func() database.RolePermissionStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RolePermissions method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBRolePermissionsFunc) PushHook(hook func() database.RolePermissionStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRolePermissionsFunc) SetDefaultReturn(r0 database.RolePermissionStore) {
	f.SetDefaultHook(func() database.RolePermissionStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRolePermissionsFunc) PushReturn(r0 database.RolePermissionStore) {
	f.PushHook(func() database.RolePermissionStore {
		return r0
	})
}

func (f *EnterpriseDBRolePermissionsFunc) nextHook() func() database.RolePermissionStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRolePermissionsFunc) appendCall(r0 EnterpriseDBRolePermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBRolePermissionsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBRolePermissionsFunc) History() []EnterpriseDBRolePermissionsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRolePermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRolePermissionsFuncCall is an object that describes an
// invocation of method RolePermissions on an instance of MockEnterpriseDB.
type EnterpriseDBRolePermissionsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RolePermissionStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRolePermissionsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRolePermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBRolesFunc describes the behavior when the Roles method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBRolesFunc struct {
	defaultHook func() database.RoleStore
	hooks       []func() database.RoleStore
	history     []EnterpriseDBRolesFuncCall
	mutex       sync.Mutex
}

// Roles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Roles() database.RoleStore {
	r0 := m.RolesFunc.nextHook()()
	m.RolesFunc.appendCall(EnterpriseDBRolesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Roles method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBRolesFunc) SetDefaultHook(hook func() database.RoleStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Roles method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBRolesFunc) PushHook(hook func() database.RoleStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBRolesFunc) SetDefaultReturn(r0 database.RoleStore) {
	f.SetDefaultHook(func() database.RoleStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBRolesFunc) PushReturn(r0 database.RoleStore) {
	f.PushHook(func() database.RoleStore {
		return r0
	})
}

func (f *EnterpriseDBRolesFunc) nextHook() func() database.RoleStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBRolesFunc) appendCall(r0 EnterpriseDBRolesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBRolesFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBRolesFunc) History() []EnterpriseDBRolesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBRolesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBRolesFuncCall is an object that describes an invocation of
// method Roles on an instance of MockEnterpriseDB.
type EnterpriseDBRolesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.RoleStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBRolesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBRolesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSavedSearchesFunc describes the behavior when the
// SavedSearches method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSavedSearchesFunc struct {
	defaultHook func() database.SavedSearchStore
	hooks       []func() database.SavedSearchStore
	history     []EnterpriseDBSavedSearchesFuncCall
	mutex       sync.Mutex
}

// SavedSearches delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SavedSearches() database.SavedSearchStore {
	r0 := m.SavedSearchesFunc.nextHook()()
	m.SavedSearchesFunc.appendCall(EnterpriseDBSavedSearchesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SavedSearches method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSavedSearchesFunc) SetDefaultHook(hook func() database.SavedSearchStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SavedSearches method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSavedSearchesFunc) PushHook(hook func() database.SavedSearchStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSavedSearchesFunc) SetDefaultReturn(r0 database.SavedSearchStore) {
	f.SetDefaultHook(func() database.SavedSearchStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSavedSearchesFunc) PushReturn(r0 database.SavedSearchStore) {
	f.PushHook(func() database.SavedSearchStore {
		return r0
	})
}

func (f *EnterpriseDBSavedSearchesFunc) nextHook() func() database.SavedSearchStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSavedSearchesFunc) appendCall(r0 EnterpriseDBSavedSearchesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSavedSearchesFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSavedSearchesFunc) History() []EnterpriseDBSavedSearchesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSavedSearchesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSavedSearchesFuncCall is an object that describes an
// invocation of method SavedSearches on an instance of MockEnterpriseDB.
type EnterpriseDBSavedSearchesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SavedSearchStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSavedSearchesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSavedSearchesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSearchContextsFunc describes the behavior when the
// SearchContexts method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSearchContextsFunc struct {
	defaultHook func() database.SearchContextsStore
	hooks       []func() database.SearchContextsStore
	history     []EnterpriseDBSearchContextsFuncCall
	mutex       sync.Mutex
}

// SearchContexts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SearchContexts() database.SearchContextsStore {
	r0 := m.SearchContextsFunc.nextHook()()
	m.SearchContextsFunc.appendCall(EnterpriseDBSearchContextsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SearchContexts
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBSearchContextsFunc) SetDefaultHook(hook func() database.SearchContextsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SearchContexts method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSearchContextsFunc) PushHook(hook func() database.SearchContextsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSearchContextsFunc) SetDefaultReturn(r0 database.SearchContextsStore) {
	f.SetDefaultHook(func() database.SearchContextsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSearchContextsFunc) PushReturn(r0 database.SearchContextsStore) {
	f.PushHook(func() database.SearchContextsStore {
		return r0
	})
}

func (f *EnterpriseDBSearchContextsFunc) nextHook() func() database.SearchContextsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSearchContextsFunc) appendCall(r0 EnterpriseDBSearchContextsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSearchContextsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSearchContextsFunc) History() []EnterpriseDBSearchContextsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSearchContextsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSearchContextsFuncCall is an object that describes an
// invocation of method SearchContexts on an instance of MockEnterpriseDB.
type EnterpriseDBSearchContextsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SearchContextsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSearchContextsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSearchContextsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSecurityEventLogsFunc describes the behavior when the
// SecurityEventLogs method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBSecurityEventLogsFunc struct {
	defaultHook func() database.SecurityEventLogsStore
	hooks       []func() database.SecurityEventLogsStore
	history     []EnterpriseDBSecurityEventLogsFuncCall
	mutex       sync.Mutex
}

// SecurityEventLogs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SecurityEventLogs() database.SecurityEventLogsStore {
	r0 := m.SecurityEventLogsFunc.nextHook()()
	m.SecurityEventLogsFunc.appendCall(EnterpriseDBSecurityEventLogsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SecurityEventLogs
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBSecurityEventLogsFunc) SetDefaultHook(hook func() database.SecurityEventLogsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SecurityEventLogs method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBSecurityEventLogsFunc) PushHook(hook func() database.SecurityEventLogsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSecurityEventLogsFunc) SetDefaultReturn(r0 database.SecurityEventLogsStore) {
	f.SetDefaultHook(func() database.SecurityEventLogsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSecurityEventLogsFunc) PushReturn(r0 database.SecurityEventLogsStore) {
	f.PushHook(func() database.SecurityEventLogsStore {
		return r0
	})
}

func (f *EnterpriseDBSecurityEventLogsFunc) nextHook() func() database.SecurityEventLogsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSecurityEventLogsFunc) appendCall(r0 EnterpriseDBSecurityEventLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSecurityEventLogsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBSecurityEventLogsFunc) History() []EnterpriseDBSecurityEventLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSecurityEventLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSecurityEventLogsFuncCall is an object that describes an
// invocation of method SecurityEventLogs on an instance of
// MockEnterpriseDB.
type EnterpriseDBSecurityEventLogsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SecurityEventLogsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSecurityEventLogsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSecurityEventLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSettingsFunc describes the behavior when the Settings method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSettingsFunc struct {
	defaultHook func() database.SettingsStore
	hooks       []func() database.SettingsStore
	history     []EnterpriseDBSettingsFuncCall
	mutex       sync.Mutex
}

// Settings delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Settings() database.SettingsStore {
	r0 := m.SettingsFunc.nextHook()()
	m.SettingsFunc.appendCall(EnterpriseDBSettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Settings method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSettingsFunc) SetDefaultHook(hook func() database.SettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Settings method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBSettingsFunc) PushHook(hook func() database.SettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSettingsFunc) SetDefaultReturn(r0 database.SettingsStore) {
	f.SetDefaultHook(func() database.SettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSettingsFunc) PushReturn(r0 database.SettingsStore) {
	f.PushHook(func() database.SettingsStore {
		return r0
	})
}

func (f *EnterpriseDBSettingsFunc) nextHook() func() database.SettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSettingsFunc) appendCall(r0 EnterpriseDBSettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSettingsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSettingsFunc) History() []EnterpriseDBSettingsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSettingsFuncCall is an object that describes an invocation of
// method Settings on an instance of MockEnterpriseDB.
type EnterpriseDBSettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.SettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBSubRepoPermsFunc describes the behavior when the SubRepoPerms
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBSubRepoPermsFunc struct {
	defaultHook func() SubRepoPermsStore
	hooks       []func() SubRepoPermsStore
	history     []EnterpriseDBSubRepoPermsFuncCall
	mutex       sync.Mutex
}

// SubRepoPerms delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) SubRepoPerms() SubRepoPermsStore {
	r0 := m.SubRepoPermsFunc.nextHook()()
	m.SubRepoPermsFunc.appendCall(EnterpriseDBSubRepoPermsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the SubRepoPerms method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBSubRepoPermsFunc) SetDefaultHook(hook func() SubRepoPermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SubRepoPerms method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBSubRepoPermsFunc) PushHook(hook func() SubRepoPermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBSubRepoPermsFunc) SetDefaultReturn(r0 SubRepoPermsStore) {
	f.SetDefaultHook(func() SubRepoPermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBSubRepoPermsFunc) PushReturn(r0 SubRepoPermsStore) {
	f.PushHook(func() SubRepoPermsStore {
		return r0
	})
}

func (f *EnterpriseDBSubRepoPermsFunc) nextHook() func() SubRepoPermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBSubRepoPermsFunc) appendCall(r0 EnterpriseDBSubRepoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBSubRepoPermsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBSubRepoPermsFunc) History() []EnterpriseDBSubRepoPermsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBSubRepoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBSubRepoPermsFuncCall is an object that describes an
// invocation of method SubRepoPerms on an instance of MockEnterpriseDB.
type EnterpriseDBSubRepoPermsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SubRepoPermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBSubRepoPermsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBSubRepoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBTeamsFunc describes the behavior when the Teams method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBTeamsFunc struct {
	defaultHook func() database.TeamStore
	hooks       []func() database.TeamStore
	history     []EnterpriseDBTeamsFuncCall
	mutex       sync.Mutex
}

// Teams delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Teams() database.TeamStore {
	r0 := m.TeamsFunc.nextHook()()
	m.TeamsFunc.appendCall(EnterpriseDBTeamsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Teams method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBTeamsFunc) SetDefaultHook(hook func() database.TeamStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Teams method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBTeamsFunc) PushHook(hook func() database.TeamStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBTeamsFunc) SetDefaultReturn(r0 database.TeamStore) {
	f.SetDefaultHook(func() database.TeamStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBTeamsFunc) PushReturn(r0 database.TeamStore) {
	f.PushHook(func() database.TeamStore {
		return r0
	})
}

func (f *EnterpriseDBTeamsFunc) nextHook() func() database.TeamStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBTeamsFunc) appendCall(r0 EnterpriseDBTeamsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBTeamsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBTeamsFunc) History() []EnterpriseDBTeamsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBTeamsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBTeamsFuncCall is an object that describes an invocation of
// method Teams on an instance of MockEnterpriseDB.
type EnterpriseDBTeamsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.TeamStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBTeamsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBTeamsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBTemporarySettingsFunc describes the behavior when the
// TemporarySettings method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBTemporarySettingsFunc struct {
	defaultHook func() database.TemporarySettingsStore
	hooks       []func() database.TemporarySettingsStore
	history     []EnterpriseDBTemporarySettingsFuncCall
	mutex       sync.Mutex
}

// TemporarySettings delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) TemporarySettings() database.TemporarySettingsStore {
	r0 := m.TemporarySettingsFunc.nextHook()()
	m.TemporarySettingsFunc.appendCall(EnterpriseDBTemporarySettingsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the TemporarySettings
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBTemporarySettingsFunc) SetDefaultHook(hook func() database.TemporarySettingsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TemporarySettings method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBTemporarySettingsFunc) PushHook(hook func() database.TemporarySettingsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBTemporarySettingsFunc) SetDefaultReturn(r0 database.TemporarySettingsStore) {
	f.SetDefaultHook(func() database.TemporarySettingsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBTemporarySettingsFunc) PushReturn(r0 database.TemporarySettingsStore) {
	f.PushHook(func() database.TemporarySettingsStore {
		return r0
	})
}

func (f *EnterpriseDBTemporarySettingsFunc) nextHook() func() database.TemporarySettingsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBTemporarySettingsFunc) appendCall(r0 EnterpriseDBTemporarySettingsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBTemporarySettingsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBTemporarySettingsFunc) History() []EnterpriseDBTemporarySettingsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBTemporarySettingsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBTemporarySettingsFuncCall is an object that describes an
// invocation of method TemporarySettings on an instance of
// MockEnterpriseDB.
type EnterpriseDBTemporarySettingsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.TemporarySettingsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBTemporarySettingsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBTemporarySettingsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserCredentialsFunc describes the behavior when the
// UserCredentials method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBUserCredentialsFunc struct {
	defaultHook func(encryption.Key) database.UserCredentialsStore
	hooks       []func(encryption.Key) database.UserCredentialsStore
	history     []EnterpriseDBUserCredentialsFuncCall
	mutex       sync.Mutex
}

// UserCredentials delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserCredentials(v0 encryption.Key) database.UserCredentialsStore {
	r0 := m.UserCredentialsFunc.nextHook()(v0)
	m.UserCredentialsFunc.appendCall(EnterpriseDBUserCredentialsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserCredentials
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBUserCredentialsFunc) SetDefaultHook(hook func(encryption.Key) database.UserCredentialsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserCredentials method of the parent MockEnterpriseDB instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *EnterpriseDBUserCredentialsFunc) PushHook(hook func(encryption.Key) database.UserCredentialsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUserCredentialsFunc) SetDefaultReturn(r0 database.UserCredentialsStore) {
	f.SetDefaultHook(func(encryption.Key) database.UserCredentialsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUserCredentialsFunc) PushReturn(r0 database.UserCredentialsStore) {
	f.PushHook(func(encryption.Key) database.UserCredentialsStore {
		return r0
	})
}

func (f *EnterpriseDBUserCredentialsFunc) nextHook() func(encryption.Key) database.UserCredentialsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserCredentialsFunc) appendCall(r0 EnterpriseDBUserCredentialsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserCredentialsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserCredentialsFunc) History() []EnterpriseDBUserCredentialsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserCredentialsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserCredentialsFuncCall is an object that describes an
// invocation of method UserCredentials on an instance of MockEnterpriseDB.
type EnterpriseDBUserCredentialsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserCredentialsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserCredentialsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserCredentialsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserEmailsFunc describes the behavior when the UserEmails
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBUserEmailsFunc struct {
	defaultHook func() database.UserEmailsStore
	hooks       []func() database.UserEmailsStore
	history     []EnterpriseDBUserEmailsFuncCall
	mutex       sync.Mutex
}

// UserEmails delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserEmails() database.UserEmailsStore {
	r0 := m.UserEmailsFunc.nextHook()()
	m.UserEmailsFunc.appendCall(EnterpriseDBUserEmailsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserEmails method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBUserEmailsFunc) SetDefaultHook(hook func() database.UserEmailsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserEmails method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBUserEmailsFunc) PushHook(hook func() database.UserEmailsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUserEmailsFunc) SetDefaultReturn(r0 database.UserEmailsStore) {
	f.SetDefaultHook(func() database.UserEmailsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUserEmailsFunc) PushReturn(r0 database.UserEmailsStore) {
	f.PushHook(func() database.UserEmailsStore {
		return r0
	})
}

func (f *EnterpriseDBUserEmailsFunc) nextHook() func() database.UserEmailsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserEmailsFunc) appendCall(r0 EnterpriseDBUserEmailsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserEmailsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserEmailsFunc) History() []EnterpriseDBUserEmailsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserEmailsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserEmailsFuncCall is an object that describes an invocation
// of method UserEmails on an instance of MockEnterpriseDB.
type EnterpriseDBUserEmailsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserEmailsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserEmailsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserEmailsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserExternalAccountsFunc describes the behavior when the
// UserExternalAccounts method of the parent MockEnterpriseDB instance is
// invoked.
type EnterpriseDBUserExternalAccountsFunc struct {
	defaultHook func() database.UserExternalAccountsStore
	hooks       []func() database.UserExternalAccountsStore
	history     []EnterpriseDBUserExternalAccountsFuncCall
	mutex       sync.Mutex
}

// UserExternalAccounts delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserExternalAccounts() database.UserExternalAccountsStore {
	r0 := m.UserExternalAccountsFunc.nextHook()()
	m.UserExternalAccountsFunc.appendCall(EnterpriseDBUserExternalAccountsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserExternalAccounts
// method of the parent MockEnterpriseDB instance is invoked and the hook
// queue is empty.
func (f *EnterpriseDBUserExternalAccountsFunc) SetDefaultHook(hook func() database.UserExternalAccountsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserExternalAccounts method of the parent MockEnterpriseDB instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *EnterpriseDBUserExternalAccountsFunc) PushHook(hook func() database.UserExternalAccountsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUserExternalAccountsFunc) SetDefaultReturn(r0 database.UserExternalAccountsStore) {
	f.SetDefaultHook(func() database.UserExternalAccountsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUserExternalAccountsFunc) PushReturn(r0 database.UserExternalAccountsStore) {
	f.PushHook(func() database.UserExternalAccountsStore {
		return r0
	})
}

func (f *EnterpriseDBUserExternalAccountsFunc) nextHook() func() database.UserExternalAccountsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserExternalAccountsFunc) appendCall(r0 EnterpriseDBUserExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserExternalAccountsFuncCall
// objects describing the invocations of this function.
func (f *EnterpriseDBUserExternalAccountsFunc) History() []EnterpriseDBUserExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserExternalAccountsFuncCall is an object that describes an
// invocation of method UserExternalAccounts on an instance of
// MockEnterpriseDB.
type EnterpriseDBUserExternalAccountsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserExternalAccountsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUserRolesFunc describes the behavior when the UserRoles
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBUserRolesFunc struct {
	defaultHook func() database.UserRoleStore
	hooks       []func() database.UserRoleStore
	history     []EnterpriseDBUserRolesFuncCall
	mutex       sync.Mutex
}

// UserRoles delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) UserRoles() database.UserRoleStore {
	r0 := m.UserRolesFunc.nextHook()()
	m.UserRolesFunc.appendCall(EnterpriseDBUserRolesFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the UserRoles method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBUserRolesFunc) SetDefaultHook(hook func() database.UserRoleStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserRoles method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBUserRolesFunc) PushHook(hook func() database.UserRoleStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUserRolesFunc) SetDefaultReturn(r0 database.UserRoleStore) {
	f.SetDefaultHook(func() database.UserRoleStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUserRolesFunc) PushReturn(r0 database.UserRoleStore) {
	f.PushHook(func() database.UserRoleStore {
		return r0
	})
}

func (f *EnterpriseDBUserRolesFunc) nextHook() func() database.UserRoleStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUserRolesFunc) appendCall(r0 EnterpriseDBUserRolesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUserRolesFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUserRolesFunc) History() []EnterpriseDBUserRolesFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUserRolesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUserRolesFuncCall is an object that describes an invocation
// of method UserRoles on an instance of MockEnterpriseDB.
type EnterpriseDBUserRolesFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserRoleStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUserRolesFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUserRolesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBUsersFunc describes the behavior when the Users method of the
// parent MockEnterpriseDB instance is invoked.
type EnterpriseDBUsersFunc struct {
	defaultHook func() database.UserStore
	hooks       []func() database.UserStore
	history     []EnterpriseDBUsersFuncCall
	mutex       sync.Mutex
}

// Users delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Users() database.UserStore {
	r0 := m.UsersFunc.nextHook()()
	m.UsersFunc.appendCall(EnterpriseDBUsersFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Users method of the
// parent MockEnterpriseDB instance is invoked and the hook queue is empty.
func (f *EnterpriseDBUsersFunc) SetDefaultHook(hook func() database.UserStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Users method of the parent MockEnterpriseDB instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBUsersFunc) PushHook(hook func() database.UserStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBUsersFunc) SetDefaultReturn(r0 database.UserStore) {
	f.SetDefaultHook(func() database.UserStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBUsersFunc) PushReturn(r0 database.UserStore) {
	f.PushHook(func() database.UserStore {
		return r0
	})
}

func (f *EnterpriseDBUsersFunc) nextHook() func() database.UserStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBUsersFunc) appendCall(r0 EnterpriseDBUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBUsersFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBUsersFunc) History() []EnterpriseDBUsersFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBUsersFuncCall is an object that describes an invocation of
// method Users on an instance of MockEnterpriseDB.
type EnterpriseDBUsersFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.UserStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBUsersFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBWebhookLogsFunc describes the behavior when the WebhookLogs
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBWebhookLogsFunc struct {
	defaultHook func(encryption.Key) database.WebhookLogStore
	hooks       []func(encryption.Key) database.WebhookLogStore
	history     []EnterpriseDBWebhookLogsFuncCall
	mutex       sync.Mutex
}

// WebhookLogs delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) WebhookLogs(v0 encryption.Key) database.WebhookLogStore {
	r0 := m.WebhookLogsFunc.nextHook()(v0)
	m.WebhookLogsFunc.appendCall(EnterpriseDBWebhookLogsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WebhookLogs method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBWebhookLogsFunc) SetDefaultHook(hook func(encryption.Key) database.WebhookLogStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WebhookLogs method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBWebhookLogsFunc) PushHook(hook func(encryption.Key) database.WebhookLogStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBWebhookLogsFunc) SetDefaultReturn(r0 database.WebhookLogStore) {
	f.SetDefaultHook(func(encryption.Key) database.WebhookLogStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBWebhookLogsFunc) PushReturn(r0 database.WebhookLogStore) {
	f.PushHook(func(encryption.Key) database.WebhookLogStore {
		return r0
	})
}

func (f *EnterpriseDBWebhookLogsFunc) nextHook() func(encryption.Key) database.WebhookLogStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBWebhookLogsFunc) appendCall(r0 EnterpriseDBWebhookLogsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBWebhookLogsFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBWebhookLogsFunc) History() []EnterpriseDBWebhookLogsFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBWebhookLogsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBWebhookLogsFuncCall is an object that describes an invocation
// of method WebhookLogs on an instance of MockEnterpriseDB.
type EnterpriseDBWebhookLogsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.WebhookLogStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBWebhookLogsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBWebhookLogsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBWebhooksFunc describes the behavior when the Webhooks method
// of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBWebhooksFunc struct {
	defaultHook func(encryption.Key) database.WebhookStore
	hooks       []func(encryption.Key) database.WebhookStore
	history     []EnterpriseDBWebhooksFuncCall
	mutex       sync.Mutex
}

// Webhooks delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockEnterpriseDB) Webhooks(v0 encryption.Key) database.WebhookStore {
	r0 := m.WebhooksFunc.nextHook()(v0)
	m.WebhooksFunc.appendCall(EnterpriseDBWebhooksFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Webhooks method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBWebhooksFunc) SetDefaultHook(hook func(encryption.Key) database.WebhookStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Webhooks method of the parent MockEnterpriseDB instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *EnterpriseDBWebhooksFunc) PushHook(hook func(encryption.Key) database.WebhookStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBWebhooksFunc) SetDefaultReturn(r0 database.WebhookStore) {
	f.SetDefaultHook(func(encryption.Key) database.WebhookStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBWebhooksFunc) PushReturn(r0 database.WebhookStore) {
	f.PushHook(func(encryption.Key) database.WebhookStore {
		return r0
	})
}

func (f *EnterpriseDBWebhooksFunc) nextHook() func(encryption.Key) database.WebhookStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBWebhooksFunc) appendCall(r0 EnterpriseDBWebhooksFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBWebhooksFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBWebhooksFunc) History() []EnterpriseDBWebhooksFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBWebhooksFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBWebhooksFuncCall is an object that describes an invocation of
// method Webhooks on an instance of MockEnterpriseDB.
type EnterpriseDBWebhooksFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 encryption.Key
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.WebhookStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBWebhooksFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBWebhooksFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBWithTransactFunc describes the behavior when the WithTransact
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBWithTransactFunc struct {
	defaultHook func(context.Context, func(tx database.DB) error) error
	hooks       []func(context.Context, func(tx database.DB) error) error
	history     []EnterpriseDBWithTransactFuncCall
	mutex       sync.Mutex
}

// WithTransact delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) WithTransact(v0 context.Context, v1 func(tx database.DB) error) error {
	r0 := m.WithTransactFunc.nextHook()(v0, v1)
	m.WithTransactFunc.appendCall(EnterpriseDBWithTransactFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransact method
// of the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBWithTransactFunc) SetDefaultHook(hook func(context.Context, func(tx database.DB) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransact method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBWithTransactFunc) PushHook(hook func(context.Context, func(tx database.DB) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBWithTransactFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(tx database.DB) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBWithTransactFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(tx database.DB) error) error {
		return r0
	})
}

func (f *EnterpriseDBWithTransactFunc) nextHook() func(context.Context, func(tx database.DB) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBWithTransactFunc) appendCall(r0 EnterpriseDBWithTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBWithTransactFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBWithTransactFunc) History() []EnterpriseDBWithTransactFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBWithTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBWithTransactFuncCall is an object that describes an
// invocation of method WithTransact on an instance of MockEnterpriseDB.
type EnterpriseDBWithTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(tx database.DB) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBWithTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBWithTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// EnterpriseDBZoektReposFunc describes the behavior when the ZoektRepos
// method of the parent MockEnterpriseDB instance is invoked.
type EnterpriseDBZoektReposFunc struct {
	defaultHook func() database.ZoektReposStore
	hooks       []func() database.ZoektReposStore
	history     []EnterpriseDBZoektReposFuncCall
	mutex       sync.Mutex
}

// ZoektRepos delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockEnterpriseDB) ZoektRepos() database.ZoektReposStore {
	r0 := m.ZoektReposFunc.nextHook()()
	m.ZoektReposFunc.appendCall(EnterpriseDBZoektReposFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ZoektRepos method of
// the parent MockEnterpriseDB instance is invoked and the hook queue is
// empty.
func (f *EnterpriseDBZoektReposFunc) SetDefaultHook(hook func() database.ZoektReposStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ZoektRepos method of the parent MockEnterpriseDB instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *EnterpriseDBZoektReposFunc) PushHook(hook func() database.ZoektReposStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *EnterpriseDBZoektReposFunc) SetDefaultReturn(r0 database.ZoektReposStore) {
	f.SetDefaultHook(func() database.ZoektReposStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *EnterpriseDBZoektReposFunc) PushReturn(r0 database.ZoektReposStore) {
	f.PushHook(func() database.ZoektReposStore {
		return r0
	})
}

func (f *EnterpriseDBZoektReposFunc) nextHook() func() database.ZoektReposStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *EnterpriseDBZoektReposFunc) appendCall(r0 EnterpriseDBZoektReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of EnterpriseDBZoektReposFuncCall objects
// describing the invocations of this function.
func (f *EnterpriseDBZoektReposFunc) History() []EnterpriseDBZoektReposFuncCall {
	f.mutex.Lock()
	history := make([]EnterpriseDBZoektReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// EnterpriseDBZoektReposFuncCall is an object that describes an invocation
// of method ZoektRepos on an instance of MockEnterpriseDB.
type EnterpriseDBZoektReposFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 database.ZoektReposStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c EnterpriseDBZoektReposFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c EnterpriseDBZoektReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockPermsStore is a mock implementation of the PermsStore interface (from
// the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/database) used for
// unit testing.
type MockPermsStore struct {
	// CountReposWithNoPermsFunc is an instance of a mock function object
	// controlling the behavior of the method CountReposWithNoPerms.
	CountReposWithNoPermsFunc *PermsStoreCountReposWithNoPermsFunc
	// CountReposWithStalePermsFunc is an instance of a mock function object
	// controlling the behavior of the method CountReposWithStalePerms.
	CountReposWithStalePermsFunc *PermsStoreCountReposWithStalePermsFunc
	// CountUsersWithNoPermsFunc is an instance of a mock function object
	// controlling the behavior of the method CountUsersWithNoPerms.
	CountUsersWithNoPermsFunc *PermsStoreCountUsersWithNoPermsFunc
	// CountUsersWithStalePermsFunc is an instance of a mock function object
	// controlling the behavior of the method CountUsersWithStalePerms.
	CountUsersWithStalePermsFunc *PermsStoreCountUsersWithStalePermsFunc
	// DeleteAllUserPendingPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteAllUserPendingPermissions.
	DeleteAllUserPendingPermissionsFunc *PermsStoreDeleteAllUserPendingPermissionsFunc
	// DeleteAllUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteAllUserPermissions.
	DeleteAllUserPermissionsFunc *PermsStoreDeleteAllUserPermissionsFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *PermsStoreDoneFunc
	// FetchReposByExternalAccountFunc is an instance of a mock function
	// object controlling the behavior of the method
	// FetchReposByExternalAccount.
	FetchReposByExternalAccountFunc *PermsStoreFetchReposByExternalAccountFunc
	// GetUserIDsByExternalAccountsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUserIDsByExternalAccounts.
	GetUserIDsByExternalAccountsFunc *PermsStoreGetUserIDsByExternalAccountsFunc
	// GrantPendingPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method GrantPendingPermissions.
	GrantPendingPermissionsFunc *PermsStoreGrantPendingPermissionsFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *PermsStoreHandleFunc
	// IsRepoUnrestrictedFunc is an instance of a mock function object
	// controlling the behavior of the method IsRepoUnrestricted.
	IsRepoUnrestrictedFunc *PermsStoreIsRepoUnrestrictedFunc
	// ListPendingUsersFunc is an instance of a mock function object
	// controlling the behavior of the method ListPendingUsers.
	ListPendingUsersFunc *PermsStoreListPendingUsersFunc
	// ListRepoPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method ListRepoPermissions.
	ListRepoPermissionsFunc *PermsStoreListRepoPermissionsFunc
	// ListUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method ListUserPermissions.
	ListUserPermissionsFunc *PermsStoreListUserPermissionsFunc
	// LoadRepoPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method LoadRepoPermissions.
	LoadRepoPermissionsFunc *PermsStoreLoadRepoPermissionsFunc
	// LoadUserPendingPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// LoadUserPendingPermissions.
	LoadUserPendingPermissionsFunc *PermsStoreLoadUserPendingPermissionsFunc
	// LoadUserPermissionsFunc is an instance of a mock function object
	// controlling the behavior of the method LoadUserPermissions.
	LoadUserPermissionsFunc *PermsStoreLoadUserPermissionsFunc
	// MapUsersFunc is an instance of a mock function object controlling the
	// behavior of the method MapUsers.
	MapUsersFunc *PermsStoreMapUsersFunc
	// MetricsFunc is an instance of a mock function object controlling the
	// behavior of the method Metrics.
	MetricsFunc *PermsStoreMetricsFunc
	// RepoIDsWithNoPermsFunc is an instance of a mock function object
	// controlling the behavior of the method RepoIDsWithNoPerms.
	RepoIDsWithNoPermsFunc *PermsStoreRepoIDsWithNoPermsFunc
	// ReposIDsWithOldestPermsFunc is an instance of a mock function object
	// controlling the behavior of the method ReposIDsWithOldestPerms.
	ReposIDsWithOldestPermsFunc *PermsStoreReposIDsWithOldestPermsFunc
	// SetRepoPendingPermissionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetRepoPendingPermissions.
	SetRepoPendingPermissionsFunc *PermsStoreSetRepoPendingPermissionsFunc
	// SetRepoPermissionsUnrestrictedFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetRepoPermissionsUnrestricted.
	SetRepoPermissionsUnrestrictedFunc *PermsStoreSetRepoPermissionsUnrestrictedFunc
	// SetRepoPermsFunc is an instance of a mock function object controlling
	// the behavior of the method SetRepoPerms.
	SetRepoPermsFunc *PermsStoreSetRepoPermsFunc
	// SetUserExternalAccountPermsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// SetUserExternalAccountPerms.
	SetUserExternalAccountPermsFunc *PermsStoreSetUserExternalAccountPermsFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *PermsStoreTransactFunc
	// UserIDsWithNoPermsFunc is an instance of a mock function object
	// controlling the behavior of the method UserIDsWithNoPerms.
	UserIDsWithNoPermsFunc *PermsStoreUserIDsWithNoPermsFunc
	// UserIDsWithOldestPermsFunc is an instance of a mock function object
	// controlling the behavior of the method UserIDsWithOldestPerms.
	UserIDsWithOldestPermsFunc *PermsStoreUserIDsWithOldestPermsFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *PermsStoreWithFunc
}

// NewMockPermsStore creates a new mock of the PermsStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockPermsStore() *MockPermsStore {
	return &MockPermsStore{
		CountReposWithNoPermsFunc: &PermsStoreCountReposWithNoPermsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CountReposWithStalePermsFunc: &PermsStoreCountReposWithStalePermsFunc{
			defaultHook: func(context.Context, time.Duration) (r0 int, r1 error) {
				return
			},
		},
		CountUsersWithNoPermsFunc: &PermsStoreCountUsersWithNoPermsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		CountUsersWithStalePermsFunc: &PermsStoreCountUsersWithStalePermsFunc{
			defaultHook: func(context.Context, time.Duration) (r0 int, r1 error) {
				return
			},
		},
		DeleteAllUserPendingPermissionsFunc: &PermsStoreDeleteAllUserPendingPermissionsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts) (r0 error) {
				return
			},
		},
		DeleteAllUserPermissionsFunc: &PermsStoreDeleteAllUserPermissionsFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DoneFunc: &PermsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		FetchReposByExternalAccountFunc: &PermsStoreFetchReposByExternalAccountFunc{
			defaultHook: func(context.Context, int32) (r0 []api.RepoID, r1 error) {
				return
			},
		},
		GetUserIDsByExternalAccountsFunc: &PermsStoreGetUserIDsByExternalAccountsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts) (r0 map[string]authz.UserIDWithExternalAccountID, r1 error) {
				return
			},
		},
		GrantPendingPermissionsFunc: &PermsStoreGrantPendingPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserGrantPermissions) (r0 error) {
				return
			},
		},
		HandleFunc: &PermsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		IsRepoUnrestrictedFunc: &PermsStoreIsRepoUnrestrictedFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 bool, r1 error) {
				return
			},
		},
		ListPendingUsersFunc: &PermsStoreListPendingUsersFunc{
			defaultHook: func(context.Context, string, string) (r0 []string, r1 error) {
				return
			},
		},
		ListRepoPermissionsFunc: &PermsStoreListRepoPermissionsFunc{
			defaultHook: func(context.Context, api.RepoID, *ListRepoPermissionsArgs) (r0 []*RepoPermission, r1 error) {
				return
			},
		},
		ListUserPermissionsFunc: &PermsStoreListUserPermissionsFunc{
			defaultHook: func(context.Context, int32, *ListUserPermissionsArgs) (r0 []*UserPermission, r1 error) {
				return
			},
		},
		LoadRepoPermissionsFunc: &PermsStoreLoadRepoPermissionsFunc{
			defaultHook: func(context.Context, int32) (r0 []authz.Permission, r1 error) {
				return
			},
		},
		LoadUserPendingPermissionsFunc: &PermsStoreLoadUserPendingPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserPendingPermissions) (r0 error) {
				return
			},
		},
		LoadUserPermissionsFunc: &PermsStoreLoadUserPermissionsFunc{
			defaultHook: func(context.Context, int32) (r0 []authz.Permission, r1 error) {
				return
			},
		},
		MapUsersFunc: &PermsStoreMapUsersFunc{
			defaultHook: func(context.Context, []string, *schema.PermissionsUserMapping) (r0 map[string]int32, r1 error) {
				return
			},
		},
		MetricsFunc: &PermsStoreMetricsFunc{
			defaultHook: func(context.Context, time.Duration) (r0 *PermsMetrics, r1 error) {
				return
			},
		},
		RepoIDsWithNoPermsFunc: &PermsStoreRepoIDsWithNoPermsFunc{
			defaultHook: func(context.Context) (r0 []api.RepoID, r1 error) {
				return
			},
		},
		ReposIDsWithOldestPermsFunc: &PermsStoreReposIDsWithOldestPermsFunc{
			defaultHook: func(context.Context, int, time.Duration) (r0 map[api.RepoID]time.Time, r1 error) {
				return
			},
		},
		SetRepoPendingPermissionsFunc: &PermsStoreSetRepoPendingPermissionsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) (r0 error) {
				return
			},
		},
		SetRepoPermissionsUnrestrictedFunc: &PermsStoreSetRepoPermissionsUnrestrictedFunc{
			defaultHook: func(context.Context, []int32, bool) (r0 error) {
				return
			},
		},
		SetRepoPermsFunc: &PermsStoreSetRepoPermsFunc{
			defaultHook: func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (r0 *database.SetPermissionsResult, r1 error) {
				return
			},
		},
		SetUserExternalAccountPermsFunc: &PermsStoreSetUserExternalAccountPermsFunc{
			defaultHook: func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (r0 *database.SetPermissionsResult, r1 error) {
				return
			},
		},
		TransactFunc: &PermsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 PermsStore, r1 error) {
				return
			},
		},
		UserIDsWithNoPermsFunc: &PermsStoreUserIDsWithNoPermsFunc{
			defaultHook: func(context.Context) (r0 []int32, r1 error) {
				return
			},
		},
		UserIDsWithOldestPermsFunc: &PermsStoreUserIDsWithOldestPermsFunc{
			defaultHook: func(context.Context, int, time.Duration) (r0 map[int32]time.Time, r1 error) {
				return
			},
		},
		WithFunc: &PermsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 PermsStore) {
				return
			},
		},
	}
}

// NewStrictMockPermsStore creates a new mock of the PermsStore interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockPermsStore() *MockPermsStore {
	return &MockPermsStore{
		CountReposWithNoPermsFunc: &PermsStoreCountReposWithNoPermsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockPermsStore.CountReposWithNoPerms")
			},
		},
		CountReposWithStalePermsFunc: &PermsStoreCountReposWithStalePermsFunc{
			defaultHook: func(context.Context, time.Duration) (int, error) {
				panic("unexpected invocation of MockPermsStore.CountReposWithStalePerms")
			},
		},
		CountUsersWithNoPermsFunc: &PermsStoreCountUsersWithNoPermsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockPermsStore.CountUsersWithNoPerms")
			},
		},
		CountUsersWithStalePermsFunc: &PermsStoreCountUsersWithStalePermsFunc{
			defaultHook: func(context.Context, time.Duration) (int, error) {
				panic("unexpected invocation of MockPermsStore.CountUsersWithStalePerms")
			},
		},
		DeleteAllUserPendingPermissionsFunc: &PermsStoreDeleteAllUserPendingPermissionsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts) error {
				panic("unexpected invocation of MockPermsStore.DeleteAllUserPendingPermissions")
			},
		},
		DeleteAllUserPermissionsFunc: &PermsStoreDeleteAllUserPermissionsFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockPermsStore.DeleteAllUserPermissions")
			},
		},
		DoneFunc: &PermsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockPermsStore.Done")
			},
		},
		FetchReposByExternalAccountFunc: &PermsStoreFetchReposByExternalAccountFunc{
			defaultHook: func(context.Context, int32) ([]api.RepoID, error) {
				panic("unexpected invocation of MockPermsStore.FetchReposByExternalAccount")
			},
		},
		GetUserIDsByExternalAccountsFunc: &PermsStoreGetUserIDsByExternalAccountsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error) {
				panic("unexpected invocation of MockPermsStore.GetUserIDsByExternalAccounts")
			},
		},
		GrantPendingPermissionsFunc: &PermsStoreGrantPendingPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserGrantPermissions) error {
				panic("unexpected invocation of MockPermsStore.GrantPendingPermissions")
			},
		},
		HandleFunc: &PermsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockPermsStore.Handle")
			},
		},
		IsRepoUnrestrictedFunc: &PermsStoreIsRepoUnrestrictedFunc{
			defaultHook: func(context.Context, api.RepoID) (bool, error) {
				panic("unexpected invocation of MockPermsStore.IsRepoUnrestricted")
			},
		},
		ListPendingUsersFunc: &PermsStoreListPendingUsersFunc{
			defaultHook: func(context.Context, string, string) ([]string, error) {
				panic("unexpected invocation of MockPermsStore.ListPendingUsers")
			},
		},
		ListRepoPermissionsFunc: &PermsStoreListRepoPermissionsFunc{
			defaultHook: func(context.Context, api.RepoID, *ListRepoPermissionsArgs) ([]*RepoPermission, error) {
				panic("unexpected invocation of MockPermsStore.ListRepoPermissions")
			},
		},
		ListUserPermissionsFunc: &PermsStoreListUserPermissionsFunc{
			defaultHook: func(context.Context, int32, *ListUserPermissionsArgs) ([]*UserPermission, error) {
				panic("unexpected invocation of MockPermsStore.ListUserPermissions")
			},
		},
		LoadRepoPermissionsFunc: &PermsStoreLoadRepoPermissionsFunc{
			defaultHook: func(context.Context, int32) ([]authz.Permission, error) {
				panic("unexpected invocation of MockPermsStore.LoadRepoPermissions")
			},
		},
		LoadUserPendingPermissionsFunc: &PermsStoreLoadUserPendingPermissionsFunc{
			defaultHook: func(context.Context, *authz.UserPendingPermissions) error {
				panic("unexpected invocation of MockPermsStore.LoadUserPendingPermissions")
			},
		},
		LoadUserPermissionsFunc: &PermsStoreLoadUserPermissionsFunc{
			defaultHook: func(context.Context, int32) ([]authz.Permission, error) {
				panic("unexpected invocation of MockPermsStore.LoadUserPermissions")
			},
		},
		MapUsersFunc: &PermsStoreMapUsersFunc{
			defaultHook: func(context.Context, []string, *schema.PermissionsUserMapping) (map[string]int32, error) {
				panic("unexpected invocation of MockPermsStore.MapUsers")
			},
		},
		MetricsFunc: &PermsStoreMetricsFunc{
			defaultHook: func(context.Context, time.Duration) (*PermsMetrics, error) {
				panic("unexpected invocation of MockPermsStore.Metrics")
			},
		},
		RepoIDsWithNoPermsFunc: &PermsStoreRepoIDsWithNoPermsFunc{
			defaultHook: func(context.Context) ([]api.RepoID, error) {
				panic("unexpected invocation of MockPermsStore.RepoIDsWithNoPerms")
			},
		},
		ReposIDsWithOldestPermsFunc: &PermsStoreReposIDsWithOldestPermsFunc{
			defaultHook: func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error) {
				panic("unexpected invocation of MockPermsStore.ReposIDsWithOldestPerms")
			},
		},
		SetRepoPendingPermissionsFunc: &PermsStoreSetRepoPendingPermissionsFunc{
			defaultHook: func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error {
				panic("unexpected invocation of MockPermsStore.SetRepoPendingPermissions")
			},
		},
		SetRepoPermissionsUnrestrictedFunc: &PermsStoreSetRepoPermissionsUnrestrictedFunc{
			defaultHook: func(context.Context, []int32, bool) error {
				panic("unexpected invocation of MockPermsStore.SetRepoPermissionsUnrestricted")
			},
		},
		SetRepoPermsFunc: &PermsStoreSetRepoPermsFunc{
			defaultHook: func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (*database.SetPermissionsResult, error) {
				panic("unexpected invocation of MockPermsStore.SetRepoPerms")
			},
		},
		SetUserExternalAccountPermsFunc: &PermsStoreSetUserExternalAccountPermsFunc{
			defaultHook: func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (*database.SetPermissionsResult, error) {
				panic("unexpected invocation of MockPermsStore.SetUserExternalAccountPerms")
			},
		},
		TransactFunc: &PermsStoreTransactFunc{
			defaultHook: func(context.Context) (PermsStore, error) {
				panic("unexpected invocation of MockPermsStore.Transact")
			},
		},
		UserIDsWithNoPermsFunc: &PermsStoreUserIDsWithNoPermsFunc{
			defaultHook: func(context.Context) ([]int32, error) {
				panic("unexpected invocation of MockPermsStore.UserIDsWithNoPerms")
			},
		},
		UserIDsWithOldestPermsFunc: &PermsStoreUserIDsWithOldestPermsFunc{
			defaultHook: func(context.Context, int, time.Duration) (map[int32]time.Time, error) {
				panic("unexpected invocation of MockPermsStore.UserIDsWithOldestPerms")
			},
		},
		WithFunc: &PermsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) PermsStore {
				panic("unexpected invocation of MockPermsStore.With")
			},
		},
	}
}

// NewMockPermsStoreFrom creates a new mock of the MockPermsStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockPermsStoreFrom(i PermsStore) *MockPermsStore {
	return &MockPermsStore{
		CountReposWithNoPermsFunc: &PermsStoreCountReposWithNoPermsFunc{
			defaultHook: i.CountReposWithNoPerms,
		},
		CountReposWithStalePermsFunc: &PermsStoreCountReposWithStalePermsFunc{
			defaultHook: i.CountReposWithStalePerms,
		},
		CountUsersWithNoPermsFunc: &PermsStoreCountUsersWithNoPermsFunc{
			defaultHook: i.CountUsersWithNoPerms,
		},
		CountUsersWithStalePermsFunc: &PermsStoreCountUsersWithStalePermsFunc{
			defaultHook: i.CountUsersWithStalePerms,
		},
		DeleteAllUserPendingPermissionsFunc: &PermsStoreDeleteAllUserPendingPermissionsFunc{
			defaultHook: i.DeleteAllUserPendingPermissions,
		},
		DeleteAllUserPermissionsFunc: &PermsStoreDeleteAllUserPermissionsFunc{
			defaultHook: i.DeleteAllUserPermissions,
		},
		DoneFunc: &PermsStoreDoneFunc{
			defaultHook: i.Done,
		},
		FetchReposByExternalAccountFunc: &PermsStoreFetchReposByExternalAccountFunc{
			defaultHook: i.FetchReposByExternalAccount,
		},
		GetUserIDsByExternalAccountsFunc: &PermsStoreGetUserIDsByExternalAccountsFunc{
			defaultHook: i.GetUserIDsByExternalAccounts,
		},
		GrantPendingPermissionsFunc: &PermsStoreGrantPendingPermissionsFunc{
			defaultHook: i.GrantPendingPermissions,
		},
		HandleFunc: &PermsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		IsRepoUnrestrictedFunc: &PermsStoreIsRepoUnrestrictedFunc{
			defaultHook: i.IsRepoUnrestricted,
		},
		ListPendingUsersFunc: &PermsStoreListPendingUsersFunc{
			defaultHook: i.ListPendingUsers,
		},
		ListRepoPermissionsFunc: &PermsStoreListRepoPermissionsFunc{
			defaultHook: i.ListRepoPermissions,
		},
		ListUserPermissionsFunc: &PermsStoreListUserPermissionsFunc{
			defaultHook: i.ListUserPermissions,
		},
		LoadRepoPermissionsFunc: &PermsStoreLoadRepoPermissionsFunc{
			defaultHook: i.LoadRepoPermissions,
		},
		LoadUserPendingPermissionsFunc: &PermsStoreLoadUserPendingPermissionsFunc{
			defaultHook: i.LoadUserPendingPermissions,
		},
		LoadUserPermissionsFunc: &PermsStoreLoadUserPermissionsFunc{
			defaultHook: i.LoadUserPermissions,
		},
		MapUsersFunc: &PermsStoreMapUsersFunc{
			defaultHook: i.MapUsers,
		},
		MetricsFunc: &PermsStoreMetricsFunc{
			defaultHook: i.Metrics,
		},
		RepoIDsWithNoPermsFunc: &PermsStoreRepoIDsWithNoPermsFunc{
			defaultHook: i.RepoIDsWithNoPerms,
		},
		ReposIDsWithOldestPermsFunc: &PermsStoreReposIDsWithOldestPermsFunc{
			defaultHook: i.ReposIDsWithOldestPerms,
		},
		SetRepoPendingPermissionsFunc: &PermsStoreSetRepoPendingPermissionsFunc{
			defaultHook: i.SetRepoPendingPermissions,
		},
		SetRepoPermissionsUnrestrictedFunc: &PermsStoreSetRepoPermissionsUnrestrictedFunc{
			defaultHook: i.SetRepoPermissionsUnrestricted,
		},
		SetRepoPermsFunc: &PermsStoreSetRepoPermsFunc{
			defaultHook: i.SetRepoPerms,
		},
		SetUserExternalAccountPermsFunc: &PermsStoreSetUserExternalAccountPermsFunc{
			defaultHook: i.SetUserExternalAccountPerms,
		},
		TransactFunc: &PermsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UserIDsWithNoPermsFunc: &PermsStoreUserIDsWithNoPermsFunc{
			defaultHook: i.UserIDsWithNoPerms,
		},
		UserIDsWithOldestPermsFunc: &PermsStoreUserIDsWithOldestPermsFunc{
			defaultHook: i.UserIDsWithOldestPerms,
		},
		WithFunc: &PermsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// PermsStoreCountReposWithNoPermsFunc describes the behavior when the
// CountReposWithNoPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreCountReposWithNoPermsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []PermsStoreCountReposWithNoPermsFuncCall
	mutex       sync.Mutex
}

// CountReposWithNoPerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) CountReposWithNoPerms(v0 context.Context) (int, error) {
	r0, r1 := m.CountReposWithNoPermsFunc.nextHook()(v0)
	m.CountReposWithNoPermsFunc.appendCall(PermsStoreCountReposWithNoPermsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountReposWithNoPerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreCountReposWithNoPermsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountReposWithNoPerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreCountReposWithNoPermsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreCountReposWithNoPermsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreCountReposWithNoPermsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *PermsStoreCountReposWithNoPermsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreCountReposWithNoPermsFunc) appendCall(r0 PermsStoreCountReposWithNoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreCountReposWithNoPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreCountReposWithNoPermsFunc) History() []PermsStoreCountReposWithNoPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreCountReposWithNoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreCountReposWithNoPermsFuncCall is an object that describes an
// invocation of method CountReposWithNoPerms on an instance of
// MockPermsStore.
type PermsStoreCountReposWithNoPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreCountReposWithNoPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreCountReposWithNoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreCountReposWithStalePermsFunc describes the behavior when the
// CountReposWithStalePerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreCountReposWithStalePermsFunc struct {
	defaultHook func(context.Context, time.Duration) (int, error)
	hooks       []func(context.Context, time.Duration) (int, error)
	history     []PermsStoreCountReposWithStalePermsFuncCall
	mutex       sync.Mutex
}

// CountReposWithStalePerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) CountReposWithStalePerms(v0 context.Context, v1 time.Duration) (int, error) {
	r0, r1 := m.CountReposWithStalePermsFunc.nextHook()(v0, v1)
	m.CountReposWithStalePermsFunc.appendCall(PermsStoreCountReposWithStalePermsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountReposWithStalePerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreCountReposWithStalePermsFunc) SetDefaultHook(hook func(context.Context, time.Duration) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountReposWithStalePerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreCountReposWithStalePermsFunc) PushHook(hook func(context.Context, time.Duration) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreCountReposWithStalePermsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Duration) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreCountReposWithStalePermsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Duration) (int, error) {
		return r0, r1
	})
}

func (f *PermsStoreCountReposWithStalePermsFunc) nextHook() func(context.Context, time.Duration) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreCountReposWithStalePermsFunc) appendCall(r0 PermsStoreCountReposWithStalePermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreCountReposWithStalePermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreCountReposWithStalePermsFunc) History() []PermsStoreCountReposWithStalePermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreCountReposWithStalePermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreCountReposWithStalePermsFuncCall is an object that describes an
// invocation of method CountReposWithStalePerms on an instance of
// MockPermsStore.
type PermsStoreCountReposWithStalePermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreCountReposWithStalePermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreCountReposWithStalePermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreCountUsersWithNoPermsFunc describes the behavior when the
// CountUsersWithNoPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreCountUsersWithNoPermsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []PermsStoreCountUsersWithNoPermsFuncCall
	mutex       sync.Mutex
}

// CountUsersWithNoPerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) CountUsersWithNoPerms(v0 context.Context) (int, error) {
	r0, r1 := m.CountUsersWithNoPermsFunc.nextHook()(v0)
	m.CountUsersWithNoPermsFunc.appendCall(PermsStoreCountUsersWithNoPermsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUsersWithNoPerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreCountUsersWithNoPermsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUsersWithNoPerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreCountUsersWithNoPermsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreCountUsersWithNoPermsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreCountUsersWithNoPermsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *PermsStoreCountUsersWithNoPermsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreCountUsersWithNoPermsFunc) appendCall(r0 PermsStoreCountUsersWithNoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreCountUsersWithNoPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreCountUsersWithNoPermsFunc) History() []PermsStoreCountUsersWithNoPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreCountUsersWithNoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreCountUsersWithNoPermsFuncCall is an object that describes an
// invocation of method CountUsersWithNoPerms on an instance of
// MockPermsStore.
type PermsStoreCountUsersWithNoPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreCountUsersWithNoPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreCountUsersWithNoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreCountUsersWithStalePermsFunc describes the behavior when the
// CountUsersWithStalePerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreCountUsersWithStalePermsFunc struct {
	defaultHook func(context.Context, time.Duration) (int, error)
	hooks       []func(context.Context, time.Duration) (int, error)
	history     []PermsStoreCountUsersWithStalePermsFuncCall
	mutex       sync.Mutex
}

// CountUsersWithStalePerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) CountUsersWithStalePerms(v0 context.Context, v1 time.Duration) (int, error) {
	r0, r1 := m.CountUsersWithStalePermsFunc.nextHook()(v0, v1)
	m.CountUsersWithStalePermsFunc.appendCall(PermsStoreCountUsersWithStalePermsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CountUsersWithStalePerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreCountUsersWithStalePermsFunc) SetDefaultHook(hook func(context.Context, time.Duration) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CountUsersWithStalePerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreCountUsersWithStalePermsFunc) PushHook(hook func(context.Context, time.Duration) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreCountUsersWithStalePermsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Duration) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreCountUsersWithStalePermsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, time.Duration) (int, error) {
		return r0, r1
	})
}

func (f *PermsStoreCountUsersWithStalePermsFunc) nextHook() func(context.Context, time.Duration) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreCountUsersWithStalePermsFunc) appendCall(r0 PermsStoreCountUsersWithStalePermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreCountUsersWithStalePermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreCountUsersWithStalePermsFunc) History() []PermsStoreCountUsersWithStalePermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreCountUsersWithStalePermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreCountUsersWithStalePermsFuncCall is an object that describes an
// invocation of method CountUsersWithStalePerms on an instance of
// MockPermsStore.
type PermsStoreCountUsersWithStalePermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreCountUsersWithStalePermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreCountUsersWithStalePermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreDeleteAllUserPendingPermissionsFunc describes the behavior when
// the DeleteAllUserPendingPermissions method of the parent MockPermsStore
// instance is invoked.
type PermsStoreDeleteAllUserPendingPermissionsFunc struct {
	defaultHook func(context.Context, *extsvc.Accounts) error
	hooks       []func(context.Context, *extsvc.Accounts) error
	history     []PermsStoreDeleteAllUserPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// DeleteAllUserPendingPermissions delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) DeleteAllUserPendingPermissions(v0 context.Context, v1 *extsvc.Accounts) error {
	r0 := m.DeleteAllUserPendingPermissionsFunc.nextHook()(v0, v1)
	m.DeleteAllUserPendingPermissionsFunc.appendCall(PermsStoreDeleteAllUserPendingPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteAllUserPendingPermissions method of the parent MockPermsStore
// instance is invoked and the hook queue is empty.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *extsvc.Accounts) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteAllUserPendingPermissions method of the parent MockPermsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) PushHook(hook func(context.Context, *extsvc.Accounts) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *extsvc.Accounts) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *extsvc.Accounts) error {
		return r0
	})
}

func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) nextHook() func(context.Context, *extsvc.Accounts) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) appendCall(r0 PermsStoreDeleteAllUserPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreDeleteAllUserPendingPermissionsFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreDeleteAllUserPendingPermissionsFunc) History() []PermsStoreDeleteAllUserPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreDeleteAllUserPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreDeleteAllUserPendingPermissionsFuncCall is an object that
// describes an invocation of method DeleteAllUserPendingPermissions on an
// instance of MockPermsStore.
type PermsStoreDeleteAllUserPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *extsvc.Accounts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreDeleteAllUserPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreDeleteAllUserPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreDeleteAllUserPermissionsFunc describes the behavior when the
// DeleteAllUserPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreDeleteAllUserPermissionsFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []PermsStoreDeleteAllUserPermissionsFuncCall
	mutex       sync.Mutex
}

// DeleteAllUserPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) DeleteAllUserPermissions(v0 context.Context, v1 int32) error {
	r0 := m.DeleteAllUserPermissionsFunc.nextHook()(v0, v1)
	m.DeleteAllUserPermissionsFunc.appendCall(PermsStoreDeleteAllUserPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteAllUserPermissions method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreDeleteAllUserPermissionsFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteAllUserPermissions method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreDeleteAllUserPermissionsFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreDeleteAllUserPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreDeleteAllUserPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *PermsStoreDeleteAllUserPermissionsFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreDeleteAllUserPermissionsFunc) appendCall(r0 PermsStoreDeleteAllUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreDeleteAllUserPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreDeleteAllUserPermissionsFunc) History() []PermsStoreDeleteAllUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreDeleteAllUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreDeleteAllUserPermissionsFuncCall is an object that describes an
// invocation of method DeleteAllUserPermissions on an instance of
// MockPermsStore.
type PermsStoreDeleteAllUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreDeleteAllUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreDeleteAllUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreDoneFunc describes the behavior when the Done method of the
// parent MockPermsStore instance is invoked.
type PermsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []PermsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(PermsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockPermsStore instance is invoked and the hook queue is empty.
func (f *PermsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockPermsStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *PermsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *PermsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreDoneFunc) appendCall(r0 PermsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreDoneFuncCall objects describing
// the invocations of this function.
func (f *PermsStoreDoneFunc) History() []PermsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreDoneFuncCall is an object that describes an invocation of
// method Done on an instance of MockPermsStore.
type PermsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreFetchReposByExternalAccountFunc describes the behavior when the
// FetchReposByExternalAccount method of the parent MockPermsStore instance
// is invoked.
type PermsStoreFetchReposByExternalAccountFunc struct {
	defaultHook func(context.Context, int32) ([]api.RepoID, error)
	hooks       []func(context.Context, int32) ([]api.RepoID, error)
	history     []PermsStoreFetchReposByExternalAccountFuncCall
	mutex       sync.Mutex
}

// FetchReposByExternalAccount delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) FetchReposByExternalAccount(v0 context.Context, v1 int32) ([]api.RepoID, error) {
	r0, r1 := m.FetchReposByExternalAccountFunc.nextHook()(v0, v1)
	m.FetchReposByExternalAccountFunc.appendCall(PermsStoreFetchReposByExternalAccountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// FetchReposByExternalAccount method of the parent MockPermsStore instance
// is invoked and the hook queue is empty.
func (f *PermsStoreFetchReposByExternalAccountFunc) SetDefaultHook(hook func(context.Context, int32) ([]api.RepoID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FetchReposByExternalAccount method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreFetchReposByExternalAccountFunc) PushHook(hook func(context.Context, int32) ([]api.RepoID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreFetchReposByExternalAccountFunc) SetDefaultReturn(r0 []api.RepoID, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]api.RepoID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreFetchReposByExternalAccountFunc) PushReturn(r0 []api.RepoID, r1 error) {
	f.PushHook(func(context.Context, int32) ([]api.RepoID, error) {
		return r0, r1
	})
}

func (f *PermsStoreFetchReposByExternalAccountFunc) nextHook() func(context.Context, int32) ([]api.RepoID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreFetchReposByExternalAccountFunc) appendCall(r0 PermsStoreFetchReposByExternalAccountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreFetchReposByExternalAccountFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreFetchReposByExternalAccountFunc) History() []PermsStoreFetchReposByExternalAccountFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreFetchReposByExternalAccountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreFetchReposByExternalAccountFuncCall is an object that describes
// an invocation of method FetchReposByExternalAccount on an instance of
// MockPermsStore.
type PermsStoreFetchReposByExternalAccountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreFetchReposByExternalAccountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreFetchReposByExternalAccountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreGetUserIDsByExternalAccountsFunc describes the behavior when
// the GetUserIDsByExternalAccounts method of the parent MockPermsStore
// instance is invoked.
type PermsStoreGetUserIDsByExternalAccountsFunc struct {
	defaultHook func(context.Context, *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error)
	hooks       []func(context.Context, *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error)
	history     []PermsStoreGetUserIDsByExternalAccountsFuncCall
	mutex       sync.Mutex
}

// GetUserIDsByExternalAccounts delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) GetUserIDsByExternalAccounts(v0 context.Context, v1 *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error) {
	r0, r1 := m.GetUserIDsByExternalAccountsFunc.nextHook()(v0, v1)
	m.GetUserIDsByExternalAccountsFunc.appendCall(PermsStoreGetUserIDsByExternalAccountsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetUserIDsByExternalAccounts method of the parent MockPermsStore instance
// is invoked and the hook queue is empty.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) SetDefaultHook(hook func(context.Context, *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUserIDsByExternalAccounts method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) PushHook(hook func(context.Context, *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) SetDefaultReturn(r0 map[string]authz.UserIDWithExternalAccountID, r1 error) {
	f.SetDefaultHook(func(context.Context, *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) PushReturn(r0 map[string]authz.UserIDWithExternalAccountID, r1 error) {
	f.PushHook(func(context.Context, *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error) {
		return r0, r1
	})
}

func (f *PermsStoreGetUserIDsByExternalAccountsFunc) nextHook() func(context.Context, *extsvc.Accounts) (map[string]authz.UserIDWithExternalAccountID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreGetUserIDsByExternalAccountsFunc) appendCall(r0 PermsStoreGetUserIDsByExternalAccountsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreGetUserIDsByExternalAccountsFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreGetUserIDsByExternalAccountsFunc) History() []PermsStoreGetUserIDsByExternalAccountsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreGetUserIDsByExternalAccountsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreGetUserIDsByExternalAccountsFuncCall is an object that
// describes an invocation of method GetUserIDsByExternalAccounts on an
// instance of MockPermsStore.
type PermsStoreGetUserIDsByExternalAccountsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *extsvc.Accounts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]authz.UserIDWithExternalAccountID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreGetUserIDsByExternalAccountsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreGetUserIDsByExternalAccountsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreGrantPendingPermissionsFunc describes the behavior when the
// GrantPendingPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreGrantPendingPermissionsFunc struct {
	defaultHook func(context.Context, *authz.UserGrantPermissions) error
	hooks       []func(context.Context, *authz.UserGrantPermissions) error
	history     []PermsStoreGrantPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// GrantPendingPermissions delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) GrantPendingPermissions(v0 context.Context, v1 *authz.UserGrantPermissions) error {
	r0 := m.GrantPendingPermissionsFunc.nextHook()(v0, v1)
	m.GrantPendingPermissionsFunc.appendCall(PermsStoreGrantPendingPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GrantPendingPermissions method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreGrantPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *authz.UserGrantPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GrantPendingPermissions method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreGrantPendingPermissionsFunc) PushHook(hook func(context.Context, *authz.UserGrantPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreGrantPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *authz.UserGrantPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreGrantPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *authz.UserGrantPermissions) error {
		return r0
	})
}

func (f *PermsStoreGrantPendingPermissionsFunc) nextHook() func(context.Context, *authz.UserGrantPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreGrantPendingPermissionsFunc) appendCall(r0 PermsStoreGrantPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreGrantPendingPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreGrantPendingPermissionsFunc) History() []PermsStoreGrantPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreGrantPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreGrantPendingPermissionsFuncCall is an object that describes an
// invocation of method GrantPendingPermissions on an instance of
// MockPermsStore.
type PermsStoreGrantPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *authz.UserGrantPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreGrantPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreGrantPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreHandleFunc describes the behavior when the Handle method of the
// parent MockPermsStore instance is invoked.
type PermsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []PermsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(PermsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockPermsStore instance is invoked and the hook queue is empty.
func (f *PermsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockPermsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *PermsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreHandleFunc) appendCall(r0 PermsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreHandleFuncCall objects describing
// the invocations of this function.
func (f *PermsStoreHandleFunc) History() []PermsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockPermsStore.
type PermsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreIsRepoUnrestrictedFunc describes the behavior when the
// IsRepoUnrestricted method of the parent MockPermsStore instance is
// invoked.
type PermsStoreIsRepoUnrestrictedFunc struct {
	defaultHook func(context.Context, api.RepoID) (bool, error)
	hooks       []func(context.Context, api.RepoID) (bool, error)
	history     []PermsStoreIsRepoUnrestrictedFuncCall
	mutex       sync.Mutex
}

// IsRepoUnrestricted delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) IsRepoUnrestricted(v0 context.Context, v1 api.RepoID) (bool, error) {
	r0, r1 := m.IsRepoUnrestrictedFunc.nextHook()(v0, v1)
	m.IsRepoUnrestrictedFunc.appendCall(PermsStoreIsRepoUnrestrictedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IsRepoUnrestricted
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreIsRepoUnrestrictedFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRepoUnrestricted method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreIsRepoUnrestrictedFunc) PushHook(hook func(context.Context, api.RepoID) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreIsRepoUnrestrictedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreIsRepoUnrestrictedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (bool, error) {
		return r0, r1
	})
}

func (f *PermsStoreIsRepoUnrestrictedFunc) nextHook() func(context.Context, api.RepoID) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreIsRepoUnrestrictedFunc) appendCall(r0 PermsStoreIsRepoUnrestrictedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreIsRepoUnrestrictedFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreIsRepoUnrestrictedFunc) History() []PermsStoreIsRepoUnrestrictedFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreIsRepoUnrestrictedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreIsRepoUnrestrictedFuncCall is an object that describes an
// invocation of method IsRepoUnrestricted on an instance of MockPermsStore.
type PermsStoreIsRepoUnrestrictedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreIsRepoUnrestrictedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreIsRepoUnrestrictedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreListPendingUsersFunc describes the behavior when the
// ListPendingUsers method of the parent MockPermsStore instance is invoked.
type PermsStoreListPendingUsersFunc struct {
	defaultHook func(context.Context, string, string) ([]string, error)
	hooks       []func(context.Context, string, string) ([]string, error)
	history     []PermsStoreListPendingUsersFuncCall
	mutex       sync.Mutex
}

// ListPendingUsers delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) ListPendingUsers(v0 context.Context, v1 string, v2 string) ([]string, error) {
	r0, r1 := m.ListPendingUsersFunc.nextHook()(v0, v1, v2)
	m.ListPendingUsersFunc.appendCall(PermsStoreListPendingUsersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListPendingUsers
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreListPendingUsersFunc) SetDefaultHook(hook func(context.Context, string, string) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListPendingUsers method of the parent MockPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermsStoreListPendingUsersFunc) PushHook(hook func(context.Context, string, string) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreListPendingUsersFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, string, string) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreListPendingUsersFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, string, string) ([]string, error) {
		return r0, r1
	})
}

func (f *PermsStoreListPendingUsersFunc) nextHook() func(context.Context, string, string) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreListPendingUsersFunc) appendCall(r0 PermsStoreListPendingUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreListPendingUsersFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreListPendingUsersFunc) History() []PermsStoreListPendingUsersFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreListPendingUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreListPendingUsersFuncCall is an object that describes an
// invocation of method ListPendingUsers on an instance of MockPermsStore.
type PermsStoreListPendingUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreListPendingUsersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreListPendingUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreListRepoPermissionsFunc describes the behavior when the
// ListRepoPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreListRepoPermissionsFunc struct {
	defaultHook func(context.Context, api.RepoID, *ListRepoPermissionsArgs) ([]*RepoPermission, error)
	hooks       []func(context.Context, api.RepoID, *ListRepoPermissionsArgs) ([]*RepoPermission, error)
	history     []PermsStoreListRepoPermissionsFuncCall
	mutex       sync.Mutex
}

// ListRepoPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) ListRepoPermissions(v0 context.Context, v1 api.RepoID, v2 *ListRepoPermissionsArgs) ([]*RepoPermission, error) {
	r0, r1 := m.ListRepoPermissionsFunc.nextHook()(v0, v1, v2)
	m.ListRepoPermissionsFunc.appendCall(PermsStoreListRepoPermissionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListRepoPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreListRepoPermissionsFunc) SetDefaultHook(hook func(context.Context, api.RepoID, *ListRepoPermissionsArgs) ([]*RepoPermission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRepoPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreListRepoPermissionsFunc) PushHook(hook func(context.Context, api.RepoID, *ListRepoPermissionsArgs) ([]*RepoPermission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreListRepoPermissionsFunc) SetDefaultReturn(r0 []*RepoPermission, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID, *ListRepoPermissionsArgs) ([]*RepoPermission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreListRepoPermissionsFunc) PushReturn(r0 []*RepoPermission, r1 error) {
	f.PushHook(func(context.Context, api.RepoID, *ListRepoPermissionsArgs) ([]*RepoPermission, error) {
		return r0, r1
	})
}

func (f *PermsStoreListRepoPermissionsFunc) nextHook() func(context.Context, api.RepoID, *ListRepoPermissionsArgs) ([]*RepoPermission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreListRepoPermissionsFunc) appendCall(r0 PermsStoreListRepoPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreListRepoPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreListRepoPermissionsFunc) History() []PermsStoreListRepoPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreListRepoPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreListRepoPermissionsFuncCall is an object that describes an
// invocation of method ListRepoPermissions on an instance of
// MockPermsStore.
type PermsStoreListRepoPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *ListRepoPermissionsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*RepoPermission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreListRepoPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreListRepoPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreListUserPermissionsFunc describes the behavior when the
// ListUserPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreListUserPermissionsFunc struct {
	defaultHook func(context.Context, int32, *ListUserPermissionsArgs) ([]*UserPermission, error)
	hooks       []func(context.Context, int32, *ListUserPermissionsArgs) ([]*UserPermission, error)
	history     []PermsStoreListUserPermissionsFuncCall
	mutex       sync.Mutex
}

// ListUserPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) ListUserPermissions(v0 context.Context, v1 int32, v2 *ListUserPermissionsArgs) ([]*UserPermission, error) {
	r0, r1 := m.ListUserPermissionsFunc.nextHook()(v0, v1, v2)
	m.ListUserPermissionsFunc.appendCall(PermsStoreListUserPermissionsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListUserPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreListUserPermissionsFunc) SetDefaultHook(hook func(context.Context, int32, *ListUserPermissionsArgs) ([]*UserPermission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListUserPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreListUserPermissionsFunc) PushHook(hook func(context.Context, int32, *ListUserPermissionsArgs) ([]*UserPermission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreListUserPermissionsFunc) SetDefaultReturn(r0 []*UserPermission, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, *ListUserPermissionsArgs) ([]*UserPermission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreListUserPermissionsFunc) PushReturn(r0 []*UserPermission, r1 error) {
	f.PushHook(func(context.Context, int32, *ListUserPermissionsArgs) ([]*UserPermission, error) {
		return r0, r1
	})
}

func (f *PermsStoreListUserPermissionsFunc) nextHook() func(context.Context, int32, *ListUserPermissionsArgs) ([]*UserPermission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreListUserPermissionsFunc) appendCall(r0 PermsStoreListUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreListUserPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreListUserPermissionsFunc) History() []PermsStoreListUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreListUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreListUserPermissionsFuncCall is an object that describes an
// invocation of method ListUserPermissions on an instance of
// MockPermsStore.
type PermsStoreListUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *ListUserPermissionsArgs
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*UserPermission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreListUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreListUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreLoadRepoPermissionsFunc describes the behavior when the
// LoadRepoPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreLoadRepoPermissionsFunc struct {
	defaultHook func(context.Context, int32) ([]authz.Permission, error)
	hooks       []func(context.Context, int32) ([]authz.Permission, error)
	history     []PermsStoreLoadRepoPermissionsFuncCall
	mutex       sync.Mutex
}

// LoadRepoPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) LoadRepoPermissions(v0 context.Context, v1 int32) ([]authz.Permission, error) {
	r0, r1 := m.LoadRepoPermissionsFunc.nextHook()(v0, v1)
	m.LoadRepoPermissionsFunc.appendCall(PermsStoreLoadRepoPermissionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LoadRepoPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreLoadRepoPermissionsFunc) SetDefaultHook(hook func(context.Context, int32) ([]authz.Permission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadRepoPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreLoadRepoPermissionsFunc) PushHook(hook func(context.Context, int32) ([]authz.Permission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreLoadRepoPermissionsFunc) SetDefaultReturn(r0 []authz.Permission, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]authz.Permission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreLoadRepoPermissionsFunc) PushReturn(r0 []authz.Permission, r1 error) {
	f.PushHook(func(context.Context, int32) ([]authz.Permission, error) {
		return r0, r1
	})
}

func (f *PermsStoreLoadRepoPermissionsFunc) nextHook() func(context.Context, int32) ([]authz.Permission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreLoadRepoPermissionsFunc) appendCall(r0 PermsStoreLoadRepoPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreLoadRepoPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreLoadRepoPermissionsFunc) History() []PermsStoreLoadRepoPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreLoadRepoPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreLoadRepoPermissionsFuncCall is an object that describes an
// invocation of method LoadRepoPermissions on an instance of
// MockPermsStore.
type PermsStoreLoadRepoPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []authz.Permission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreLoadRepoPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreLoadRepoPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreLoadUserPendingPermissionsFunc describes the behavior when the
// LoadUserPendingPermissions method of the parent MockPermsStore instance
// is invoked.
type PermsStoreLoadUserPendingPermissionsFunc struct {
	defaultHook func(context.Context, *authz.UserPendingPermissions) error
	hooks       []func(context.Context, *authz.UserPendingPermissions) error
	history     []PermsStoreLoadUserPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// LoadUserPendingPermissions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) LoadUserPendingPermissions(v0 context.Context, v1 *authz.UserPendingPermissions) error {
	r0 := m.LoadUserPendingPermissionsFunc.nextHook()(v0, v1)
	m.LoadUserPendingPermissionsFunc.appendCall(PermsStoreLoadUserPendingPermissionsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// LoadUserPendingPermissions method of the parent MockPermsStore instance
// is invoked and the hook queue is empty.
func (f *PermsStoreLoadUserPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *authz.UserPendingPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadUserPendingPermissions method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreLoadUserPendingPermissionsFunc) PushHook(hook func(context.Context, *authz.UserPendingPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreLoadUserPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *authz.UserPendingPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreLoadUserPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *authz.UserPendingPermissions) error {
		return r0
	})
}

func (f *PermsStoreLoadUserPendingPermissionsFunc) nextHook() func(context.Context, *authz.UserPendingPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreLoadUserPendingPermissionsFunc) appendCall(r0 PermsStoreLoadUserPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreLoadUserPendingPermissionsFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreLoadUserPendingPermissionsFunc) History() []PermsStoreLoadUserPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreLoadUserPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreLoadUserPendingPermissionsFuncCall is an object that describes
// an invocation of method LoadUserPendingPermissions on an instance of
// MockPermsStore.
type PermsStoreLoadUserPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *authz.UserPendingPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreLoadUserPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreLoadUserPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreLoadUserPermissionsFunc describes the behavior when the
// LoadUserPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreLoadUserPermissionsFunc struct {
	defaultHook func(context.Context, int32) ([]authz.Permission, error)
	hooks       []func(context.Context, int32) ([]authz.Permission, error)
	history     []PermsStoreLoadUserPermissionsFuncCall
	mutex       sync.Mutex
}

// LoadUserPermissions delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) LoadUserPermissions(v0 context.Context, v1 int32) ([]authz.Permission, error) {
	r0, r1 := m.LoadUserPermissionsFunc.nextHook()(v0, v1)
	m.LoadUserPermissionsFunc.appendCall(PermsStoreLoadUserPermissionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the LoadUserPermissions
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreLoadUserPermissionsFunc) SetDefaultHook(hook func(context.Context, int32) ([]authz.Permission, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LoadUserPermissions method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreLoadUserPermissionsFunc) PushHook(hook func(context.Context, int32) ([]authz.Permission, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreLoadUserPermissionsFunc) SetDefaultReturn(r0 []authz.Permission, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) ([]authz.Permission, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreLoadUserPermissionsFunc) PushReturn(r0 []authz.Permission, r1 error) {
	f.PushHook(func(context.Context, int32) ([]authz.Permission, error) {
		return r0, r1
	})
}

func (f *PermsStoreLoadUserPermissionsFunc) nextHook() func(context.Context, int32) ([]authz.Permission, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreLoadUserPermissionsFunc) appendCall(r0 PermsStoreLoadUserPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreLoadUserPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreLoadUserPermissionsFunc) History() []PermsStoreLoadUserPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreLoadUserPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreLoadUserPermissionsFuncCall is an object that describes an
// invocation of method LoadUserPermissions on an instance of
// MockPermsStore.
type PermsStoreLoadUserPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []authz.Permission
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreLoadUserPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreLoadUserPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreMapUsersFunc describes the behavior when the MapUsers method of
// the parent MockPermsStore instance is invoked.
type PermsStoreMapUsersFunc struct {
	defaultHook func(context.Context, []string, *schema.PermissionsUserMapping) (map[string]int32, error)
	hooks       []func(context.Context, []string, *schema.PermissionsUserMapping) (map[string]int32, error)
	history     []PermsStoreMapUsersFuncCall
	mutex       sync.Mutex
}

// MapUsers delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) MapUsers(v0 context.Context, v1 []string, v2 *schema.PermissionsUserMapping) (map[string]int32, error) {
	r0, r1 := m.MapUsersFunc.nextHook()(v0, v1, v2)
	m.MapUsersFunc.appendCall(PermsStoreMapUsersFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MapUsers method of
// the parent MockPermsStore instance is invoked and the hook queue is
// empty.
func (f *PermsStoreMapUsersFunc) SetDefaultHook(hook func(context.Context, []string, *schema.PermissionsUserMapping) (map[string]int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MapUsers method of the parent MockPermsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermsStoreMapUsersFunc) PushHook(hook func(context.Context, []string, *schema.PermissionsUserMapping) (map[string]int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreMapUsersFunc) SetDefaultReturn(r0 map[string]int32, r1 error) {
	f.SetDefaultHook(func(context.Context, []string, *schema.PermissionsUserMapping) (map[string]int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreMapUsersFunc) PushReturn(r0 map[string]int32, r1 error) {
	f.PushHook(func(context.Context, []string, *schema.PermissionsUserMapping) (map[string]int32, error) {
		return r0, r1
	})
}

func (f *PermsStoreMapUsersFunc) nextHook() func(context.Context, []string, *schema.PermissionsUserMapping) (map[string]int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreMapUsersFunc) appendCall(r0 PermsStoreMapUsersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreMapUsersFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreMapUsersFunc) History() []PermsStoreMapUsersFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreMapUsersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreMapUsersFuncCall is an object that describes an invocation of
// method MapUsers on an instance of MockPermsStore.
type PermsStoreMapUsersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *schema.PermissionsUserMapping
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[string]int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreMapUsersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreMapUsersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreMetricsFunc describes the behavior when the Metrics method of
// the parent MockPermsStore instance is invoked.
type PermsStoreMetricsFunc struct {
	defaultHook func(context.Context, time.Duration) (*PermsMetrics, error)
	hooks       []func(context.Context, time.Duration) (*PermsMetrics, error)
	history     []PermsStoreMetricsFuncCall
	mutex       sync.Mutex
}

// Metrics delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) Metrics(v0 context.Context, v1 time.Duration) (*PermsMetrics, error) {
	r0, r1 := m.MetricsFunc.nextHook()(v0, v1)
	m.MetricsFunc.appendCall(PermsStoreMetricsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Metrics method of
// the parent MockPermsStore instance is invoked and the hook queue is
// empty.
func (f *PermsStoreMetricsFunc) SetDefaultHook(hook func(context.Context, time.Duration) (*PermsMetrics, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Metrics method of the parent MockPermsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermsStoreMetricsFunc) PushHook(hook func(context.Context, time.Duration) (*PermsMetrics, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreMetricsFunc) SetDefaultReturn(r0 *PermsMetrics, r1 error) {
	f.SetDefaultHook(func(context.Context, time.Duration) (*PermsMetrics, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreMetricsFunc) PushReturn(r0 *PermsMetrics, r1 error) {
	f.PushHook(func(context.Context, time.Duration) (*PermsMetrics, error) {
		return r0, r1
	})
}

func (f *PermsStoreMetricsFunc) nextHook() func(context.Context, time.Duration) (*PermsMetrics, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreMetricsFunc) appendCall(r0 PermsStoreMetricsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreMetricsFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreMetricsFunc) History() []PermsStoreMetricsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreMetricsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreMetricsFuncCall is an object that describes an invocation of
// method Metrics on an instance of MockPermsStore.
type PermsStoreMetricsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *PermsMetrics
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreMetricsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreMetricsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreRepoIDsWithNoPermsFunc describes the behavior when the
// RepoIDsWithNoPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreRepoIDsWithNoPermsFunc struct {
	defaultHook func(context.Context) ([]api.RepoID, error)
	hooks       []func(context.Context) ([]api.RepoID, error)
	history     []PermsStoreRepoIDsWithNoPermsFuncCall
	mutex       sync.Mutex
}

// RepoIDsWithNoPerms delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) RepoIDsWithNoPerms(v0 context.Context) ([]api.RepoID, error) {
	r0, r1 := m.RepoIDsWithNoPermsFunc.nextHook()(v0)
	m.RepoIDsWithNoPermsFunc.appendCall(PermsStoreRepoIDsWithNoPermsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoIDsWithNoPerms
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreRepoIDsWithNoPermsFunc) SetDefaultHook(hook func(context.Context) ([]api.RepoID, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoIDsWithNoPerms method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreRepoIDsWithNoPermsFunc) PushHook(hook func(context.Context) ([]api.RepoID, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreRepoIDsWithNoPermsFunc) SetDefaultReturn(r0 []api.RepoID, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]api.RepoID, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreRepoIDsWithNoPermsFunc) PushReturn(r0 []api.RepoID, r1 error) {
	f.PushHook(func(context.Context) ([]api.RepoID, error) {
		return r0, r1
	})
}

func (f *PermsStoreRepoIDsWithNoPermsFunc) nextHook() func(context.Context) ([]api.RepoID, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreRepoIDsWithNoPermsFunc) appendCall(r0 PermsStoreRepoIDsWithNoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreRepoIDsWithNoPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreRepoIDsWithNoPermsFunc) History() []PermsStoreRepoIDsWithNoPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreRepoIDsWithNoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreRepoIDsWithNoPermsFuncCall is an object that describes an
// invocation of method RepoIDsWithNoPerms on an instance of MockPermsStore.
type PermsStoreRepoIDsWithNoPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []api.RepoID
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreRepoIDsWithNoPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreRepoIDsWithNoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreReposIDsWithOldestPermsFunc describes the behavior when the
// ReposIDsWithOldestPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreReposIDsWithOldestPermsFunc struct {
	defaultHook func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error)
	hooks       []func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error)
	history     []PermsStoreReposIDsWithOldestPermsFuncCall
	mutex       sync.Mutex
}

// ReposIDsWithOldestPerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) ReposIDsWithOldestPerms(v0 context.Context, v1 int, v2 time.Duration) (map[api.RepoID]time.Time, error) {
	r0, r1 := m.ReposIDsWithOldestPermsFunc.nextHook()(v0, v1, v2)
	m.ReposIDsWithOldestPermsFunc.appendCall(PermsStoreReposIDsWithOldestPermsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ReposIDsWithOldestPerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreReposIDsWithOldestPermsFunc) SetDefaultHook(hook func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReposIDsWithOldestPerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreReposIDsWithOldestPermsFunc) PushHook(hook func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreReposIDsWithOldestPermsFunc) SetDefaultReturn(r0 map[api.RepoID]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreReposIDsWithOldestPermsFunc) PushReturn(r0 map[api.RepoID]time.Time, r1 error) {
	f.PushHook(func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error) {
		return r0, r1
	})
}

func (f *PermsStoreReposIDsWithOldestPermsFunc) nextHook() func(context.Context, int, time.Duration) (map[api.RepoID]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreReposIDsWithOldestPermsFunc) appendCall(r0 PermsStoreReposIDsWithOldestPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreReposIDsWithOldestPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreReposIDsWithOldestPermsFunc) History() []PermsStoreReposIDsWithOldestPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreReposIDsWithOldestPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreReposIDsWithOldestPermsFuncCall is an object that describes an
// invocation of method ReposIDsWithOldestPerms on an instance of
// MockPermsStore.
type PermsStoreReposIDsWithOldestPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreReposIDsWithOldestPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreReposIDsWithOldestPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreSetRepoPendingPermissionsFunc describes the behavior when the
// SetRepoPendingPermissions method of the parent MockPermsStore instance is
// invoked.
type PermsStoreSetRepoPendingPermissionsFunc struct {
	defaultHook func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error
	hooks       []func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error
	history     []PermsStoreSetRepoPendingPermissionsFuncCall
	mutex       sync.Mutex
}

// SetRepoPendingPermissions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) SetRepoPendingPermissions(v0 context.Context, v1 *extsvc.Accounts, v2 *authz.RepoPermissions) error {
	r0 := m.SetRepoPendingPermissionsFunc.nextHook()(v0, v1, v2)
	m.SetRepoPendingPermissionsFunc.appendCall(PermsStoreSetRepoPendingPermissionsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetRepoPendingPermissions method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreSetRepoPendingPermissionsFunc) SetDefaultHook(hook func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepoPendingPermissions method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreSetRepoPendingPermissionsFunc) PushHook(hook func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreSetRepoPendingPermissionsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreSetRepoPendingPermissionsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error {
		return r0
	})
}

func (f *PermsStoreSetRepoPendingPermissionsFunc) nextHook() func(context.Context, *extsvc.Accounts, *authz.RepoPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreSetRepoPendingPermissionsFunc) appendCall(r0 PermsStoreSetRepoPendingPermissionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreSetRepoPendingPermissionsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreSetRepoPendingPermissionsFunc) History() []PermsStoreSetRepoPendingPermissionsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreSetRepoPendingPermissionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreSetRepoPendingPermissionsFuncCall is an object that describes
// an invocation of method SetRepoPendingPermissions on an instance of
// MockPermsStore.
type PermsStoreSetRepoPendingPermissionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *extsvc.Accounts
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *authz.RepoPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreSetRepoPendingPermissionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreSetRepoPendingPermissionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreSetRepoPermissionsUnrestrictedFunc describes the behavior when
// the SetRepoPermissionsUnrestricted method of the parent MockPermsStore
// instance is invoked.
type PermsStoreSetRepoPermissionsUnrestrictedFunc struct {
	defaultHook func(context.Context, []int32, bool) error
	hooks       []func(context.Context, []int32, bool) error
	history     []PermsStoreSetRepoPermissionsUnrestrictedFuncCall
	mutex       sync.Mutex
}

// SetRepoPermissionsUnrestricted delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) SetRepoPermissionsUnrestricted(v0 context.Context, v1 []int32, v2 bool) error {
	r0 := m.SetRepoPermissionsUnrestrictedFunc.nextHook()(v0, v1, v2)
	m.SetRepoPermissionsUnrestrictedFunc.appendCall(PermsStoreSetRepoPermissionsUnrestrictedFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetRepoPermissionsUnrestricted method of the parent MockPermsStore
// instance is invoked and the hook queue is empty.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) SetDefaultHook(hook func(context.Context, []int32, bool) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepoPermissionsUnrestricted method of the parent MockPermsStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) PushHook(hook func(context.Context, []int32, bool) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []int32, bool) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []int32, bool) error {
		return r0
	})
}

func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) nextHook() func(context.Context, []int32, bool) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) appendCall(r0 PermsStoreSetRepoPermissionsUnrestrictedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreSetRepoPermissionsUnrestrictedFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreSetRepoPermissionsUnrestrictedFunc) History() []PermsStoreSetRepoPermissionsUnrestrictedFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreSetRepoPermissionsUnrestrictedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreSetRepoPermissionsUnrestrictedFuncCall is an object that
// describes an invocation of method SetRepoPermissionsUnrestricted on an
// instance of MockPermsStore.
type PermsStoreSetRepoPermissionsUnrestrictedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreSetRepoPermissionsUnrestrictedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreSetRepoPermissionsUnrestrictedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// PermsStoreSetRepoPermsFunc describes the behavior when the SetRepoPerms
// method of the parent MockPermsStore instance is invoked.
type PermsStoreSetRepoPermsFunc struct {
	defaultHook func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (*database.SetPermissionsResult, error)
	hooks       []func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (*database.SetPermissionsResult, error)
	history     []PermsStoreSetRepoPermsFuncCall
	mutex       sync.Mutex
}

// SetRepoPerms delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockPermsStore) SetRepoPerms(v0 context.Context, v1 int32, v2 []authz.UserIDWithExternalAccountID, v3 authz.PermsSource) (*database.SetPermissionsResult, error) {
	r0, r1 := m.SetRepoPermsFunc.nextHook()(v0, v1, v2, v3)
	m.SetRepoPermsFunc.appendCall(PermsStoreSetRepoPermsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SetRepoPerms method
// of the parent MockPermsStore instance is invoked and the hook queue is
// empty.
func (f *PermsStoreSetRepoPermsFunc) SetDefaultHook(hook func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (*database.SetPermissionsResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRepoPerms method of the parent MockPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *PermsStoreSetRepoPermsFunc) PushHook(hook func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (*database.SetPermissionsResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreSetRepoPermsFunc) SetDefaultReturn(r0 *database.SetPermissionsResult, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (*database.SetPermissionsResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreSetRepoPermsFunc) PushReturn(r0 *database.SetPermissionsResult, r1 error) {
	f.PushHook(func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (*database.SetPermissionsResult, error) {
		return r0, r1
	})
}

func (f *PermsStoreSetRepoPermsFunc) nextHook() func(context.Context, int32, []authz.UserIDWithExternalAccountID, authz.PermsSource) (*database.SetPermissionsResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreSetRepoPermsFunc) appendCall(r0 PermsStoreSetRepoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreSetRepoPermsFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreSetRepoPermsFunc) History() []PermsStoreSetRepoPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreSetRepoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreSetRepoPermsFuncCall is an object that describes an invocation
// of method SetRepoPerms on an instance of MockPermsStore.
type PermsStoreSetRepoPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []authz.UserIDWithExternalAccountID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 authz.PermsSource
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.SetPermissionsResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreSetRepoPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreSetRepoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreSetUserExternalAccountPermsFunc describes the behavior when the
// SetUserExternalAccountPerms method of the parent MockPermsStore instance
// is invoked.
type PermsStoreSetUserExternalAccountPermsFunc struct {
	defaultHook func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (*database.SetPermissionsResult, error)
	hooks       []func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (*database.SetPermissionsResult, error)
	history     []PermsStoreSetUserExternalAccountPermsFuncCall
	mutex       sync.Mutex
}

// SetUserExternalAccountPerms delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockPermsStore) SetUserExternalAccountPerms(v0 context.Context, v1 authz.UserIDWithExternalAccountID, v2 []int32, v3 authz.PermsSource) (*database.SetPermissionsResult, error) {
	r0, r1 := m.SetUserExternalAccountPermsFunc.nextHook()(v0, v1, v2, v3)
	m.SetUserExternalAccountPermsFunc.appendCall(PermsStoreSetUserExternalAccountPermsFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SetUserExternalAccountPerms method of the parent MockPermsStore instance
// is invoked and the hook queue is empty.
func (f *PermsStoreSetUserExternalAccountPermsFunc) SetDefaultHook(hook func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (*database.SetPermissionsResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetUserExternalAccountPerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreSetUserExternalAccountPermsFunc) PushHook(hook func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (*database.SetPermissionsResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreSetUserExternalAccountPermsFunc) SetDefaultReturn(r0 *database.SetPermissionsResult, r1 error) {
	f.SetDefaultHook(func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (*database.SetPermissionsResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreSetUserExternalAccountPermsFunc) PushReturn(r0 *database.SetPermissionsResult, r1 error) {
	f.PushHook(func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (*database.SetPermissionsResult, error) {
		return r0, r1
	})
}

func (f *PermsStoreSetUserExternalAccountPermsFunc) nextHook() func(context.Context, authz.UserIDWithExternalAccountID, []int32, authz.PermsSource) (*database.SetPermissionsResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreSetUserExternalAccountPermsFunc) appendCall(r0 PermsStoreSetUserExternalAccountPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// PermsStoreSetUserExternalAccountPermsFuncCall objects describing the
// invocations of this function.
func (f *PermsStoreSetUserExternalAccountPermsFunc) History() []PermsStoreSetUserExternalAccountPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreSetUserExternalAccountPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreSetUserExternalAccountPermsFuncCall is an object that describes
// an invocation of method SetUserExternalAccountPerms on an instance of
// MockPermsStore.
type PermsStoreSetUserExternalAccountPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 authz.UserIDWithExternalAccountID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int32
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 authz.PermsSource
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *database.SetPermissionsResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreSetUserExternalAccountPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreSetUserExternalAccountPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreTransactFunc describes the behavior when the Transact method of
// the parent MockPermsStore instance is invoked.
type PermsStoreTransactFunc struct {
	defaultHook func(context.Context) (PermsStore, error)
	hooks       []func(context.Context) (PermsStore, error)
	history     []PermsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) Transact(v0 context.Context) (PermsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(PermsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockPermsStore instance is invoked and the hook queue is
// empty.
func (f *PermsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (PermsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockPermsStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *PermsStoreTransactFunc) PushHook(hook func(context.Context) (PermsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreTransactFunc) SetDefaultReturn(r0 PermsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (PermsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreTransactFunc) PushReturn(r0 PermsStore, r1 error) {
	f.PushHook(func(context.Context) (PermsStore, error) {
		return r0, r1
	})
}

func (f *PermsStoreTransactFunc) nextHook() func(context.Context) (PermsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreTransactFunc) appendCall(r0 PermsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *PermsStoreTransactFunc) History() []PermsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreTransactFuncCall is an object that describes an invocation of
// method Transact on an instance of MockPermsStore.
type PermsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreUserIDsWithNoPermsFunc describes the behavior when the
// UserIDsWithNoPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreUserIDsWithNoPermsFunc struct {
	defaultHook func(context.Context) ([]int32, error)
	hooks       []func(context.Context) ([]int32, error)
	history     []PermsStoreUserIDsWithNoPermsFuncCall
	mutex       sync.Mutex
}

// UserIDsWithNoPerms delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockPermsStore) UserIDsWithNoPerms(v0 context.Context) ([]int32, error) {
	r0, r1 := m.UserIDsWithNoPermsFunc.nextHook()(v0)
	m.UserIDsWithNoPermsFunc.appendCall(PermsStoreUserIDsWithNoPermsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the UserIDsWithNoPerms
// method of the parent MockPermsStore instance is invoked and the hook
// queue is empty.
func (f *PermsStoreUserIDsWithNoPermsFunc) SetDefaultHook(hook func(context.Context) ([]int32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserIDsWithNoPerms method of the parent MockPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *PermsStoreUserIDsWithNoPermsFunc) PushHook(hook func(context.Context) ([]int32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreUserIDsWithNoPermsFunc) SetDefaultReturn(r0 []int32, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]int32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreUserIDsWithNoPermsFunc) PushReturn(r0 []int32, r1 error) {
	f.PushHook(func(context.Context) ([]int32, error) {
		return r0, r1
	})
}

func (f *PermsStoreUserIDsWithNoPermsFunc) nextHook() func(context.Context) ([]int32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreUserIDsWithNoPermsFunc) appendCall(r0 PermsStoreUserIDsWithNoPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreUserIDsWithNoPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreUserIDsWithNoPermsFunc) History() []PermsStoreUserIDsWithNoPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreUserIDsWithNoPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreUserIDsWithNoPermsFuncCall is an object that describes an
// invocation of method UserIDsWithNoPerms on an instance of MockPermsStore.
type PermsStoreUserIDsWithNoPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreUserIDsWithNoPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreUserIDsWithNoPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreUserIDsWithOldestPermsFunc describes the behavior when the
// UserIDsWithOldestPerms method of the parent MockPermsStore instance is
// invoked.
type PermsStoreUserIDsWithOldestPermsFunc struct {
	defaultHook func(context.Context, int, time.Duration) (map[int32]time.Time, error)
	hooks       []func(context.Context, int, time.Duration) (map[int32]time.Time, error)
	history     []PermsStoreUserIDsWithOldestPermsFuncCall
	mutex       sync.Mutex
}

// UserIDsWithOldestPerms delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockPermsStore) UserIDsWithOldestPerms(v0 context.Context, v1 int, v2 time.Duration) (map[int32]time.Time, error) {
	r0, r1 := m.UserIDsWithOldestPermsFunc.nextHook()(v0, v1, v2)
	m.UserIDsWithOldestPermsFunc.appendCall(PermsStoreUserIDsWithOldestPermsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UserIDsWithOldestPerms method of the parent MockPermsStore instance is
// invoked and the hook queue is empty.
func (f *PermsStoreUserIDsWithOldestPermsFunc) SetDefaultHook(hook func(context.Context, int, time.Duration) (map[int32]time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UserIDsWithOldestPerms method of the parent MockPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *PermsStoreUserIDsWithOldestPermsFunc) PushHook(hook func(context.Context, int, time.Duration) (map[int32]time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreUserIDsWithOldestPermsFunc) SetDefaultReturn(r0 map[int32]time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int, time.Duration) (map[int32]time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreUserIDsWithOldestPermsFunc) PushReturn(r0 map[int32]time.Time, r1 error) {
	f.PushHook(func(context.Context, int, time.Duration) (map[int32]time.Time, error) {
		return r0, r1
	})
}

func (f *PermsStoreUserIDsWithOldestPermsFunc) nextHook() func(context.Context, int, time.Duration) (map[int32]time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreUserIDsWithOldestPermsFunc) appendCall(r0 PermsStoreUserIDsWithOldestPermsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreUserIDsWithOldestPermsFuncCall
// objects describing the invocations of this function.
func (f *PermsStoreUserIDsWithOldestPermsFunc) History() []PermsStoreUserIDsWithOldestPermsFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreUserIDsWithOldestPermsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreUserIDsWithOldestPermsFuncCall is an object that describes an
// invocation of method UserIDsWithOldestPerms on an instance of
// MockPermsStore.
type PermsStoreUserIDsWithOldestPermsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int32]time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreUserIDsWithOldestPermsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreUserIDsWithOldestPermsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// PermsStoreWithFunc describes the behavior when the With method of the
// parent MockPermsStore instance is invoked.
type PermsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) PermsStore
	hooks       []func(basestore.ShareableStore) PermsStore
	history     []PermsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPermsStore) With(v0 basestore.ShareableStore) PermsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(PermsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockPermsStore instance is invoked and the hook queue is empty.
func (f *PermsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) PermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockPermsStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *PermsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) PermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *PermsStoreWithFunc) SetDefaultReturn(r0 PermsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) PermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *PermsStoreWithFunc) PushReturn(r0 PermsStore) {
	f.PushHook(func(basestore.ShareableStore) PermsStore {
		return r0
	})
}

func (f *PermsStoreWithFunc) nextHook() func(basestore.ShareableStore) PermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *PermsStoreWithFunc) appendCall(r0 PermsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of PermsStoreWithFuncCall objects describing
// the invocations of this function.
func (f *PermsStoreWithFunc) History() []PermsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]PermsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// PermsStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockPermsStore.
type PermsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 PermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PermsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PermsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockSubRepoPermsStore is a mock implementation of the SubRepoPermsStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/database) used for
// unit testing.
type MockSubRepoPermsStore struct {
	// DeleteByUserFunc is an instance of a mock function object controlling
	// the behavior of the method DeleteByUser.
	DeleteByUserFunc *SubRepoPermsStoreDeleteByUserFunc
	// DoneFunc is an instance of a mock function object controlling the
	// behavior of the method Done.
	DoneFunc *SubRepoPermsStoreDoneFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *SubRepoPermsStoreGetFunc
	// GetByUserFunc is an instance of a mock function object controlling
	// the behavior of the method GetByUser.
	GetByUserFunc *SubRepoPermsStoreGetByUserFunc
	// GetByUserAndServiceFunc is an instance of a mock function object
	// controlling the behavior of the method GetByUserAndService.
	GetByUserAndServiceFunc *SubRepoPermsStoreGetByUserAndServiceFunc
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *SubRepoPermsStoreHandleFunc
	// RepoIDSupportedFunc is an instance of a mock function object
	// controlling the behavior of the method RepoIDSupported.
	RepoIDSupportedFunc *SubRepoPermsStoreRepoIDSupportedFunc
	// RepoSupportedFunc is an instance of a mock function object
	// controlling the behavior of the method RepoSupported.
	RepoSupportedFunc *SubRepoPermsStoreRepoSupportedFunc
	// TransactFunc is an instance of a mock function object controlling the
	// behavior of the method Transact.
	TransactFunc *SubRepoPermsStoreTransactFunc
	// UpsertFunc is an instance of a mock function object controlling the
	// behavior of the method Upsert.
	UpsertFunc *SubRepoPermsStoreUpsertFunc
	// UpsertWithSpecFunc is an instance of a mock function object
	// controlling the behavior of the method UpsertWithSpec.
	UpsertWithSpecFunc *SubRepoPermsStoreUpsertWithSpecFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *SubRepoPermsStoreWithFunc
}

// NewMockSubRepoPermsStore creates a new mock of the SubRepoPermsStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockSubRepoPermsStore() *MockSubRepoPermsStore {
	return &MockSubRepoPermsStore{
		DeleteByUserFunc: &SubRepoPermsStoreDeleteByUserFunc{
			defaultHook: func(context.Context, int32) (r0 error) {
				return
			},
		},
		DoneFunc: &SubRepoPermsStoreDoneFunc{
			defaultHook: func(error) (r0 error) {
				return
			},
		},
		GetFunc: &SubRepoPermsStoreGetFunc{
			defaultHook: func(context.Context, int32, api.RepoID) (r0 *authz.SubRepoPermissions, r1 error) {
				return
			},
		},
		GetByUserFunc: &SubRepoPermsStoreGetByUserFunc{
			defaultHook: func(context.Context, int32) (r0 map[api.RepoName]authz.SubRepoPermissions, r1 error) {
				return
			},
		},
		GetByUserAndServiceFunc: &SubRepoPermsStoreGetByUserAndServiceFunc{
			defaultHook: func(context.Context, int32, string, string) (r0 map[api.ExternalRepoSpec]authz.SubRepoPermissions, r1 error) {
				return
			},
		},
		HandleFunc: &SubRepoPermsStoreHandleFunc{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		RepoIDSupportedFunc: &SubRepoPermsStoreRepoIDSupportedFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 bool, r1 error) {
				return
			},
		},
		RepoSupportedFunc: &SubRepoPermsStoreRepoSupportedFunc{
			defaultHook: func(context.Context, api.RepoName) (r0 bool, r1 error) {
				return
			},
		},
		TransactFunc: &SubRepoPermsStoreTransactFunc{
			defaultHook: func(context.Context) (r0 SubRepoPermsStore, r1 error) {
				return
			},
		},
		UpsertFunc: &SubRepoPermsStoreUpsertFunc{
			defaultHook: func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) (r0 error) {
				return
			},
		},
		UpsertWithSpecFunc: &SubRepoPermsStoreUpsertWithSpecFunc{
			defaultHook: func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) (r0 error) {
				return
			},
		},
		WithFunc: &SubRepoPermsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) (r0 SubRepoPermsStore) {
				return
			},
		},
	}
}

// NewStrictMockSubRepoPermsStore creates a new mock of the
// SubRepoPermsStore interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockSubRepoPermsStore() *MockSubRepoPermsStore {
	return &MockSubRepoPermsStore{
		DeleteByUserFunc: &SubRepoPermsStoreDeleteByUserFunc{
			defaultHook: func(context.Context, int32) error {
				panic("unexpected invocation of MockSubRepoPermsStore.DeleteByUser")
			},
		},
		DoneFunc: &SubRepoPermsStoreDoneFunc{
			defaultHook: func(error) error {
				panic("unexpected invocation of MockSubRepoPermsStore.Done")
			},
		},
		GetFunc: &SubRepoPermsStoreGetFunc{
			defaultHook: func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.Get")
			},
		},
		GetByUserFunc: &SubRepoPermsStoreGetByUserFunc{
			defaultHook: func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.GetByUser")
			},
		},
		GetByUserAndServiceFunc: &SubRepoPermsStoreGetByUserAndServiceFunc{
			defaultHook: func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.GetByUserAndService")
			},
		},
		HandleFunc: &SubRepoPermsStoreHandleFunc{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockSubRepoPermsStore.Handle")
			},
		},
		RepoIDSupportedFunc: &SubRepoPermsStoreRepoIDSupportedFunc{
			defaultHook: func(context.Context, api.RepoID) (bool, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.RepoIDSupported")
			},
		},
		RepoSupportedFunc: &SubRepoPermsStoreRepoSupportedFunc{
			defaultHook: func(context.Context, api.RepoName) (bool, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.RepoSupported")
			},
		},
		TransactFunc: &SubRepoPermsStoreTransactFunc{
			defaultHook: func(context.Context) (SubRepoPermsStore, error) {
				panic("unexpected invocation of MockSubRepoPermsStore.Transact")
			},
		},
		UpsertFunc: &SubRepoPermsStoreUpsertFunc{
			defaultHook: func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error {
				panic("unexpected invocation of MockSubRepoPermsStore.Upsert")
			},
		},
		UpsertWithSpecFunc: &SubRepoPermsStoreUpsertWithSpecFunc{
			defaultHook: func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error {
				panic("unexpected invocation of MockSubRepoPermsStore.UpsertWithSpec")
			},
		},
		WithFunc: &SubRepoPermsStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) SubRepoPermsStore {
				panic("unexpected invocation of MockSubRepoPermsStore.With")
			},
		},
	}
}

// NewMockSubRepoPermsStoreFrom creates a new mock of the
// MockSubRepoPermsStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockSubRepoPermsStoreFrom(i SubRepoPermsStore) *MockSubRepoPermsStore {
	return &MockSubRepoPermsStore{
		DeleteByUserFunc: &SubRepoPermsStoreDeleteByUserFunc{
			defaultHook: i.DeleteByUser,
		},
		DoneFunc: &SubRepoPermsStoreDoneFunc{
			defaultHook: i.Done,
		},
		GetFunc: &SubRepoPermsStoreGetFunc{
			defaultHook: i.Get,
		},
		GetByUserFunc: &SubRepoPermsStoreGetByUserFunc{
			defaultHook: i.GetByUser,
		},
		GetByUserAndServiceFunc: &SubRepoPermsStoreGetByUserAndServiceFunc{
			defaultHook: i.GetByUserAndService,
		},
		HandleFunc: &SubRepoPermsStoreHandleFunc{
			defaultHook: i.Handle,
		},
		RepoIDSupportedFunc: &SubRepoPermsStoreRepoIDSupportedFunc{
			defaultHook: i.RepoIDSupported,
		},
		RepoSupportedFunc: &SubRepoPermsStoreRepoSupportedFunc{
			defaultHook: i.RepoSupported,
		},
		TransactFunc: &SubRepoPermsStoreTransactFunc{
			defaultHook: i.Transact,
		},
		UpsertFunc: &SubRepoPermsStoreUpsertFunc{
			defaultHook: i.Upsert,
		},
		UpsertWithSpecFunc: &SubRepoPermsStoreUpsertWithSpecFunc{
			defaultHook: i.UpsertWithSpec,
		},
		WithFunc: &SubRepoPermsStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// SubRepoPermsStoreDeleteByUserFunc describes the behavior when the
// DeleteByUser method of the parent MockSubRepoPermsStore instance is
// invoked.
type SubRepoPermsStoreDeleteByUserFunc struct {
	defaultHook func(context.Context, int32) error
	hooks       []func(context.Context, int32) error
	history     []SubRepoPermsStoreDeleteByUserFuncCall
	mutex       sync.Mutex
}

// DeleteByUser delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) DeleteByUser(v0 context.Context, v1 int32) error {
	r0 := m.DeleteByUserFunc.nextHook()(v0, v1)
	m.DeleteByUserFunc.appendCall(SubRepoPermsStoreDeleteByUserFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteByUser method
// of the parent MockSubRepoPermsStore instance is invoked and the hook
// queue is empty.
func (f *SubRepoPermsStoreDeleteByUserFunc) SetDefaultHook(hook func(context.Context, int32) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteByUser method of the parent MockSubRepoPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreDeleteByUserFunc) PushHook(hook func(context.Context, int32) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreDeleteByUserFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreDeleteByUserFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32) error {
		return r0
	})
}

func (f *SubRepoPermsStoreDeleteByUserFunc) nextHook() func(context.Context, int32) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreDeleteByUserFunc) appendCall(r0 SubRepoPermsStoreDeleteByUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreDeleteByUserFuncCall
// objects describing the invocations of this function.
func (f *SubRepoPermsStoreDeleteByUserFunc) History() []SubRepoPermsStoreDeleteByUserFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreDeleteByUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreDeleteByUserFuncCall is an object that describes an
// invocation of method DeleteByUser on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreDeleteByUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreDeleteByUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreDeleteByUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SubRepoPermsStoreDoneFunc describes the behavior when the Done method of
// the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreDoneFunc struct {
	defaultHook func(error) error
	hooks       []func(error) error
	history     []SubRepoPermsStoreDoneFuncCall
	mutex       sync.Mutex
}

// Done delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Done(v0 error) error {
	r0 := m.DoneFunc.nextHook()(v0)
	m.DoneFunc.appendCall(SubRepoPermsStoreDoneFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Done method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreDoneFunc) SetDefaultHook(hook func(error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Done method of the parent MockSubRepoPermsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SubRepoPermsStoreDoneFunc) PushHook(hook func(error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreDoneFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreDoneFunc) PushReturn(r0 error) {
	f.PushHook(func(error) error {
		return r0
	})
}

func (f *SubRepoPermsStoreDoneFunc) nextHook() func(error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreDoneFunc) appendCall(r0 SubRepoPermsStoreDoneFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreDoneFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreDoneFunc) History() []SubRepoPermsStoreDoneFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreDoneFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreDoneFuncCall is an object that describes an invocation
// of method Done on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreDoneFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreDoneFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreDoneFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SubRepoPermsStoreGetFunc describes the behavior when the Get method of
// the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreGetFunc struct {
	defaultHook func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error)
	hooks       []func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error)
	history     []SubRepoPermsStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Get(v0 context.Context, v1 int32, v2 api.RepoID) (*authz.SubRepoPermissions, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1, v2)
	m.GetFunc.appendCall(SubRepoPermsStoreGetFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreGetFunc) SetDefaultHook(hook func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockSubRepoPermsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SubRepoPermsStoreGetFunc) PushHook(hook func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreGetFunc) SetDefaultReturn(r0 *authz.SubRepoPermissions, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreGetFunc) PushReturn(r0 *authz.SubRepoPermissions, r1 error) {
	f.PushHook(func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreGetFunc) nextHook() func(context.Context, int32, api.RepoID) (*authz.SubRepoPermissions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreGetFunc) appendCall(r0 SubRepoPermsStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreGetFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreGetFunc) History() []SubRepoPermsStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreGetFuncCall is an object that describes an invocation of
// method Get on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *authz.SubRepoPermissions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreGetByUserFunc describes the behavior when the GetByUser
// method of the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreGetByUserFunc struct {
	defaultHook func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error)
	hooks       []func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error)
	history     []SubRepoPermsStoreGetByUserFuncCall
	mutex       sync.Mutex
}

// GetByUser delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) GetByUser(v0 context.Context, v1 int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
	r0, r1 := m.GetByUserFunc.nextHook()(v0, v1)
	m.GetByUserFunc.appendCall(SubRepoPermsStoreGetByUserFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUser method of
// the parent MockSubRepoPermsStore instance is invoked and the hook queue
// is empty.
func (f *SubRepoPermsStoreGetByUserFunc) SetDefaultHook(hook func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUser method of the parent MockSubRepoPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreGetByUserFunc) PushHook(hook func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreGetByUserFunc) SetDefaultReturn(r0 map[api.RepoName]authz.SubRepoPermissions, r1 error) {
	f.SetDefaultHook(func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreGetByUserFunc) PushReturn(r0 map[api.RepoName]authz.SubRepoPermissions, r1 error) {
	f.PushHook(func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreGetByUserFunc) nextHook() func(context.Context, int32) (map[api.RepoName]authz.SubRepoPermissions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreGetByUserFunc) appendCall(r0 SubRepoPermsStoreGetByUserFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreGetByUserFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreGetByUserFunc) History() []SubRepoPermsStoreGetByUserFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreGetByUserFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreGetByUserFuncCall is an object that describes an
// invocation of method GetByUser on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreGetByUserFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoName]authz.SubRepoPermissions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreGetByUserFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreGetByUserFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreGetByUserAndServiceFunc describes the behavior when the
// GetByUserAndService method of the parent MockSubRepoPermsStore instance
// is invoked.
type SubRepoPermsStoreGetByUserAndServiceFunc struct {
	defaultHook func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error)
	hooks       []func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error)
	history     []SubRepoPermsStoreGetByUserAndServiceFuncCall
	mutex       sync.Mutex
}

// GetByUserAndService delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) GetByUserAndService(v0 context.Context, v1 int32, v2 string, v3 string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
	r0, r1 := m.GetByUserAndServiceFunc.nextHook()(v0, v1, v2, v3)
	m.GetByUserAndServiceFunc.appendCall(SubRepoPermsStoreGetByUserAndServiceFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByUserAndService
// method of the parent MockSubRepoPermsStore instance is invoked and the
// hook queue is empty.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) SetDefaultHook(hook func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByUserAndService method of the parent MockSubRepoPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) PushHook(hook func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) SetDefaultReturn(r0 map[api.ExternalRepoSpec]authz.SubRepoPermissions, r1 error) {
	f.SetDefaultHook(func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) PushReturn(r0 map[api.ExternalRepoSpec]authz.SubRepoPermissions, r1 error) {
	f.PushHook(func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreGetByUserAndServiceFunc) nextHook() func(context.Context, int32, string, string) (map[api.ExternalRepoSpec]authz.SubRepoPermissions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreGetByUserAndServiceFunc) appendCall(r0 SubRepoPermsStoreGetByUserAndServiceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SubRepoPermsStoreGetByUserAndServiceFuncCall objects describing the
// invocations of this function.
func (f *SubRepoPermsStoreGetByUserAndServiceFunc) History() []SubRepoPermsStoreGetByUserAndServiceFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreGetByUserAndServiceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreGetByUserAndServiceFuncCall is an object that describes
// an invocation of method GetByUserAndService on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreGetByUserAndServiceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.ExternalRepoSpec]authz.SubRepoPermissions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreGetByUserAndServiceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreGetByUserAndServiceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreHandleFunc describes the behavior when the Handle method
// of the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreHandleFunc struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []SubRepoPermsStoreHandleFuncCall
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(SubRepoPermsStoreHandleFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreHandleFunc) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockSubRepoPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreHandleFunc) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreHandleFunc) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreHandleFunc) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *SubRepoPermsStoreHandleFunc) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreHandleFunc) appendCall(r0 SubRepoPermsStoreHandleFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreHandleFunc) History() []SubRepoPermsStoreHandleFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreHandleFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreHandleFuncCall is an object that describes an invocation
// of method Handle on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreHandleFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreHandleFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreHandleFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SubRepoPermsStoreRepoIDSupportedFunc describes the behavior when the
// RepoIDSupported method of the parent MockSubRepoPermsStore instance is
// invoked.
type SubRepoPermsStoreRepoIDSupportedFunc struct {
	defaultHook func(context.Context, api.RepoID) (bool, error)
	hooks       []func(context.Context, api.RepoID) (bool, error)
	history     []SubRepoPermsStoreRepoIDSupportedFuncCall
	mutex       sync.Mutex
}

// RepoIDSupported delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) RepoIDSupported(v0 context.Context, v1 api.RepoID) (bool, error) {
	r0, r1 := m.RepoIDSupportedFunc.nextHook()(v0, v1)
	m.RepoIDSupportedFunc.appendCall(SubRepoPermsStoreRepoIDSupportedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoIDSupported
// method of the parent MockSubRepoPermsStore instance is invoked and the
// hook queue is empty.
func (f *SubRepoPermsStoreRepoIDSupportedFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoIDSupported method of the parent MockSubRepoPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SubRepoPermsStoreRepoIDSupportedFunc) PushHook(hook func(context.Context, api.RepoID) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreRepoIDSupportedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreRepoIDSupportedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (bool, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreRepoIDSupportedFunc) nextHook() func(context.Context, api.RepoID) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreRepoIDSupportedFunc) appendCall(r0 SubRepoPermsStoreRepoIDSupportedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreRepoIDSupportedFuncCall
// objects describing the invocations of this function.
func (f *SubRepoPermsStoreRepoIDSupportedFunc) History() []SubRepoPermsStoreRepoIDSupportedFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreRepoIDSupportedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreRepoIDSupportedFuncCall is an object that describes an
// invocation of method RepoIDSupported on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreRepoIDSupportedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreRepoIDSupportedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreRepoIDSupportedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreRepoSupportedFunc describes the behavior when the
// RepoSupported method of the parent MockSubRepoPermsStore instance is
// invoked.
type SubRepoPermsStoreRepoSupportedFunc struct {
	defaultHook func(context.Context, api.RepoName) (bool, error)
	hooks       []func(context.Context, api.RepoName) (bool, error)
	history     []SubRepoPermsStoreRepoSupportedFuncCall
	mutex       sync.Mutex
}

// RepoSupported delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) RepoSupported(v0 context.Context, v1 api.RepoName) (bool, error) {
	r0, r1 := m.RepoSupportedFunc.nextHook()(v0, v1)
	m.RepoSupportedFunc.appendCall(SubRepoPermsStoreRepoSupportedFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the RepoSupported method
// of the parent MockSubRepoPermsStore instance is invoked and the hook
// queue is empty.
func (f *SubRepoPermsStoreRepoSupportedFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepoSupported method of the parent MockSubRepoPermsStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreRepoSupportedFunc) PushHook(hook func(context.Context, api.RepoName) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreRepoSupportedFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreRepoSupportedFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (bool, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreRepoSupportedFunc) nextHook() func(context.Context, api.RepoName) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreRepoSupportedFunc) appendCall(r0 SubRepoPermsStoreRepoSupportedFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreRepoSupportedFuncCall
// objects describing the invocations of this function.
func (f *SubRepoPermsStoreRepoSupportedFunc) History() []SubRepoPermsStoreRepoSupportedFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreRepoSupportedFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreRepoSupportedFuncCall is an object that describes an
// invocation of method RepoSupported on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreRepoSupportedFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreRepoSupportedFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreRepoSupportedFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreTransactFunc describes the behavior when the Transact
// method of the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreTransactFunc struct {
	defaultHook func(context.Context) (SubRepoPermsStore, error)
	hooks       []func(context.Context) (SubRepoPermsStore, error)
	history     []SubRepoPermsStoreTransactFuncCall
	mutex       sync.Mutex
}

// Transact delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Transact(v0 context.Context) (SubRepoPermsStore, error) {
	r0, r1 := m.TransactFunc.nextHook()(v0)
	m.TransactFunc.appendCall(SubRepoPermsStoreTransactFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Transact method of
// the parent MockSubRepoPermsStore instance is invoked and the hook queue
// is empty.
func (f *SubRepoPermsStoreTransactFunc) SetDefaultHook(hook func(context.Context) (SubRepoPermsStore, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Transact method of the parent MockSubRepoPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreTransactFunc) PushHook(hook func(context.Context) (SubRepoPermsStore, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreTransactFunc) SetDefaultReturn(r0 SubRepoPermsStore, r1 error) {
	f.SetDefaultHook(func(context.Context) (SubRepoPermsStore, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreTransactFunc) PushReturn(r0 SubRepoPermsStore, r1 error) {
	f.PushHook(func(context.Context) (SubRepoPermsStore, error) {
		return r0, r1
	})
}

func (f *SubRepoPermsStoreTransactFunc) nextHook() func(context.Context) (SubRepoPermsStore, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreTransactFunc) appendCall(r0 SubRepoPermsStoreTransactFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreTransactFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreTransactFunc) History() []SubRepoPermsStoreTransactFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreTransactFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreTransactFuncCall is an object that describes an
// invocation of method Transact on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreTransactFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SubRepoPermsStore
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreTransactFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreTransactFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SubRepoPermsStoreUpsertFunc describes the behavior when the Upsert method
// of the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreUpsertFunc struct {
	defaultHook func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error
	hooks       []func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error
	history     []SubRepoPermsStoreUpsertFuncCall
	mutex       sync.Mutex
}

// Upsert delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) Upsert(v0 context.Context, v1 int32, v2 api.RepoID, v3 authz.SubRepoPermissions) error {
	r0 := m.UpsertFunc.nextHook()(v0, v1, v2, v3)
	m.UpsertFunc.appendCall(SubRepoPermsStoreUpsertFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Upsert method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreUpsertFunc) SetDefaultHook(hook func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upsert method of the parent MockSubRepoPermsStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SubRepoPermsStoreUpsertFunc) PushHook(hook func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreUpsertFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreUpsertFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error {
		return r0
	})
}

func (f *SubRepoPermsStoreUpsertFunc) nextHook() func(context.Context, int32, api.RepoID, authz.SubRepoPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreUpsertFunc) appendCall(r0 SubRepoPermsStoreUpsertFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreUpsertFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreUpsertFunc) History() []SubRepoPermsStoreUpsertFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreUpsertFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreUpsertFuncCall is an object that describes an invocation
// of method Upsert on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreUpsertFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.RepoID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 authz.SubRepoPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreUpsertFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreUpsertFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SubRepoPermsStoreUpsertWithSpecFunc describes the behavior when the
// UpsertWithSpec method of the parent MockSubRepoPermsStore instance is
// invoked.
type SubRepoPermsStoreUpsertWithSpecFunc struct {
	defaultHook func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error
	hooks       []func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error
	history     []SubRepoPermsStoreUpsertWithSpecFuncCall
	mutex       sync.Mutex
}

// UpsertWithSpec delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) UpsertWithSpec(v0 context.Context, v1 int32, v2 api.ExternalRepoSpec, v3 authz.SubRepoPermissions) error {
	r0 := m.UpsertWithSpecFunc.nextHook()(v0, v1, v2, v3)
	m.UpsertWithSpecFunc.appendCall(SubRepoPermsStoreUpsertWithSpecFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the UpsertWithSpec
// method of the parent MockSubRepoPermsStore instance is invoked and the
// hook queue is empty.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) SetDefaultHook(hook func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertWithSpec method of the parent MockSubRepoPermsStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) PushHook(hook func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error {
		return r0
	})
}

func (f *SubRepoPermsStoreUpsertWithSpecFunc) nextHook() func(context.Context, int32, api.ExternalRepoSpec, authz.SubRepoPermissions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreUpsertWithSpecFunc) appendCall(r0 SubRepoPermsStoreUpsertWithSpecFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreUpsertWithSpecFuncCall
// objects describing the invocations of this function.
func (f *SubRepoPermsStoreUpsertWithSpecFunc) History() []SubRepoPermsStoreUpsertWithSpecFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreUpsertWithSpecFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreUpsertWithSpecFuncCall is an object that describes an
// invocation of method UpsertWithSpec on an instance of
// MockSubRepoPermsStore.
type SubRepoPermsStoreUpsertWithSpecFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int32
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.ExternalRepoSpec
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 authz.SubRepoPermissions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreUpsertWithSpecFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreUpsertWithSpecFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// SubRepoPermsStoreWithFunc describes the behavior when the With method of
// the parent MockSubRepoPermsStore instance is invoked.
type SubRepoPermsStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) SubRepoPermsStore
	hooks       []func(basestore.ShareableStore) SubRepoPermsStore
	history     []SubRepoPermsStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSubRepoPermsStore) With(v0 basestore.ShareableStore) SubRepoPermsStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(SubRepoPermsStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockSubRepoPermsStore instance is invoked and the hook queue is
// empty.
func (f *SubRepoPermsStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) SubRepoPermsStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockSubRepoPermsStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SubRepoPermsStoreWithFunc) PushHook(hook func(basestore.ShareableStore) SubRepoPermsStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubRepoPermsStoreWithFunc) SetDefaultReturn(r0 SubRepoPermsStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) SubRepoPermsStore {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubRepoPermsStoreWithFunc) PushReturn(r0 SubRepoPermsStore) {
	f.PushHook(func(basestore.ShareableStore) SubRepoPermsStore {
		return r0
	})
}

func (f *SubRepoPermsStoreWithFunc) nextHook() func(basestore.ShareableStore) SubRepoPermsStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubRepoPermsStoreWithFunc) appendCall(r0 SubRepoPermsStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SubRepoPermsStoreWithFuncCall objects
// describing the invocations of this function.
func (f *SubRepoPermsStoreWithFunc) History() []SubRepoPermsStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]SubRepoPermsStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubRepoPermsStoreWithFuncCall is an object that describes an invocation
// of method With on an instance of MockSubRepoPermsStore.
type SubRepoPermsStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 SubRepoPermsStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubRepoPermsStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubRepoPermsStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
