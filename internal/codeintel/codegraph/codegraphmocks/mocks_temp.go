// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package codegraphmocks

import (
	"context"
	"sync"
	"time"

	scip "github.com/sourcegraph/scip/bindings/go/scip"
	codegraph "github.com/sourcegraph/sourcegraph/internal/codeintel/codegraph"
)

// MockDataStore is a mock implementation of the DataStore interface (from
// the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codegraph) used for
// unit testing.
type MockDataStore struct {
	// DeleteAbandonedSchemaVersionsRecordsFunc is an instance of a mock
	// function object controlling the behavior of the method
	// DeleteAbandonedSchemaVersionsRecords.
	DeleteAbandonedSchemaVersionsRecordsFunc *DataStoreDeleteAbandonedSchemaVersionsRecordsFunc
	// DeleteLsifDataByUploadIdsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteLsifDataByUploadIds.
	DeleteLsifDataByUploadIdsFunc *DataStoreDeleteLsifDataByUploadIdsFunc
	// DeleteUnreferencedDocumentsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// DeleteUnreferencedDocuments.
	DeleteUnreferencedDocumentsFunc *DataStoreDeleteUnreferencedDocumentsFunc
	// IDsWithMetaFunc is an instance of a mock function object controlling
	// the behavior of the method IDsWithMeta.
	IDsWithMetaFunc *DataStoreIDsWithMetaFunc
	// InsertMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method InsertMetadata.
	InsertMetadataFunc *DataStoreInsertMetadataFunc
	// NewPreciseSCIPWriterFunc is an instance of a mock function object
	// controlling the behavior of the method NewPreciseSCIPWriter.
	NewPreciseSCIPWriterFunc *DataStoreNewPreciseSCIPWriterFunc
	// NewSyntacticSCIPWriterFunc is an instance of a mock function object
	// controlling the behavior of the method NewSyntacticSCIPWriter.
	NewSyntacticSCIPWriterFunc *DataStoreNewSyntacticSCIPWriterFunc
	// ReconcileCandidatesFunc is an instance of a mock function object
	// controlling the behavior of the method ReconcileCandidates.
	ReconcileCandidatesFunc *DataStoreReconcileCandidatesFunc
	// ReconcileCandidatesWithTimeFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ReconcileCandidatesWithTime.
	ReconcileCandidatesWithTimeFunc *DataStoreReconcileCandidatesWithTimeFunc
	// WithTransactionFunc is an instance of a mock function object
	// controlling the behavior of the method WithTransaction.
	WithTransactionFunc *DataStoreWithTransactionFunc
}

// NewMockDataStore creates a new mock of the DataStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockDataStore() *MockDataStore {
	return &MockDataStore{
		DeleteAbandonedSchemaVersionsRecordsFunc: &DataStoreDeleteAbandonedSchemaVersionsRecordsFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		DeleteLsifDataByUploadIdsFunc: &DataStoreDeleteLsifDataByUploadIdsFunc{
			defaultHook: func(context.Context, ...int) (r0 error) {
				return
			},
		},
		DeleteUnreferencedDocumentsFunc: &DataStoreDeleteUnreferencedDocumentsFunc{
			defaultHook: func(context.Context, int, time.Duration, time.Time) (r0 int, r1 int, r2 error) {
				return
			},
		},
		IDsWithMetaFunc: &DataStoreIDsWithMetaFunc{
			defaultHook: func(context.Context, []int) (r0 []int, r1 error) {
				return
			},
		},
		InsertMetadataFunc: &DataStoreInsertMetadataFunc{
			defaultHook: func(context.Context, int, codegraph.ProcessedMetadata) (r0 error) {
				return
			},
		},
		NewPreciseSCIPWriterFunc: &DataStoreNewPreciseSCIPWriterFunc{
			defaultHook: func(context.Context, int) (r0 codegraph.SCIPWriter, r1 error) {
				return
			},
		},
		NewSyntacticSCIPWriterFunc: &DataStoreNewSyntacticSCIPWriterFunc{
			defaultHook: func(int) (r0 codegraph.SCIPWriter, r1 error) {
				return
			},
		},
		ReconcileCandidatesFunc: &DataStoreReconcileCandidatesFunc{
			defaultHook: func(context.Context, int) (r0 []int, r1 error) {
				return
			},
		},
		ReconcileCandidatesWithTimeFunc: &DataStoreReconcileCandidatesWithTimeFunc{
			defaultHook: func(context.Context, int, time.Time) (r0 []int, r1 error) {
				return
			},
		},
		WithTransactionFunc: &DataStoreWithTransactionFunc{
			defaultHook: func(context.Context, func(s codegraph.DataStore) error) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockDataStore creates a new mock of the DataStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockDataStore() *MockDataStore {
	return &MockDataStore{
		DeleteAbandonedSchemaVersionsRecordsFunc: &DataStoreDeleteAbandonedSchemaVersionsRecordsFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockDataStore.DeleteAbandonedSchemaVersionsRecords")
			},
		},
		DeleteLsifDataByUploadIdsFunc: &DataStoreDeleteLsifDataByUploadIdsFunc{
			defaultHook: func(context.Context, ...int) error {
				panic("unexpected invocation of MockDataStore.DeleteLsifDataByUploadIds")
			},
		},
		DeleteUnreferencedDocumentsFunc: &DataStoreDeleteUnreferencedDocumentsFunc{
			defaultHook: func(context.Context, int, time.Duration, time.Time) (int, int, error) {
				panic("unexpected invocation of MockDataStore.DeleteUnreferencedDocuments")
			},
		},
		IDsWithMetaFunc: &DataStoreIDsWithMetaFunc{
			defaultHook: func(context.Context, []int) ([]int, error) {
				panic("unexpected invocation of MockDataStore.IDsWithMeta")
			},
		},
		InsertMetadataFunc: &DataStoreInsertMetadataFunc{
			defaultHook: func(context.Context, int, codegraph.ProcessedMetadata) error {
				panic("unexpected invocation of MockDataStore.InsertMetadata")
			},
		},
		NewPreciseSCIPWriterFunc: &DataStoreNewPreciseSCIPWriterFunc{
			defaultHook: func(context.Context, int) (codegraph.SCIPWriter, error) {
				panic("unexpected invocation of MockDataStore.NewPreciseSCIPWriter")
			},
		},
		NewSyntacticSCIPWriterFunc: &DataStoreNewSyntacticSCIPWriterFunc{
			defaultHook: func(int) (codegraph.SCIPWriter, error) {
				panic("unexpected invocation of MockDataStore.NewSyntacticSCIPWriter")
			},
		},
		ReconcileCandidatesFunc: &DataStoreReconcileCandidatesFunc{
			defaultHook: func(context.Context, int) ([]int, error) {
				panic("unexpected invocation of MockDataStore.ReconcileCandidates")
			},
		},
		ReconcileCandidatesWithTimeFunc: &DataStoreReconcileCandidatesWithTimeFunc{
			defaultHook: func(context.Context, int, time.Time) ([]int, error) {
				panic("unexpected invocation of MockDataStore.ReconcileCandidatesWithTime")
			},
		},
		WithTransactionFunc: &DataStoreWithTransactionFunc{
			defaultHook: func(context.Context, func(s codegraph.DataStore) error) error {
				panic("unexpected invocation of MockDataStore.WithTransaction")
			},
		},
	}
}

// NewMockDataStoreFrom creates a new mock of the MockDataStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockDataStoreFrom(i codegraph.DataStore) *MockDataStore {
	return &MockDataStore{
		DeleteAbandonedSchemaVersionsRecordsFunc: &DataStoreDeleteAbandonedSchemaVersionsRecordsFunc{
			defaultHook: i.DeleteAbandonedSchemaVersionsRecords,
		},
		DeleteLsifDataByUploadIdsFunc: &DataStoreDeleteLsifDataByUploadIdsFunc{
			defaultHook: i.DeleteLsifDataByUploadIds,
		},
		DeleteUnreferencedDocumentsFunc: &DataStoreDeleteUnreferencedDocumentsFunc{
			defaultHook: i.DeleteUnreferencedDocuments,
		},
		IDsWithMetaFunc: &DataStoreIDsWithMetaFunc{
			defaultHook: i.IDsWithMeta,
		},
		InsertMetadataFunc: &DataStoreInsertMetadataFunc{
			defaultHook: i.InsertMetadata,
		},
		NewPreciseSCIPWriterFunc: &DataStoreNewPreciseSCIPWriterFunc{
			defaultHook: i.NewPreciseSCIPWriter,
		},
		NewSyntacticSCIPWriterFunc: &DataStoreNewSyntacticSCIPWriterFunc{
			defaultHook: i.NewSyntacticSCIPWriter,
		},
		ReconcileCandidatesFunc: &DataStoreReconcileCandidatesFunc{
			defaultHook: i.ReconcileCandidates,
		},
		ReconcileCandidatesWithTimeFunc: &DataStoreReconcileCandidatesWithTimeFunc{
			defaultHook: i.ReconcileCandidatesWithTime,
		},
		WithTransactionFunc: &DataStoreWithTransactionFunc{
			defaultHook: i.WithTransaction,
		},
	}
}

// DataStoreDeleteAbandonedSchemaVersionsRecordsFunc describes the behavior
// when the DeleteAbandonedSchemaVersionsRecords method of the parent
// MockDataStore instance is invoked.
type DataStoreDeleteAbandonedSchemaVersionsRecordsFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall
	mutex       sync.Mutex
}

// DeleteAbandonedSchemaVersionsRecords delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockDataStore) DeleteAbandonedSchemaVersionsRecords(v0 context.Context) (int, error) {
	r0, r1 := m.DeleteAbandonedSchemaVersionsRecordsFunc.nextHook()(v0)
	m.DeleteAbandonedSchemaVersionsRecordsFunc.appendCall(DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// DeleteAbandonedSchemaVersionsRecords method of the parent MockDataStore
// instance is invoked and the hook queue is empty.
func (f *DataStoreDeleteAbandonedSchemaVersionsRecordsFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteAbandonedSchemaVersionsRecords method of the parent MockDataStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *DataStoreDeleteAbandonedSchemaVersionsRecordsFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreDeleteAbandonedSchemaVersionsRecordsFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreDeleteAbandonedSchemaVersionsRecordsFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *DataStoreDeleteAbandonedSchemaVersionsRecordsFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreDeleteAbandonedSchemaVersionsRecordsFunc) appendCall(r0 DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall objects describing
// the invocations of this function.
func (f *DataStoreDeleteAbandonedSchemaVersionsRecordsFunc) History() []DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall is an object that
// describes an invocation of method DeleteAbandonedSchemaVersionsRecords on
// an instance of MockDataStore.
type DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreDeleteAbandonedSchemaVersionsRecordsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataStoreDeleteLsifDataByUploadIdsFunc describes the behavior when the
// DeleteLsifDataByUploadIds method of the parent MockDataStore instance is
// invoked.
type DataStoreDeleteLsifDataByUploadIdsFunc struct {
	defaultHook func(context.Context, ...int) error
	hooks       []func(context.Context, ...int) error
	history     []DataStoreDeleteLsifDataByUploadIdsFuncCall
	mutex       sync.Mutex
}

// DeleteLsifDataByUploadIds delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDataStore) DeleteLsifDataByUploadIds(v0 context.Context, v1 ...int) error {
	r0 := m.DeleteLsifDataByUploadIdsFunc.nextHook()(v0, v1...)
	m.DeleteLsifDataByUploadIdsFunc.appendCall(DataStoreDeleteLsifDataByUploadIdsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// DeleteLsifDataByUploadIds method of the parent MockDataStore instance is
// invoked and the hook queue is empty.
func (f *DataStoreDeleteLsifDataByUploadIdsFunc) SetDefaultHook(hook func(context.Context, ...int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteLsifDataByUploadIds method of the parent MockDataStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DataStoreDeleteLsifDataByUploadIdsFunc) PushHook(hook func(context.Context, ...int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreDeleteLsifDataByUploadIdsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreDeleteLsifDataByUploadIdsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...int) error {
		return r0
	})
}

func (f *DataStoreDeleteLsifDataByUploadIdsFunc) nextHook() func(context.Context, ...int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreDeleteLsifDataByUploadIdsFunc) appendCall(r0 DataStoreDeleteLsifDataByUploadIdsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataStoreDeleteLsifDataByUploadIdsFuncCall
// objects describing the invocations of this function.
func (f *DataStoreDeleteLsifDataByUploadIdsFunc) History() []DataStoreDeleteLsifDataByUploadIdsFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreDeleteLsifDataByUploadIdsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreDeleteLsifDataByUploadIdsFuncCall is an object that describes an
// invocation of method DeleteLsifDataByUploadIds on an instance of
// MockDataStore.
type DataStoreDeleteLsifDataByUploadIdsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c DataStoreDeleteLsifDataByUploadIdsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreDeleteLsifDataByUploadIdsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DataStoreDeleteUnreferencedDocumentsFunc describes the behavior when the
// DeleteUnreferencedDocuments method of the parent MockDataStore instance
// is invoked.
type DataStoreDeleteUnreferencedDocumentsFunc struct {
	defaultHook func(context.Context, int, time.Duration, time.Time) (int, int, error)
	hooks       []func(context.Context, int, time.Duration, time.Time) (int, int, error)
	history     []DataStoreDeleteUnreferencedDocumentsFuncCall
	mutex       sync.Mutex
}

// DeleteUnreferencedDocuments delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDataStore) DeleteUnreferencedDocuments(v0 context.Context, v1 int, v2 time.Duration, v3 time.Time) (int, int, error) {
	r0, r1, r2 := m.DeleteUnreferencedDocumentsFunc.nextHook()(v0, v1, v2, v3)
	m.DeleteUnreferencedDocumentsFunc.appendCall(DataStoreDeleteUnreferencedDocumentsFuncCall{v0, v1, v2, v3, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// DeleteUnreferencedDocuments method of the parent MockDataStore instance
// is invoked and the hook queue is empty.
func (f *DataStoreDeleteUnreferencedDocumentsFunc) SetDefaultHook(hook func(context.Context, int, time.Duration, time.Time) (int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUnreferencedDocuments method of the parent MockDataStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DataStoreDeleteUnreferencedDocumentsFunc) PushHook(hook func(context.Context, int, time.Duration, time.Time) (int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreDeleteUnreferencedDocumentsFunc) SetDefaultReturn(r0 int, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, time.Duration, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreDeleteUnreferencedDocumentsFunc) PushReturn(r0 int, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, time.Duration, time.Time) (int, int, error) {
		return r0, r1, r2
	})
}

func (f *DataStoreDeleteUnreferencedDocumentsFunc) nextHook() func(context.Context, int, time.Duration, time.Time) (int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreDeleteUnreferencedDocumentsFunc) appendCall(r0 DataStoreDeleteUnreferencedDocumentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DataStoreDeleteUnreferencedDocumentsFuncCall objects describing the
// invocations of this function.
func (f *DataStoreDeleteUnreferencedDocumentsFunc) History() []DataStoreDeleteUnreferencedDocumentsFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreDeleteUnreferencedDocumentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreDeleteUnreferencedDocumentsFuncCall is an object that describes
// an invocation of method DeleteUnreferencedDocuments on an instance of
// MockDataStore.
type DataStoreDeleteUnreferencedDocumentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreDeleteUnreferencedDocumentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreDeleteUnreferencedDocumentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// DataStoreIDsWithMetaFunc describes the behavior when the IDsWithMeta
// method of the parent MockDataStore instance is invoked.
type DataStoreIDsWithMetaFunc struct {
	defaultHook func(context.Context, []int) ([]int, error)
	hooks       []func(context.Context, []int) ([]int, error)
	history     []DataStoreIDsWithMetaFuncCall
	mutex       sync.Mutex
}

// IDsWithMeta delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockDataStore) IDsWithMeta(v0 context.Context, v1 []int) ([]int, error) {
	r0, r1 := m.IDsWithMetaFunc.nextHook()(v0, v1)
	m.IDsWithMetaFunc.appendCall(DataStoreIDsWithMetaFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IDsWithMeta method
// of the parent MockDataStore instance is invoked and the hook queue is
// empty.
func (f *DataStoreIDsWithMetaFunc) SetDefaultHook(hook func(context.Context, []int) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IDsWithMeta method of the parent MockDataStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *DataStoreIDsWithMetaFunc) PushHook(hook func(context.Context, []int) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreIDsWithMetaFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreIDsWithMetaFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, []int) ([]int, error) {
		return r0, r1
	})
}

func (f *DataStoreIDsWithMetaFunc) nextHook() func(context.Context, []int) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreIDsWithMetaFunc) appendCall(r0 DataStoreIDsWithMetaFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataStoreIDsWithMetaFuncCall objects
// describing the invocations of this function.
func (f *DataStoreIDsWithMetaFunc) History() []DataStoreIDsWithMetaFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreIDsWithMetaFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreIDsWithMetaFuncCall is an object that describes an invocation of
// method IDsWithMeta on an instance of MockDataStore.
type DataStoreIDsWithMetaFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreIDsWithMetaFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreIDsWithMetaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataStoreInsertMetadataFunc describes the behavior when the
// InsertMetadata method of the parent MockDataStore instance is invoked.
type DataStoreInsertMetadataFunc struct {
	defaultHook func(context.Context, int, codegraph.ProcessedMetadata) error
	hooks       []func(context.Context, int, codegraph.ProcessedMetadata) error
	history     []DataStoreInsertMetadataFuncCall
	mutex       sync.Mutex
}

// InsertMetadata delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDataStore) InsertMetadata(v0 context.Context, v1 int, v2 codegraph.ProcessedMetadata) error {
	r0 := m.InsertMetadataFunc.nextHook()(v0, v1, v2)
	m.InsertMetadataFunc.appendCall(DataStoreInsertMetadataFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the InsertMetadata
// method of the parent MockDataStore instance is invoked and the hook queue
// is empty.
func (f *DataStoreInsertMetadataFunc) SetDefaultHook(hook func(context.Context, int, codegraph.ProcessedMetadata) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertMetadata method of the parent MockDataStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DataStoreInsertMetadataFunc) PushHook(hook func(context.Context, int, codegraph.ProcessedMetadata) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreInsertMetadataFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, codegraph.ProcessedMetadata) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreInsertMetadataFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, codegraph.ProcessedMetadata) error {
		return r0
	})
}

func (f *DataStoreInsertMetadataFunc) nextHook() func(context.Context, int, codegraph.ProcessedMetadata) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreInsertMetadataFunc) appendCall(r0 DataStoreInsertMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataStoreInsertMetadataFuncCall objects
// describing the invocations of this function.
func (f *DataStoreInsertMetadataFunc) History() []DataStoreInsertMetadataFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreInsertMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreInsertMetadataFuncCall is an object that describes an invocation
// of method InsertMetadata on an instance of MockDataStore.
type DataStoreInsertMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 codegraph.ProcessedMetadata
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreInsertMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreInsertMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DataStoreNewPreciseSCIPWriterFunc describes the behavior when the
// NewPreciseSCIPWriter method of the parent MockDataStore instance is
// invoked.
type DataStoreNewPreciseSCIPWriterFunc struct {
	defaultHook func(context.Context, int) (codegraph.SCIPWriter, error)
	hooks       []func(context.Context, int) (codegraph.SCIPWriter, error)
	history     []DataStoreNewPreciseSCIPWriterFuncCall
	mutex       sync.Mutex
}

// NewPreciseSCIPWriter delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDataStore) NewPreciseSCIPWriter(v0 context.Context, v1 int) (codegraph.SCIPWriter, error) {
	r0, r1 := m.NewPreciseSCIPWriterFunc.nextHook()(v0, v1)
	m.NewPreciseSCIPWriterFunc.appendCall(DataStoreNewPreciseSCIPWriterFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the NewPreciseSCIPWriter
// method of the parent MockDataStore instance is invoked and the hook queue
// is empty.
func (f *DataStoreNewPreciseSCIPWriterFunc) SetDefaultHook(hook func(context.Context, int) (codegraph.SCIPWriter, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewPreciseSCIPWriter method of the parent MockDataStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataStoreNewPreciseSCIPWriterFunc) PushHook(hook func(context.Context, int) (codegraph.SCIPWriter, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreNewPreciseSCIPWriterFunc) SetDefaultReturn(r0 codegraph.SCIPWriter, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (codegraph.SCIPWriter, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreNewPreciseSCIPWriterFunc) PushReturn(r0 codegraph.SCIPWriter, r1 error) {
	f.PushHook(func(context.Context, int) (codegraph.SCIPWriter, error) {
		return r0, r1
	})
}

func (f *DataStoreNewPreciseSCIPWriterFunc) nextHook() func(context.Context, int) (codegraph.SCIPWriter, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreNewPreciseSCIPWriterFunc) appendCall(r0 DataStoreNewPreciseSCIPWriterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataStoreNewPreciseSCIPWriterFuncCall
// objects describing the invocations of this function.
func (f *DataStoreNewPreciseSCIPWriterFunc) History() []DataStoreNewPreciseSCIPWriterFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreNewPreciseSCIPWriterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreNewPreciseSCIPWriterFuncCall is an object that describes an
// invocation of method NewPreciseSCIPWriter on an instance of
// MockDataStore.
type DataStoreNewPreciseSCIPWriterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 codegraph.SCIPWriter
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreNewPreciseSCIPWriterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreNewPreciseSCIPWriterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataStoreNewSyntacticSCIPWriterFunc describes the behavior when the
// NewSyntacticSCIPWriter method of the parent MockDataStore instance is
// invoked.
type DataStoreNewSyntacticSCIPWriterFunc struct {
	defaultHook func(int) (codegraph.SCIPWriter, error)
	hooks       []func(int) (codegraph.SCIPWriter, error)
	history     []DataStoreNewSyntacticSCIPWriterFuncCall
	mutex       sync.Mutex
}

// NewSyntacticSCIPWriter delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockDataStore) NewSyntacticSCIPWriter(v0 int) (codegraph.SCIPWriter, error) {
	r0, r1 := m.NewSyntacticSCIPWriterFunc.nextHook()(v0)
	m.NewSyntacticSCIPWriterFunc.appendCall(DataStoreNewSyntacticSCIPWriterFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// NewSyntacticSCIPWriter method of the parent MockDataStore instance is
// invoked and the hook queue is empty.
func (f *DataStoreNewSyntacticSCIPWriterFunc) SetDefaultHook(hook func(int) (codegraph.SCIPWriter, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NewSyntacticSCIPWriter method of the parent MockDataStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DataStoreNewSyntacticSCIPWriterFunc) PushHook(hook func(int) (codegraph.SCIPWriter, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreNewSyntacticSCIPWriterFunc) SetDefaultReturn(r0 codegraph.SCIPWriter, r1 error) {
	f.SetDefaultHook(func(int) (codegraph.SCIPWriter, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreNewSyntacticSCIPWriterFunc) PushReturn(r0 codegraph.SCIPWriter, r1 error) {
	f.PushHook(func(int) (codegraph.SCIPWriter, error) {
		return r0, r1
	})
}

func (f *DataStoreNewSyntacticSCIPWriterFunc) nextHook() func(int) (codegraph.SCIPWriter, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreNewSyntacticSCIPWriterFunc) appendCall(r0 DataStoreNewSyntacticSCIPWriterFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataStoreNewSyntacticSCIPWriterFuncCall
// objects describing the invocations of this function.
func (f *DataStoreNewSyntacticSCIPWriterFunc) History() []DataStoreNewSyntacticSCIPWriterFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreNewSyntacticSCIPWriterFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreNewSyntacticSCIPWriterFuncCall is an object that describes an
// invocation of method NewSyntacticSCIPWriter on an instance of
// MockDataStore.
type DataStoreNewSyntacticSCIPWriterFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 codegraph.SCIPWriter
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreNewSyntacticSCIPWriterFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreNewSyntacticSCIPWriterFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataStoreReconcileCandidatesFunc describes the behavior when the
// ReconcileCandidates method of the parent MockDataStore instance is
// invoked.
type DataStoreReconcileCandidatesFunc struct {
	defaultHook func(context.Context, int) ([]int, error)
	hooks       []func(context.Context, int) ([]int, error)
	history     []DataStoreReconcileCandidatesFuncCall
	mutex       sync.Mutex
}

// ReconcileCandidates delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDataStore) ReconcileCandidates(v0 context.Context, v1 int) ([]int, error) {
	r0, r1 := m.ReconcileCandidatesFunc.nextHook()(v0, v1)
	m.ReconcileCandidatesFunc.appendCall(DataStoreReconcileCandidatesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReconcileCandidates
// method of the parent MockDataStore instance is invoked and the hook queue
// is empty.
func (f *DataStoreReconcileCandidatesFunc) SetDefaultHook(hook func(context.Context, int) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReconcileCandidates method of the parent MockDataStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DataStoreReconcileCandidatesFunc) PushHook(hook func(context.Context, int) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreReconcileCandidatesFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreReconcileCandidatesFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, int) ([]int, error) {
		return r0, r1
	})
}

func (f *DataStoreReconcileCandidatesFunc) nextHook() func(context.Context, int) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreReconcileCandidatesFunc) appendCall(r0 DataStoreReconcileCandidatesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataStoreReconcileCandidatesFuncCall
// objects describing the invocations of this function.
func (f *DataStoreReconcileCandidatesFunc) History() []DataStoreReconcileCandidatesFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreReconcileCandidatesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreReconcileCandidatesFuncCall is an object that describes an
// invocation of method ReconcileCandidates on an instance of MockDataStore.
type DataStoreReconcileCandidatesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreReconcileCandidatesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreReconcileCandidatesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataStoreReconcileCandidatesWithTimeFunc describes the behavior when the
// ReconcileCandidatesWithTime method of the parent MockDataStore instance
// is invoked.
type DataStoreReconcileCandidatesWithTimeFunc struct {
	defaultHook func(context.Context, int, time.Time) ([]int, error)
	hooks       []func(context.Context, int, time.Time) ([]int, error)
	history     []DataStoreReconcileCandidatesWithTimeFuncCall
	mutex       sync.Mutex
}

// ReconcileCandidatesWithTime delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDataStore) ReconcileCandidatesWithTime(v0 context.Context, v1 int, v2 time.Time) ([]int, error) {
	r0, r1 := m.ReconcileCandidatesWithTimeFunc.nextHook()(v0, v1, v2)
	m.ReconcileCandidatesWithTimeFunc.appendCall(DataStoreReconcileCandidatesWithTimeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ReconcileCandidatesWithTime method of the parent MockDataStore instance
// is invoked and the hook queue is empty.
func (f *DataStoreReconcileCandidatesWithTimeFunc) SetDefaultHook(hook func(context.Context, int, time.Time) ([]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReconcileCandidatesWithTime method of the parent MockDataStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DataStoreReconcileCandidatesWithTimeFunc) PushHook(hook func(context.Context, int, time.Time) ([]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreReconcileCandidatesWithTimeFunc) SetDefaultReturn(r0 []int, r1 error) {
	f.SetDefaultHook(func(context.Context, int, time.Time) ([]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreReconcileCandidatesWithTimeFunc) PushReturn(r0 []int, r1 error) {
	f.PushHook(func(context.Context, int, time.Time) ([]int, error) {
		return r0, r1
	})
}

func (f *DataStoreReconcileCandidatesWithTimeFunc) nextHook() func(context.Context, int, time.Time) ([]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreReconcileCandidatesWithTimeFunc) appendCall(r0 DataStoreReconcileCandidatesWithTimeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DataStoreReconcileCandidatesWithTimeFuncCall objects describing the
// invocations of this function.
func (f *DataStoreReconcileCandidatesWithTimeFunc) History() []DataStoreReconcileCandidatesWithTimeFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreReconcileCandidatesWithTimeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreReconcileCandidatesWithTimeFuncCall is an object that describes
// an invocation of method ReconcileCandidatesWithTime on an instance of
// MockDataStore.
type DataStoreReconcileCandidatesWithTimeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreReconcileCandidatesWithTimeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreReconcileCandidatesWithTimeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DataStoreWithTransactionFunc describes the behavior when the
// WithTransaction method of the parent MockDataStore instance is invoked.
type DataStoreWithTransactionFunc struct {
	defaultHook func(context.Context, func(s codegraph.DataStore) error) error
	hooks       []func(context.Context, func(s codegraph.DataStore) error) error
	history     []DataStoreWithTransactionFuncCall
	mutex       sync.Mutex
}

// WithTransaction delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDataStore) WithTransaction(v0 context.Context, v1 func(s codegraph.DataStore) error) error {
	r0 := m.WithTransactionFunc.nextHook()(v0, v1)
	m.WithTransactionFunc.appendCall(DataStoreWithTransactionFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithTransaction
// method of the parent MockDataStore instance is invoked and the hook queue
// is empty.
func (f *DataStoreWithTransactionFunc) SetDefaultHook(hook func(context.Context, func(s codegraph.DataStore) error) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithTransaction method of the parent MockDataStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DataStoreWithTransactionFunc) PushHook(hook func(context.Context, func(s codegraph.DataStore) error) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *DataStoreWithTransactionFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, func(s codegraph.DataStore) error) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *DataStoreWithTransactionFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, func(s codegraph.DataStore) error) error {
		return r0
	})
}

func (f *DataStoreWithTransactionFunc) nextHook() func(context.Context, func(s codegraph.DataStore) error) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DataStoreWithTransactionFunc) appendCall(r0 DataStoreWithTransactionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DataStoreWithTransactionFuncCall objects
// describing the invocations of this function.
func (f *DataStoreWithTransactionFunc) History() []DataStoreWithTransactionFuncCall {
	f.mutex.Lock()
	history := make([]DataStoreWithTransactionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DataStoreWithTransactionFuncCall is an object that describes an
// invocation of method WithTransaction on an instance of MockDataStore.
type DataStoreWithTransactionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 func(s codegraph.DataStore) error
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DataStoreWithTransactionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DataStoreWithTransactionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// MockSCIPWriter is a mock implementation of the SCIPWriter interface (from
// the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codegraph) used for
// unit testing.
type MockSCIPWriter struct {
	// FlushFunc is an instance of a mock function object controlling the
	// behavior of the method Flush.
	FlushFunc *SCIPWriterFlushFunc
	// InsertDocumentFunc is an instance of a mock function object
	// controlling the behavior of the method InsertDocument.
	InsertDocumentFunc *SCIPWriterInsertDocumentFunc
}

// NewMockSCIPWriter creates a new mock of the SCIPWriter interface. All
// methods return zero values for all results, unless overwritten.
func NewMockSCIPWriter() *MockSCIPWriter {
	return &MockSCIPWriter{
		FlushFunc: &SCIPWriterFlushFunc{
			defaultHook: func(context.Context) (r0 uint32, r1 error) {
				return
			},
		},
		InsertDocumentFunc: &SCIPWriterInsertDocumentFunc{
			defaultHook: func(context.Context, string, *scip.Document) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockSCIPWriter creates a new mock of the SCIPWriter interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockSCIPWriter() *MockSCIPWriter {
	return &MockSCIPWriter{
		FlushFunc: &SCIPWriterFlushFunc{
			defaultHook: func(context.Context) (uint32, error) {
				panic("unexpected invocation of MockSCIPWriter.Flush")
			},
		},
		InsertDocumentFunc: &SCIPWriterInsertDocumentFunc{
			defaultHook: func(context.Context, string, *scip.Document) error {
				panic("unexpected invocation of MockSCIPWriter.InsertDocument")
			},
		},
	}
}

// NewMockSCIPWriterFrom creates a new mock of the MockSCIPWriter interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockSCIPWriterFrom(i codegraph.SCIPWriter) *MockSCIPWriter {
	return &MockSCIPWriter{
		FlushFunc: &SCIPWriterFlushFunc{
			defaultHook: i.Flush,
		},
		InsertDocumentFunc: &SCIPWriterInsertDocumentFunc{
			defaultHook: i.InsertDocument,
		},
	}
}

// SCIPWriterFlushFunc describes the behavior when the Flush method of the
// parent MockSCIPWriter instance is invoked.
type SCIPWriterFlushFunc struct {
	defaultHook func(context.Context) (uint32, error)
	hooks       []func(context.Context) (uint32, error)
	history     []SCIPWriterFlushFuncCall
	mutex       sync.Mutex
}

// Flush delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockSCIPWriter) Flush(v0 context.Context) (uint32, error) {
	r0, r1 := m.FlushFunc.nextHook()(v0)
	m.FlushFunc.appendCall(SCIPWriterFlushFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Flush method of the
// parent MockSCIPWriter instance is invoked and the hook queue is empty.
func (f *SCIPWriterFlushFunc) SetDefaultHook(hook func(context.Context) (uint32, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Flush method of the parent MockSCIPWriter instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SCIPWriterFlushFunc) PushHook(hook func(context.Context) (uint32, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SCIPWriterFlushFunc) SetDefaultReturn(r0 uint32, r1 error) {
	f.SetDefaultHook(func(context.Context) (uint32, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SCIPWriterFlushFunc) PushReturn(r0 uint32, r1 error) {
	f.PushHook(func(context.Context) (uint32, error) {
		return r0, r1
	})
}

func (f *SCIPWriterFlushFunc) nextHook() func(context.Context) (uint32, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SCIPWriterFlushFunc) appendCall(r0 SCIPWriterFlushFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SCIPWriterFlushFuncCall objects describing
// the invocations of this function.
func (f *SCIPWriterFlushFunc) History() []SCIPWriterFlushFuncCall {
	f.mutex.Lock()
	history := make([]SCIPWriterFlushFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SCIPWriterFlushFuncCall is an object that describes an invocation of
// method Flush on an instance of MockSCIPWriter.
type SCIPWriterFlushFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 uint32
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SCIPWriterFlushFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SCIPWriterFlushFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// SCIPWriterInsertDocumentFunc describes the behavior when the
// InsertDocument method of the parent MockSCIPWriter instance is invoked.
type SCIPWriterInsertDocumentFunc struct {
	defaultHook func(context.Context, string, *scip.Document) error
	hooks       []func(context.Context, string, *scip.Document) error
	history     []SCIPWriterInsertDocumentFuncCall
	mutex       sync.Mutex
}

// InsertDocument delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSCIPWriter) InsertDocument(v0 context.Context, v1 string, v2 *scip.Document) error {
	r0 := m.InsertDocumentFunc.nextHook()(v0, v1, v2)
	m.InsertDocumentFunc.appendCall(SCIPWriterInsertDocumentFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the InsertDocument
// method of the parent MockSCIPWriter instance is invoked and the hook
// queue is empty.
func (f *SCIPWriterInsertDocumentFunc) SetDefaultHook(hook func(context.Context, string, *scip.Document) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertDocument method of the parent MockSCIPWriter instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *SCIPWriterInsertDocumentFunc) PushHook(hook func(context.Context, string, *scip.Document) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SCIPWriterInsertDocumentFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, *scip.Document) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SCIPWriterInsertDocumentFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, *scip.Document) error {
		return r0
	})
}

func (f *SCIPWriterInsertDocumentFunc) nextHook() func(context.Context, string, *scip.Document) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SCIPWriterInsertDocumentFunc) appendCall(r0 SCIPWriterInsertDocumentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of SCIPWriterInsertDocumentFuncCall objects
// describing the invocations of this function.
func (f *SCIPWriterInsertDocumentFunc) History() []SCIPWriterInsertDocumentFuncCall {
	f.mutex.Lock()
	history := make([]SCIPWriterInsertDocumentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SCIPWriterInsertDocumentFuncCall is an object that describes an
// invocation of method InsertDocument on an instance of MockSCIPWriter.
type SCIPWriterInsertDocumentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *scip.Document
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SCIPWriterInsertDocumentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SCIPWriterInsertDocumentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
