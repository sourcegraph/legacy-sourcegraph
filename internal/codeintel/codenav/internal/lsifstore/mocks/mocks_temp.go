// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package mocks

import (
	"context"
	"sync"

	scip "github.com/sourcegraph/scip/bindings/go/scip"
	lsifstore "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/internal/lsifstore"
	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/shared"
	core "github.com/sourcegraph/sourcegraph/internal/codeintel/core"
	precise "github.com/sourcegraph/sourcegraph/lib/codeintel/precise"
)

// MockLsifStore is a mock implementation of the LsifStore interface (from
// the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/internal/lsifstore)
// used for unit testing.
type MockLsifStore struct {
	// ExtractDefinitionLocationsFromPositionFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ExtractDefinitionLocationsFromPosition.
	ExtractDefinitionLocationsFromPositionFunc *LsifStoreExtractDefinitionLocationsFromPositionFunc
	// ExtractImplementationLocationsFromPositionFunc is an instance of a
	// mock function object controlling the behavior of the method
	// ExtractImplementationLocationsFromPosition.
	ExtractImplementationLocationsFromPositionFunc *LsifStoreExtractImplementationLocationsFromPositionFunc
	// ExtractPrototypeLocationsFromPositionFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ExtractPrototypeLocationsFromPosition.
	ExtractPrototypeLocationsFromPositionFunc *LsifStoreExtractPrototypeLocationsFromPositionFunc
	// ExtractReferenceLocationsFromPositionFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ExtractReferenceLocationsFromPosition.
	ExtractReferenceLocationsFromPositionFunc *LsifStoreExtractReferenceLocationsFromPositionFunc
	// FindDocumentIDsFunc is an instance of a mock function object
	// controlling the behavior of the method FindDocumentIDs.
	FindDocumentIDsFunc *LsifStoreFindDocumentIDsFunc
	// GetDiagnosticsFunc is an instance of a mock function object
	// controlling the behavior of the method GetDiagnostics.
	GetDiagnosticsFunc *LsifStoreGetDiagnosticsFunc
	// GetHoverFunc is an instance of a mock function object controlling the
	// behavior of the method GetHover.
	GetHoverFunc *LsifStoreGetHoverFunc
	// GetMonikersByPositionFunc is an instance of a mock function object
	// controlling the behavior of the method GetMonikersByPosition.
	GetMonikersByPositionFunc *LsifStoreGetMonikersByPositionFunc
	// GetPackageInformationFunc is an instance of a mock function object
	// controlling the behavior of the method GetPackageInformation.
	GetPackageInformationFunc *LsifStoreGetPackageInformationFunc
	// GetRangesFunc is an instance of a mock function object controlling
	// the behavior of the method GetRanges.
	GetRangesFunc *LsifStoreGetRangesFunc
	// GetStencilFunc is an instance of a mock function object controlling
	// the behavior of the method GetStencil.
	GetStencilFunc *LsifStoreGetStencilFunc
	// GetSymbolUsagesFunc is an instance of a mock function object
	// controlling the behavior of the method GetSymbolUsages.
	GetSymbolUsagesFunc *LsifStoreGetSymbolUsagesFunc
	// SCIPDocumentFunc is an instance of a mock function object controlling
	// the behavior of the method SCIPDocument.
	SCIPDocumentFunc *LsifStoreSCIPDocumentFunc
	// SCIPDocumentsFunc is an instance of a mock function object
	// controlling the behavior of the method SCIPDocuments.
	SCIPDocumentsFunc *LsifStoreSCIPDocumentsFunc
}

// NewMockLsifStore creates a new mock of the LsifStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockLsifStore() *MockLsifStore {
	return &MockLsifStore{
		ExtractDefinitionLocationsFromPositionFunc: &LsifStoreExtractDefinitionLocationsFromPositionFunc{
			defaultHook: func(context.Context, lsifstore.FindUsagesKey) (r0 []shared.UsageBuilder, r1 []string, r2 error) {
				return
			},
		},
		ExtractImplementationLocationsFromPositionFunc: &LsifStoreExtractImplementationLocationsFromPositionFunc{
			defaultHook: func(context.Context, lsifstore.FindUsagesKey) (r0 []shared.UsageBuilder, r1 []string, r2 error) {
				return
			},
		},
		ExtractPrototypeLocationsFromPositionFunc: &LsifStoreExtractPrototypeLocationsFromPositionFunc{
			defaultHook: func(context.Context, lsifstore.FindUsagesKey) (r0 []shared.UsageBuilder, r1 []string, r2 error) {
				return
			},
		},
		ExtractReferenceLocationsFromPositionFunc: &LsifStoreExtractReferenceLocationsFromPositionFunc{
			defaultHook: func(context.Context, lsifstore.FindUsagesKey) (r0 []shared.UsageBuilder, r1 []string, r2 error) {
				return
			},
		},
		FindDocumentIDsFunc: &LsifStoreFindDocumentIDsFunc{
			defaultHook: func(context.Context, map[int]core.UploadRelPath) (r0 map[int]int, r1 error) {
				return
			},
		},
		GetDiagnosticsFunc: &LsifStoreGetDiagnosticsFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath, int, int) (r0 []shared.Diagnostic[core.UploadRelPath], r1 int, r2 error) {
				return
			},
		},
		GetHoverFunc: &LsifStoreGetHoverFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath, int, int) (r0 string, r1 shared.Range, r2 bool, r3 error) {
				return
			},
		},
		GetMonikersByPositionFunc: &LsifStoreGetMonikersByPositionFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath, int, int) (r0 [][]precise.MonikerData, r1 error) {
				return
			},
		},
		GetPackageInformationFunc: &LsifStoreGetPackageInformationFunc{
			defaultHook: func(context.Context, int, string) (r0 precise.PackageInformationData, r1 bool, r2 error) {
				return
			},
		},
		GetRangesFunc: &LsifStoreGetRangesFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath, int, int) (r0 []shared.CodeIntelligenceRange, r1 error) {
				return
			},
		},
		GetStencilFunc: &LsifStoreGetStencilFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath) (r0 []shared.Range, r1 error) {
				return
			},
		},
		GetSymbolUsagesFunc: &LsifStoreGetSymbolUsagesFunc{
			defaultHook: func(context.Context, lsifstore.SymbolUsagesOptions) (r0 []shared.Usage, r1 int, r2 error) {
				return
			},
		},
		SCIPDocumentFunc: &LsifStoreSCIPDocumentFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath) (r0 core.Option[*scip.Document], r1 error) {
				return
			},
		},
		SCIPDocumentsFunc: &LsifStoreSCIPDocumentsFunc{
			defaultHook: func(context.Context, int, []core.UploadRelPath) (r0 map[core.UploadRelPath]*scip.Document, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockLsifStore creates a new mock of the LsifStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockLsifStore() *MockLsifStore {
	return &MockLsifStore{
		ExtractDefinitionLocationsFromPositionFunc: &LsifStoreExtractDefinitionLocationsFromPositionFunc{
			defaultHook: func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
				panic("unexpected invocation of MockLsifStore.ExtractDefinitionLocationsFromPosition")
			},
		},
		ExtractImplementationLocationsFromPositionFunc: &LsifStoreExtractImplementationLocationsFromPositionFunc{
			defaultHook: func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
				panic("unexpected invocation of MockLsifStore.ExtractImplementationLocationsFromPosition")
			},
		},
		ExtractPrototypeLocationsFromPositionFunc: &LsifStoreExtractPrototypeLocationsFromPositionFunc{
			defaultHook: func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
				panic("unexpected invocation of MockLsifStore.ExtractPrototypeLocationsFromPosition")
			},
		},
		ExtractReferenceLocationsFromPositionFunc: &LsifStoreExtractReferenceLocationsFromPositionFunc{
			defaultHook: func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
				panic("unexpected invocation of MockLsifStore.ExtractReferenceLocationsFromPosition")
			},
		},
		FindDocumentIDsFunc: &LsifStoreFindDocumentIDsFunc{
			defaultHook: func(context.Context, map[int]core.UploadRelPath) (map[int]int, error) {
				panic("unexpected invocation of MockLsifStore.FindDocumentIDs")
			},
		},
		GetDiagnosticsFunc: &LsifStoreGetDiagnosticsFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath, int, int) ([]shared.Diagnostic[core.UploadRelPath], int, error) {
				panic("unexpected invocation of MockLsifStore.GetDiagnostics")
			},
		},
		GetHoverFunc: &LsifStoreGetHoverFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath, int, int) (string, shared.Range, bool, error) {
				panic("unexpected invocation of MockLsifStore.GetHover")
			},
		},
		GetMonikersByPositionFunc: &LsifStoreGetMonikersByPositionFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath, int, int) ([][]precise.MonikerData, error) {
				panic("unexpected invocation of MockLsifStore.GetMonikersByPosition")
			},
		},
		GetPackageInformationFunc: &LsifStoreGetPackageInformationFunc{
			defaultHook: func(context.Context, int, string) (precise.PackageInformationData, bool, error) {
				panic("unexpected invocation of MockLsifStore.GetPackageInformation")
			},
		},
		GetRangesFunc: &LsifStoreGetRangesFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath, int, int) ([]shared.CodeIntelligenceRange, error) {
				panic("unexpected invocation of MockLsifStore.GetRanges")
			},
		},
		GetStencilFunc: &LsifStoreGetStencilFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath) ([]shared.Range, error) {
				panic("unexpected invocation of MockLsifStore.GetStencil")
			},
		},
		GetSymbolUsagesFunc: &LsifStoreGetSymbolUsagesFunc{
			defaultHook: func(context.Context, lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error) {
				panic("unexpected invocation of MockLsifStore.GetSymbolUsages")
			},
		},
		SCIPDocumentFunc: &LsifStoreSCIPDocumentFunc{
			defaultHook: func(context.Context, int, core.UploadRelPath) (core.Option[*scip.Document], error) {
				panic("unexpected invocation of MockLsifStore.SCIPDocument")
			},
		},
		SCIPDocumentsFunc: &LsifStoreSCIPDocumentsFunc{
			defaultHook: func(context.Context, int, []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error) {
				panic("unexpected invocation of MockLsifStore.SCIPDocuments")
			},
		},
	}
}

// NewMockLsifStoreFrom creates a new mock of the MockLsifStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockLsifStoreFrom(i lsifstore.LsifStore) *MockLsifStore {
	return &MockLsifStore{
		ExtractDefinitionLocationsFromPositionFunc: &LsifStoreExtractDefinitionLocationsFromPositionFunc{
			defaultHook: i.ExtractDefinitionLocationsFromPosition,
		},
		ExtractImplementationLocationsFromPositionFunc: &LsifStoreExtractImplementationLocationsFromPositionFunc{
			defaultHook: i.ExtractImplementationLocationsFromPosition,
		},
		ExtractPrototypeLocationsFromPositionFunc: &LsifStoreExtractPrototypeLocationsFromPositionFunc{
			defaultHook: i.ExtractPrototypeLocationsFromPosition,
		},
		ExtractReferenceLocationsFromPositionFunc: &LsifStoreExtractReferenceLocationsFromPositionFunc{
			defaultHook: i.ExtractReferenceLocationsFromPosition,
		},
		FindDocumentIDsFunc: &LsifStoreFindDocumentIDsFunc{
			defaultHook: i.FindDocumentIDs,
		},
		GetDiagnosticsFunc: &LsifStoreGetDiagnosticsFunc{
			defaultHook: i.GetDiagnostics,
		},
		GetHoverFunc: &LsifStoreGetHoverFunc{
			defaultHook: i.GetHover,
		},
		GetMonikersByPositionFunc: &LsifStoreGetMonikersByPositionFunc{
			defaultHook: i.GetMonikersByPosition,
		},
		GetPackageInformationFunc: &LsifStoreGetPackageInformationFunc{
			defaultHook: i.GetPackageInformation,
		},
		GetRangesFunc: &LsifStoreGetRangesFunc{
			defaultHook: i.GetRanges,
		},
		GetStencilFunc: &LsifStoreGetStencilFunc{
			defaultHook: i.GetStencil,
		},
		GetSymbolUsagesFunc: &LsifStoreGetSymbolUsagesFunc{
			defaultHook: i.GetSymbolUsages,
		},
		SCIPDocumentFunc: &LsifStoreSCIPDocumentFunc{
			defaultHook: i.SCIPDocument,
		},
		SCIPDocumentsFunc: &LsifStoreSCIPDocumentsFunc{
			defaultHook: i.SCIPDocuments,
		},
	}
}

// LsifStoreExtractDefinitionLocationsFromPositionFunc describes the
// behavior when the ExtractDefinitionLocationsFromPosition method of the
// parent MockLsifStore instance is invoked.
type LsifStoreExtractDefinitionLocationsFromPositionFunc struct {
	defaultHook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)
	hooks       []func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)
	history     []LsifStoreExtractDefinitionLocationsFromPositionFuncCall
	mutex       sync.Mutex
}

// ExtractDefinitionLocationsFromPosition delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockLsifStore) ExtractDefinitionLocationsFromPosition(v0 context.Context, v1 lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
	r0, r1, r2 := m.ExtractDefinitionLocationsFromPositionFunc.nextHook()(v0, v1)
	m.ExtractDefinitionLocationsFromPositionFunc.appendCall(LsifStoreExtractDefinitionLocationsFromPositionFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ExtractDefinitionLocationsFromPosition method of the parent MockLsifStore
// instance is invoked and the hook queue is empty.
func (f *LsifStoreExtractDefinitionLocationsFromPositionFunc) SetDefaultHook(hook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExtractDefinitionLocationsFromPosition method of the parent MockLsifStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *LsifStoreExtractDefinitionLocationsFromPositionFunc) PushHook(hook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreExtractDefinitionLocationsFromPositionFunc) SetDefaultReturn(r0 []shared.UsageBuilder, r1 []string, r2 error) {
	f.SetDefaultHook(func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreExtractDefinitionLocationsFromPositionFunc) PushReturn(r0 []shared.UsageBuilder, r1 []string, r2 error) {
	f.PushHook(func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreExtractDefinitionLocationsFromPositionFunc) nextHook() func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreExtractDefinitionLocationsFromPositionFunc) appendCall(r0 LsifStoreExtractDefinitionLocationsFromPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// LsifStoreExtractDefinitionLocationsFromPositionFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreExtractDefinitionLocationsFromPositionFunc) History() []LsifStoreExtractDefinitionLocationsFromPositionFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreExtractDefinitionLocationsFromPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreExtractDefinitionLocationsFromPositionFuncCall is an object that
// describes an invocation of method ExtractDefinitionLocationsFromPosition
// on an instance of MockLsifStore.
type LsifStoreExtractDefinitionLocationsFromPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 lsifstore.FindUsagesKey
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UsageBuilder
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreExtractDefinitionLocationsFromPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreExtractDefinitionLocationsFromPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreExtractImplementationLocationsFromPositionFunc describes the
// behavior when the ExtractImplementationLocationsFromPosition method of
// the parent MockLsifStore instance is invoked.
type LsifStoreExtractImplementationLocationsFromPositionFunc struct {
	defaultHook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)
	hooks       []func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)
	history     []LsifStoreExtractImplementationLocationsFromPositionFuncCall
	mutex       sync.Mutex
}

// ExtractImplementationLocationsFromPosition delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockLsifStore) ExtractImplementationLocationsFromPosition(v0 context.Context, v1 lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
	r0, r1, r2 := m.ExtractImplementationLocationsFromPositionFunc.nextHook()(v0, v1)
	m.ExtractImplementationLocationsFromPositionFunc.appendCall(LsifStoreExtractImplementationLocationsFromPositionFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ExtractImplementationLocationsFromPosition method of the parent
// MockLsifStore instance is invoked and the hook queue is empty.
func (f *LsifStoreExtractImplementationLocationsFromPositionFunc) SetDefaultHook(hook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExtractImplementationLocationsFromPosition method of the parent
// MockLsifStore instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *LsifStoreExtractImplementationLocationsFromPositionFunc) PushHook(hook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreExtractImplementationLocationsFromPositionFunc) SetDefaultReturn(r0 []shared.UsageBuilder, r1 []string, r2 error) {
	f.SetDefaultHook(func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreExtractImplementationLocationsFromPositionFunc) PushReturn(r0 []shared.UsageBuilder, r1 []string, r2 error) {
	f.PushHook(func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreExtractImplementationLocationsFromPositionFunc) nextHook() func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreExtractImplementationLocationsFromPositionFunc) appendCall(r0 LsifStoreExtractImplementationLocationsFromPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// LsifStoreExtractImplementationLocationsFromPositionFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreExtractImplementationLocationsFromPositionFunc) History() []LsifStoreExtractImplementationLocationsFromPositionFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreExtractImplementationLocationsFromPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreExtractImplementationLocationsFromPositionFuncCall is an object
// that describes an invocation of method
// ExtractImplementationLocationsFromPosition on an instance of
// MockLsifStore.
type LsifStoreExtractImplementationLocationsFromPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 lsifstore.FindUsagesKey
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UsageBuilder
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreExtractImplementationLocationsFromPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreExtractImplementationLocationsFromPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreExtractPrototypeLocationsFromPositionFunc describes the behavior
// when the ExtractPrototypeLocationsFromPosition method of the parent
// MockLsifStore instance is invoked.
type LsifStoreExtractPrototypeLocationsFromPositionFunc struct {
	defaultHook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)
	hooks       []func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)
	history     []LsifStoreExtractPrototypeLocationsFromPositionFuncCall
	mutex       sync.Mutex
}

// ExtractPrototypeLocationsFromPosition delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockLsifStore) ExtractPrototypeLocationsFromPosition(v0 context.Context, v1 lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
	r0, r1, r2 := m.ExtractPrototypeLocationsFromPositionFunc.nextHook()(v0, v1)
	m.ExtractPrototypeLocationsFromPositionFunc.appendCall(LsifStoreExtractPrototypeLocationsFromPositionFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ExtractPrototypeLocationsFromPosition method of the parent MockLsifStore
// instance is invoked and the hook queue is empty.
func (f *LsifStoreExtractPrototypeLocationsFromPositionFunc) SetDefaultHook(hook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExtractPrototypeLocationsFromPosition method of the parent MockLsifStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *LsifStoreExtractPrototypeLocationsFromPositionFunc) PushHook(hook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreExtractPrototypeLocationsFromPositionFunc) SetDefaultReturn(r0 []shared.UsageBuilder, r1 []string, r2 error) {
	f.SetDefaultHook(func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreExtractPrototypeLocationsFromPositionFunc) PushReturn(r0 []shared.UsageBuilder, r1 []string, r2 error) {
	f.PushHook(func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreExtractPrototypeLocationsFromPositionFunc) nextHook() func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreExtractPrototypeLocationsFromPositionFunc) appendCall(r0 LsifStoreExtractPrototypeLocationsFromPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// LsifStoreExtractPrototypeLocationsFromPositionFuncCall objects describing
// the invocations of this function.
func (f *LsifStoreExtractPrototypeLocationsFromPositionFunc) History() []LsifStoreExtractPrototypeLocationsFromPositionFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreExtractPrototypeLocationsFromPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreExtractPrototypeLocationsFromPositionFuncCall is an object that
// describes an invocation of method ExtractPrototypeLocationsFromPosition
// on an instance of MockLsifStore.
type LsifStoreExtractPrototypeLocationsFromPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 lsifstore.FindUsagesKey
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UsageBuilder
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreExtractPrototypeLocationsFromPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreExtractPrototypeLocationsFromPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreExtractReferenceLocationsFromPositionFunc describes the behavior
// when the ExtractReferenceLocationsFromPosition method of the parent
// MockLsifStore instance is invoked.
type LsifStoreExtractReferenceLocationsFromPositionFunc struct {
	defaultHook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)
	hooks       []func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)
	history     []LsifStoreExtractReferenceLocationsFromPositionFuncCall
	mutex       sync.Mutex
}

// ExtractReferenceLocationsFromPosition delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockLsifStore) ExtractReferenceLocationsFromPosition(v0 context.Context, v1 lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
	r0, r1, r2 := m.ExtractReferenceLocationsFromPositionFunc.nextHook()(v0, v1)
	m.ExtractReferenceLocationsFromPositionFunc.appendCall(LsifStoreExtractReferenceLocationsFromPositionFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// ExtractReferenceLocationsFromPosition method of the parent MockLsifStore
// instance is invoked and the hook queue is empty.
func (f *LsifStoreExtractReferenceLocationsFromPositionFunc) SetDefaultHook(hook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExtractReferenceLocationsFromPosition method of the parent MockLsifStore
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *LsifStoreExtractReferenceLocationsFromPositionFunc) PushHook(hook func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreExtractReferenceLocationsFromPositionFunc) SetDefaultReturn(r0 []shared.UsageBuilder, r1 []string, r2 error) {
	f.SetDefaultHook(func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreExtractReferenceLocationsFromPositionFunc) PushReturn(r0 []shared.UsageBuilder, r1 []string, r2 error) {
	f.PushHook(func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreExtractReferenceLocationsFromPositionFunc) nextHook() func(context.Context, lsifstore.FindUsagesKey) ([]shared.UsageBuilder, []string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreExtractReferenceLocationsFromPositionFunc) appendCall(r0 LsifStoreExtractReferenceLocationsFromPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// LsifStoreExtractReferenceLocationsFromPositionFuncCall objects describing
// the invocations of this function.
func (f *LsifStoreExtractReferenceLocationsFromPositionFunc) History() []LsifStoreExtractReferenceLocationsFromPositionFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreExtractReferenceLocationsFromPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreExtractReferenceLocationsFromPositionFuncCall is an object that
// describes an invocation of method ExtractReferenceLocationsFromPosition
// on an instance of MockLsifStore.
type LsifStoreExtractReferenceLocationsFromPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 lsifstore.FindUsagesKey
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UsageBuilder
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreExtractReferenceLocationsFromPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreExtractReferenceLocationsFromPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreFindDocumentIDsFunc describes the behavior when the
// FindDocumentIDs method of the parent MockLsifStore instance is invoked.
type LsifStoreFindDocumentIDsFunc struct {
	defaultHook func(context.Context, map[int]core.UploadRelPath) (map[int]int, error)
	hooks       []func(context.Context, map[int]core.UploadRelPath) (map[int]int, error)
	history     []LsifStoreFindDocumentIDsFuncCall
	mutex       sync.Mutex
}

// FindDocumentIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLsifStore) FindDocumentIDs(v0 context.Context, v1 map[int]core.UploadRelPath) (map[int]int, error) {
	r0, r1 := m.FindDocumentIDsFunc.nextHook()(v0, v1)
	m.FindDocumentIDsFunc.appendCall(LsifStoreFindDocumentIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the FindDocumentIDs
// method of the parent MockLsifStore instance is invoked and the hook queue
// is empty.
func (f *LsifStoreFindDocumentIDsFunc) SetDefaultHook(hook func(context.Context, map[int]core.UploadRelPath) (map[int]int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FindDocumentIDs method of the parent MockLsifStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LsifStoreFindDocumentIDsFunc) PushHook(hook func(context.Context, map[int]core.UploadRelPath) (map[int]int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreFindDocumentIDsFunc) SetDefaultReturn(r0 map[int]int, r1 error) {
	f.SetDefaultHook(func(context.Context, map[int]core.UploadRelPath) (map[int]int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreFindDocumentIDsFunc) PushReturn(r0 map[int]int, r1 error) {
	f.PushHook(func(context.Context, map[int]core.UploadRelPath) (map[int]int, error) {
		return r0, r1
	})
}

func (f *LsifStoreFindDocumentIDsFunc) nextHook() func(context.Context, map[int]core.UploadRelPath) (map[int]int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreFindDocumentIDsFunc) appendCall(r0 LsifStoreFindDocumentIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreFindDocumentIDsFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreFindDocumentIDsFunc) History() []LsifStoreFindDocumentIDsFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreFindDocumentIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreFindDocumentIDsFuncCall is an object that describes an
// invocation of method FindDocumentIDs on an instance of MockLsifStore.
type LsifStoreFindDocumentIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 map[int]core.UploadRelPath
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int]int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreFindDocumentIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreFindDocumentIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LsifStoreGetDiagnosticsFunc describes the behavior when the
// GetDiagnostics method of the parent MockLsifStore instance is invoked.
type LsifStoreGetDiagnosticsFunc struct {
	defaultHook func(context.Context, int, core.UploadRelPath, int, int) ([]shared.Diagnostic[core.UploadRelPath], int, error)
	hooks       []func(context.Context, int, core.UploadRelPath, int, int) ([]shared.Diagnostic[core.UploadRelPath], int, error)
	history     []LsifStoreGetDiagnosticsFuncCall
	mutex       sync.Mutex
}

// GetDiagnostics delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetDiagnostics(v0 context.Context, v1 int, v2 core.UploadRelPath, v3 int, v4 int) ([]shared.Diagnostic[core.UploadRelPath], int, error) {
	r0, r1, r2 := m.GetDiagnosticsFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetDiagnosticsFunc.appendCall(LsifStoreGetDiagnosticsFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetDiagnostics
// method of the parent MockLsifStore instance is invoked and the hook queue
// is empty.
func (f *LsifStoreGetDiagnosticsFunc) SetDefaultHook(hook func(context.Context, int, core.UploadRelPath, int, int) ([]shared.Diagnostic[core.UploadRelPath], int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetDiagnostics method of the parent MockLsifStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LsifStoreGetDiagnosticsFunc) PushHook(hook func(context.Context, int, core.UploadRelPath, int, int) ([]shared.Diagnostic[core.UploadRelPath], int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetDiagnosticsFunc) SetDefaultReturn(r0 []shared.Diagnostic[core.UploadRelPath], r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, core.UploadRelPath, int, int) ([]shared.Diagnostic[core.UploadRelPath], int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetDiagnosticsFunc) PushReturn(r0 []shared.Diagnostic[core.UploadRelPath], r1 int, r2 error) {
	f.PushHook(func(context.Context, int, core.UploadRelPath, int, int) ([]shared.Diagnostic[core.UploadRelPath], int, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetDiagnosticsFunc) nextHook() func(context.Context, int, core.UploadRelPath, int, int) ([]shared.Diagnostic[core.UploadRelPath], int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetDiagnosticsFunc) appendCall(r0 LsifStoreGetDiagnosticsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetDiagnosticsFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetDiagnosticsFunc) History() []LsifStoreGetDiagnosticsFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetDiagnosticsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetDiagnosticsFuncCall is an object that describes an invocation
// of method GetDiagnostics on an instance of MockLsifStore.
type LsifStoreGetDiagnosticsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 core.UploadRelPath
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Diagnostic[core.UploadRelPath]
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetDiagnosticsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetDiagnosticsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreGetHoverFunc describes the behavior when the GetHover method of
// the parent MockLsifStore instance is invoked.
type LsifStoreGetHoverFunc struct {
	defaultHook func(context.Context, int, core.UploadRelPath, int, int) (string, shared.Range, bool, error)
	hooks       []func(context.Context, int, core.UploadRelPath, int, int) (string, shared.Range, bool, error)
	history     []LsifStoreGetHoverFuncCall
	mutex       sync.Mutex
}

// GetHover delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLsifStore) GetHover(v0 context.Context, v1 int, v2 core.UploadRelPath, v3 int, v4 int) (string, shared.Range, bool, error) {
	r0, r1, r2, r3 := m.GetHoverFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetHoverFunc.appendCall(LsifStoreGetHoverFuncCall{v0, v1, v2, v3, v4, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the GetHover method of
// the parent MockLsifStore instance is invoked and the hook queue is empty.
func (f *LsifStoreGetHoverFunc) SetDefaultHook(hook func(context.Context, int, core.UploadRelPath, int, int) (string, shared.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetHover method of the parent MockLsifStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LsifStoreGetHoverFunc) PushHook(hook func(context.Context, int, core.UploadRelPath, int, int) (string, shared.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetHoverFunc) SetDefaultReturn(r0 string, r1 shared.Range, r2 bool, r3 error) {
	f.SetDefaultHook(func(context.Context, int, core.UploadRelPath, int, int) (string, shared.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetHoverFunc) PushReturn(r0 string, r1 shared.Range, r2 bool, r3 error) {
	f.PushHook(func(context.Context, int, core.UploadRelPath, int, int) (string, shared.Range, bool, error) {
		return r0, r1, r2, r3
	})
}

func (f *LsifStoreGetHoverFunc) nextHook() func(context.Context, int, core.UploadRelPath, int, int) (string, shared.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetHoverFunc) appendCall(r0 LsifStoreGetHoverFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetHoverFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetHoverFunc) History() []LsifStoreGetHoverFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetHoverFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetHoverFuncCall is an object that describes an invocation of
// method GetHover on an instance of MockLsifStore.
type LsifStoreGetHoverFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 core.UploadRelPath
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 shared.Range
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 bool
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetHoverFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetHoverFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// LsifStoreGetMonikersByPositionFunc describes the behavior when the
// GetMonikersByPosition method of the parent MockLsifStore instance is
// invoked.
type LsifStoreGetMonikersByPositionFunc struct {
	defaultHook func(context.Context, int, core.UploadRelPath, int, int) ([][]precise.MonikerData, error)
	hooks       []func(context.Context, int, core.UploadRelPath, int, int) ([][]precise.MonikerData, error)
	history     []LsifStoreGetMonikersByPositionFuncCall
	mutex       sync.Mutex
}

// GetMonikersByPosition delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetMonikersByPosition(v0 context.Context, v1 int, v2 core.UploadRelPath, v3 int, v4 int) ([][]precise.MonikerData, error) {
	r0, r1 := m.GetMonikersByPositionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetMonikersByPositionFunc.appendCall(LsifStoreGetMonikersByPositionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetMonikersByPosition method of the parent MockLsifStore instance is
// invoked and the hook queue is empty.
func (f *LsifStoreGetMonikersByPositionFunc) SetDefaultHook(hook func(context.Context, int, core.UploadRelPath, int, int) ([][]precise.MonikerData, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetMonikersByPosition method of the parent MockLsifStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LsifStoreGetMonikersByPositionFunc) PushHook(hook func(context.Context, int, core.UploadRelPath, int, int) ([][]precise.MonikerData, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetMonikersByPositionFunc) SetDefaultReturn(r0 [][]precise.MonikerData, r1 error) {
	f.SetDefaultHook(func(context.Context, int, core.UploadRelPath, int, int) ([][]precise.MonikerData, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetMonikersByPositionFunc) PushReturn(r0 [][]precise.MonikerData, r1 error) {
	f.PushHook(func(context.Context, int, core.UploadRelPath, int, int) ([][]precise.MonikerData, error) {
		return r0, r1
	})
}

func (f *LsifStoreGetMonikersByPositionFunc) nextHook() func(context.Context, int, core.UploadRelPath, int, int) ([][]precise.MonikerData, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetMonikersByPositionFunc) appendCall(r0 LsifStoreGetMonikersByPositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetMonikersByPositionFuncCall
// objects describing the invocations of this function.
func (f *LsifStoreGetMonikersByPositionFunc) History() []LsifStoreGetMonikersByPositionFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetMonikersByPositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetMonikersByPositionFuncCall is an object that describes an
// invocation of method GetMonikersByPosition on an instance of
// MockLsifStore.
type LsifStoreGetMonikersByPositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 core.UploadRelPath
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 [][]precise.MonikerData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetMonikersByPositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetMonikersByPositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LsifStoreGetPackageInformationFunc describes the behavior when the
// GetPackageInformation method of the parent MockLsifStore instance is
// invoked.
type LsifStoreGetPackageInformationFunc struct {
	defaultHook func(context.Context, int, string) (precise.PackageInformationData, bool, error)
	hooks       []func(context.Context, int, string) (precise.PackageInformationData, bool, error)
	history     []LsifStoreGetPackageInformationFuncCall
	mutex       sync.Mutex
}

// GetPackageInformation delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetPackageInformation(v0 context.Context, v1 int, v2 string) (precise.PackageInformationData, bool, error) {
	r0, r1, r2 := m.GetPackageInformationFunc.nextHook()(v0, v1, v2)
	m.GetPackageInformationFunc.appendCall(LsifStoreGetPackageInformationFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetPackageInformation method of the parent MockLsifStore instance is
// invoked and the hook queue is empty.
func (f *LsifStoreGetPackageInformationFunc) SetDefaultHook(hook func(context.Context, int, string) (precise.PackageInformationData, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetPackageInformation method of the parent MockLsifStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *LsifStoreGetPackageInformationFunc) PushHook(hook func(context.Context, int, string) (precise.PackageInformationData, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetPackageInformationFunc) SetDefaultReturn(r0 precise.PackageInformationData, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int, string) (precise.PackageInformationData, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetPackageInformationFunc) PushReturn(r0 precise.PackageInformationData, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int, string) (precise.PackageInformationData, bool, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetPackageInformationFunc) nextHook() func(context.Context, int, string) (precise.PackageInformationData, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetPackageInformationFunc) appendCall(r0 LsifStoreGetPackageInformationFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetPackageInformationFuncCall
// objects describing the invocations of this function.
func (f *LsifStoreGetPackageInformationFunc) History() []LsifStoreGetPackageInformationFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetPackageInformationFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetPackageInformationFuncCall is an object that describes an
// invocation of method GetPackageInformation on an instance of
// MockLsifStore.
type LsifStoreGetPackageInformationFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 precise.PackageInformationData
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetPackageInformationFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetPackageInformationFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreGetRangesFunc describes the behavior when the GetRanges method
// of the parent MockLsifStore instance is invoked.
type LsifStoreGetRangesFunc struct {
	defaultHook func(context.Context, int, core.UploadRelPath, int, int) ([]shared.CodeIntelligenceRange, error)
	hooks       []func(context.Context, int, core.UploadRelPath, int, int) ([]shared.CodeIntelligenceRange, error)
	history     []LsifStoreGetRangesFuncCall
	mutex       sync.Mutex
}

// GetRanges delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLsifStore) GetRanges(v0 context.Context, v1 int, v2 core.UploadRelPath, v3 int, v4 int) ([]shared.CodeIntelligenceRange, error) {
	r0, r1 := m.GetRangesFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetRangesFunc.appendCall(LsifStoreGetRangesFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetRanges method of
// the parent MockLsifStore instance is invoked and the hook queue is empty.
func (f *LsifStoreGetRangesFunc) SetDefaultHook(hook func(context.Context, int, core.UploadRelPath, int, int) ([]shared.CodeIntelligenceRange, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRanges method of the parent MockLsifStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LsifStoreGetRangesFunc) PushHook(hook func(context.Context, int, core.UploadRelPath, int, int) ([]shared.CodeIntelligenceRange, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetRangesFunc) SetDefaultReturn(r0 []shared.CodeIntelligenceRange, r1 error) {
	f.SetDefaultHook(func(context.Context, int, core.UploadRelPath, int, int) ([]shared.CodeIntelligenceRange, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetRangesFunc) PushReturn(r0 []shared.CodeIntelligenceRange, r1 error) {
	f.PushHook(func(context.Context, int, core.UploadRelPath, int, int) ([]shared.CodeIntelligenceRange, error) {
		return r0, r1
	})
}

func (f *LsifStoreGetRangesFunc) nextHook() func(context.Context, int, core.UploadRelPath, int, int) ([]shared.CodeIntelligenceRange, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetRangesFunc) appendCall(r0 LsifStoreGetRangesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetRangesFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetRangesFunc) History() []LsifStoreGetRangesFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetRangesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetRangesFuncCall is an object that describes an invocation of
// method GetRanges on an instance of MockLsifStore.
type LsifStoreGetRangesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 core.UploadRelPath
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.CodeIntelligenceRange
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetRangesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetRangesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LsifStoreGetStencilFunc describes the behavior when the GetStencil method
// of the parent MockLsifStore instance is invoked.
type LsifStoreGetStencilFunc struct {
	defaultHook func(context.Context, int, core.UploadRelPath) ([]shared.Range, error)
	hooks       []func(context.Context, int, core.UploadRelPath) ([]shared.Range, error)
	history     []LsifStoreGetStencilFuncCall
	mutex       sync.Mutex
}

// GetStencil delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLsifStore) GetStencil(v0 context.Context, v1 int, v2 core.UploadRelPath) ([]shared.Range, error) {
	r0, r1 := m.GetStencilFunc.nextHook()(v0, v1, v2)
	m.GetStencilFunc.appendCall(LsifStoreGetStencilFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetStencil method of
// the parent MockLsifStore instance is invoked and the hook queue is empty.
func (f *LsifStoreGetStencilFunc) SetDefaultHook(hook func(context.Context, int, core.UploadRelPath) ([]shared.Range, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetStencil method of the parent MockLsifStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LsifStoreGetStencilFunc) PushHook(hook func(context.Context, int, core.UploadRelPath) ([]shared.Range, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetStencilFunc) SetDefaultReturn(r0 []shared.Range, r1 error) {
	f.SetDefaultHook(func(context.Context, int, core.UploadRelPath) ([]shared.Range, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetStencilFunc) PushReturn(r0 []shared.Range, r1 error) {
	f.PushHook(func(context.Context, int, core.UploadRelPath) ([]shared.Range, error) {
		return r0, r1
	})
}

func (f *LsifStoreGetStencilFunc) nextHook() func(context.Context, int, core.UploadRelPath) ([]shared.Range, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetStencilFunc) appendCall(r0 LsifStoreGetStencilFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetStencilFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetStencilFunc) History() []LsifStoreGetStencilFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetStencilFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetStencilFuncCall is an object that describes an invocation of
// method GetStencil on an instance of MockLsifStore.
type LsifStoreGetStencilFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 core.UploadRelPath
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetStencilFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetStencilFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LsifStoreGetSymbolUsagesFunc describes the behavior when the
// GetSymbolUsages method of the parent MockLsifStore instance is invoked.
type LsifStoreGetSymbolUsagesFunc struct {
	defaultHook func(context.Context, lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error)
	hooks       []func(context.Context, lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error)
	history     []LsifStoreGetSymbolUsagesFuncCall
	mutex       sync.Mutex
}

// GetSymbolUsages delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLsifStore) GetSymbolUsages(v0 context.Context, v1 lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error) {
	r0, r1, r2 := m.GetSymbolUsagesFunc.nextHook()(v0, v1)
	m.GetSymbolUsagesFunc.appendCall(LsifStoreGetSymbolUsagesFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetSymbolUsages
// method of the parent MockLsifStore instance is invoked and the hook queue
// is empty.
func (f *LsifStoreGetSymbolUsagesFunc) SetDefaultHook(hook func(context.Context, lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSymbolUsages method of the parent MockLsifStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LsifStoreGetSymbolUsagesFunc) PushHook(hook func(context.Context, lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreGetSymbolUsagesFunc) SetDefaultReturn(r0 []shared.Usage, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreGetSymbolUsagesFunc) PushReturn(r0 []shared.Usage, r1 int, r2 error) {
	f.PushHook(func(context.Context, lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error) {
		return r0, r1, r2
	})
}

func (f *LsifStoreGetSymbolUsagesFunc) nextHook() func(context.Context, lsifstore.SymbolUsagesOptions) ([]shared.Usage, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreGetSymbolUsagesFunc) appendCall(r0 LsifStoreGetSymbolUsagesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreGetSymbolUsagesFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreGetSymbolUsagesFunc) History() []LsifStoreGetSymbolUsagesFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreGetSymbolUsagesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreGetSymbolUsagesFuncCall is an object that describes an
// invocation of method GetSymbolUsages on an instance of MockLsifStore.
type LsifStoreGetSymbolUsagesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 lsifstore.SymbolUsagesOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Usage
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreGetSymbolUsagesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreGetSymbolUsagesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// LsifStoreSCIPDocumentFunc describes the behavior when the SCIPDocument
// method of the parent MockLsifStore instance is invoked.
type LsifStoreSCIPDocumentFunc struct {
	defaultHook func(context.Context, int, core.UploadRelPath) (core.Option[*scip.Document], error)
	hooks       []func(context.Context, int, core.UploadRelPath) (core.Option[*scip.Document], error)
	history     []LsifStoreSCIPDocumentFuncCall
	mutex       sync.Mutex
}

// SCIPDocument delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLsifStore) SCIPDocument(v0 context.Context, v1 int, v2 core.UploadRelPath) (core.Option[*scip.Document], error) {
	r0, r1 := m.SCIPDocumentFunc.nextHook()(v0, v1, v2)
	m.SCIPDocumentFunc.appendCall(LsifStoreSCIPDocumentFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SCIPDocument method
// of the parent MockLsifStore instance is invoked and the hook queue is
// empty.
func (f *LsifStoreSCIPDocumentFunc) SetDefaultHook(hook func(context.Context, int, core.UploadRelPath) (core.Option[*scip.Document], error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SCIPDocument method of the parent MockLsifStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LsifStoreSCIPDocumentFunc) PushHook(hook func(context.Context, int, core.UploadRelPath) (core.Option[*scip.Document], error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreSCIPDocumentFunc) SetDefaultReturn(r0 core.Option[*scip.Document], r1 error) {
	f.SetDefaultHook(func(context.Context, int, core.UploadRelPath) (core.Option[*scip.Document], error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreSCIPDocumentFunc) PushReturn(r0 core.Option[*scip.Document], r1 error) {
	f.PushHook(func(context.Context, int, core.UploadRelPath) (core.Option[*scip.Document], error) {
		return r0, r1
	})
}

func (f *LsifStoreSCIPDocumentFunc) nextHook() func(context.Context, int, core.UploadRelPath) (core.Option[*scip.Document], error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreSCIPDocumentFunc) appendCall(r0 LsifStoreSCIPDocumentFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreSCIPDocumentFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreSCIPDocumentFunc) History() []LsifStoreSCIPDocumentFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreSCIPDocumentFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreSCIPDocumentFuncCall is an object that describes an invocation
// of method SCIPDocument on an instance of MockLsifStore.
type LsifStoreSCIPDocumentFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 core.UploadRelPath
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 core.Option[*scip.Document]
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreSCIPDocumentFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreSCIPDocumentFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LsifStoreSCIPDocumentsFunc describes the behavior when the SCIPDocuments
// method of the parent MockLsifStore instance is invoked.
type LsifStoreSCIPDocumentsFunc struct {
	defaultHook func(context.Context, int, []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error)
	hooks       []func(context.Context, int, []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error)
	history     []LsifStoreSCIPDocumentsFuncCall
	mutex       sync.Mutex
}

// SCIPDocuments delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLsifStore) SCIPDocuments(v0 context.Context, v1 int, v2 []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error) {
	r0, r1 := m.SCIPDocumentsFunc.nextHook()(v0, v1, v2)
	m.SCIPDocumentsFunc.appendCall(LsifStoreSCIPDocumentsFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SCIPDocuments method
// of the parent MockLsifStore instance is invoked and the hook queue is
// empty.
func (f *LsifStoreSCIPDocumentsFunc) SetDefaultHook(hook func(context.Context, int, []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SCIPDocuments method of the parent MockLsifStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LsifStoreSCIPDocumentsFunc) PushHook(hook func(context.Context, int, []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *LsifStoreSCIPDocumentsFunc) SetDefaultReturn(r0 map[core.UploadRelPath]*scip.Document, r1 error) {
	f.SetDefaultHook(func(context.Context, int, []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *LsifStoreSCIPDocumentsFunc) PushReturn(r0 map[core.UploadRelPath]*scip.Document, r1 error) {
	f.PushHook(func(context.Context, int, []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error) {
		return r0, r1
	})
}

func (f *LsifStoreSCIPDocumentsFunc) nextHook() func(context.Context, int, []core.UploadRelPath) (map[core.UploadRelPath]*scip.Document, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LsifStoreSCIPDocumentsFunc) appendCall(r0 LsifStoreSCIPDocumentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LsifStoreSCIPDocumentsFuncCall objects
// describing the invocations of this function.
func (f *LsifStoreSCIPDocumentsFunc) History() []LsifStoreSCIPDocumentsFuncCall {
	f.mutex.Lock()
	history := make([]LsifStoreSCIPDocumentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LsifStoreSCIPDocumentsFuncCall is an object that describes an invocation
// of method SCIPDocuments on an instance of MockLsifStore.
type LsifStoreSCIPDocumentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []core.UploadRelPath
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[core.UploadRelPath]*scip.Document
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LsifStoreSCIPDocumentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LsifStoreSCIPDocumentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
