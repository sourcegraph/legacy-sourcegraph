// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package codenav

import (
	"context"
	"sync"

	scip "github.com/sourcegraph/scip/bindings/go/scip"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	core "github.com/sourcegraph/sourcegraph/internal/codeintel/core"
	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/shared"
	precise "github.com/sourcegraph/sourcegraph/lib/codeintel/precise"
)

// MockGitTreeTranslator is a mock implementation of the GitTreeTranslator
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav) used for
// unit testing.
type MockGitTreeTranslator struct {
	// PrefetchFunc is an instance of a mock function object controlling the
	// behavior of the method Prefetch.
	PrefetchFunc *GitTreeTranslatorPrefetchFunc
	// TranslatePositionFunc is an instance of a mock function object
	// controlling the behavior of the method TranslatePosition.
	TranslatePositionFunc *GitTreeTranslatorTranslatePositionFunc
	// TranslateRangeFunc is an instance of a mock function object
	// controlling the behavior of the method TranslateRange.
	TranslateRangeFunc *GitTreeTranslatorTranslateRangeFunc
}

// NewMockGitTreeTranslator creates a new mock of the GitTreeTranslator
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitTreeTranslator() *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		PrefetchFunc: &GitTreeTranslatorPrefetchFunc{
			defaultHook: func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath) {
				return
			},
		},
		TranslatePositionFunc: &GitTreeTranslatorTranslatePositionFunc{
			defaultHook: func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (r0 core.Option[scip.Position], r1 error) {
				return
			},
		},
		TranslateRangeFunc: &GitTreeTranslatorTranslateRangeFunc{
			defaultHook: func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (r0 core.Option[scip.Range], r1 error) {
				return
			},
		},
	}
}

// NewStrictMockGitTreeTranslator creates a new mock of the
// GitTreeTranslator interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockGitTreeTranslator() *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		PrefetchFunc: &GitTreeTranslatorPrefetchFunc{
			defaultHook: func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath) {
				panic("unexpected invocation of MockGitTreeTranslator.Prefetch")
			},
		},
		TranslatePositionFunc: &GitTreeTranslatorTranslatePositionFunc{
			defaultHook: func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (core.Option[scip.Position], error) {
				panic("unexpected invocation of MockGitTreeTranslator.TranslatePosition")
			},
		},
		TranslateRangeFunc: &GitTreeTranslatorTranslateRangeFunc{
			defaultHook: func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (core.Option[scip.Range], error) {
				panic("unexpected invocation of MockGitTreeTranslator.TranslateRange")
			},
		},
	}
}

// NewMockGitTreeTranslatorFrom creates a new mock of the
// MockGitTreeTranslator interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitTreeTranslatorFrom(i GitTreeTranslator) *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		PrefetchFunc: &GitTreeTranslatorPrefetchFunc{
			defaultHook: i.Prefetch,
		},
		TranslatePositionFunc: &GitTreeTranslatorTranslatePositionFunc{
			defaultHook: i.TranslatePosition,
		},
		TranslateRangeFunc: &GitTreeTranslatorTranslateRangeFunc{
			defaultHook: i.TranslateRange,
		},
	}
}

// GitTreeTranslatorPrefetchFunc describes the behavior when the Prefetch
// method of the parent MockGitTreeTranslator instance is invoked.
type GitTreeTranslatorPrefetchFunc struct {
	defaultHook func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath)
	hooks       []func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath)
	history     []GitTreeTranslatorPrefetchFuncCall
	mutex       sync.Mutex
}

// Prefetch delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockGitTreeTranslator) Prefetch(v0 context.Context, v1 api.CommitID, v2 api.CommitID, v3 []core.RepoRelPath) {
	m.PrefetchFunc.nextHook()(v0, v1, v2, v3)
	m.PrefetchFunc.appendCall(GitTreeTranslatorPrefetchFuncCall{v0, v1, v2, v3})
	return
}

// SetDefaultHook sets function that is called when the Prefetch method of
// the parent MockGitTreeTranslator instance is invoked and the hook queue
// is empty.
func (f *GitTreeTranslatorPrefetchFunc) SetDefaultHook(hook func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Prefetch method of the parent MockGitTreeTranslator instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *GitTreeTranslatorPrefetchFunc) PushHook(hook func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorPrefetchFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath) {
		return
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorPrefetchFunc) PushReturn() {
	f.PushHook(func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath) {
		return
	})
}

func (f *GitTreeTranslatorPrefetchFunc) nextHook() func(context.Context, api.CommitID, api.CommitID, []core.RepoRelPath) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorPrefetchFunc) appendCall(r0 GitTreeTranslatorPrefetchFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitTreeTranslatorPrefetchFuncCall objects
// describing the invocations of this function.
func (f *GitTreeTranslatorPrefetchFunc) History() []GitTreeTranslatorPrefetchFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorPrefetchFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorPrefetchFuncCall is an object that describes an
// invocation of method Prefetch on an instance of MockGitTreeTranslator.
type GitTreeTranslatorPrefetchFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.CommitID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 []core.RepoRelPath
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorPrefetchFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorPrefetchFuncCall) Results() []interface{} {
	return []interface{}{}
}

// GitTreeTranslatorTranslatePositionFunc describes the behavior when the
// TranslatePosition method of the parent MockGitTreeTranslator instance is
// invoked.
type GitTreeTranslatorTranslatePositionFunc struct {
	defaultHook func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (core.Option[scip.Position], error)
	hooks       []func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (core.Option[scip.Position], error)
	history     []GitTreeTranslatorTranslatePositionFuncCall
	mutex       sync.Mutex
}

// TranslatePosition delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitTreeTranslator) TranslatePosition(v0 context.Context, v1 api.CommitID, v2 api.CommitID, v3 core.RepoRelPath, v4 scip.Position) (core.Option[scip.Position], error) {
	r0, r1 := m.TranslatePositionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.TranslatePositionFunc.appendCall(GitTreeTranslatorTranslatePositionFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TranslatePosition
// method of the parent MockGitTreeTranslator instance is invoked and the
// hook queue is empty.
func (f *GitTreeTranslatorTranslatePositionFunc) SetDefaultHook(hook func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (core.Option[scip.Position], error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TranslatePosition method of the parent MockGitTreeTranslator instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitTreeTranslatorTranslatePositionFunc) PushHook(hook func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (core.Option[scip.Position], error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorTranslatePositionFunc) SetDefaultReturn(r0 core.Option[scip.Position], r1 error) {
	f.SetDefaultHook(func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (core.Option[scip.Position], error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorTranslatePositionFunc) PushReturn(r0 core.Option[scip.Position], r1 error) {
	f.PushHook(func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (core.Option[scip.Position], error) {
		return r0, r1
	})
}

func (f *GitTreeTranslatorTranslatePositionFunc) nextHook() func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Position) (core.Option[scip.Position], error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorTranslatePositionFunc) appendCall(r0 GitTreeTranslatorTranslatePositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitTreeTranslatorTranslatePositionFuncCall
// objects describing the invocations of this function.
func (f *GitTreeTranslatorTranslatePositionFunc) History() []GitTreeTranslatorTranslatePositionFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorTranslatePositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorTranslatePositionFuncCall is an object that describes an
// invocation of method TranslatePosition on an instance of
// MockGitTreeTranslator.
type GitTreeTranslatorTranslatePositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.CommitID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 core.RepoRelPath
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 scip.Position
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 core.Option[scip.Position]
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorTranslatePositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorTranslatePositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// GitTreeTranslatorTranslateRangeFunc describes the behavior when the
// TranslateRange method of the parent MockGitTreeTranslator instance is
// invoked.
type GitTreeTranslatorTranslateRangeFunc struct {
	defaultHook func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (core.Option[scip.Range], error)
	hooks       []func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (core.Option[scip.Range], error)
	history     []GitTreeTranslatorTranslateRangeFuncCall
	mutex       sync.Mutex
}

// TranslateRange delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitTreeTranslator) TranslateRange(v0 context.Context, v1 api.CommitID, v2 api.CommitID, v3 core.RepoRelPath, v4 scip.Range) (core.Option[scip.Range], error) {
	r0, r1 := m.TranslateRangeFunc.nextHook()(v0, v1, v2, v3, v4)
	m.TranslateRangeFunc.appendCall(GitTreeTranslatorTranslateRangeFuncCall{v0, v1, v2, v3, v4, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the TranslateRange
// method of the parent MockGitTreeTranslator instance is invoked and the
// hook queue is empty.
func (f *GitTreeTranslatorTranslateRangeFunc) SetDefaultHook(hook func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (core.Option[scip.Range], error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// TranslateRange method of the parent MockGitTreeTranslator instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitTreeTranslatorTranslateRangeFunc) PushHook(hook func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (core.Option[scip.Range], error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorTranslateRangeFunc) SetDefaultReturn(r0 core.Option[scip.Range], r1 error) {
	f.SetDefaultHook(func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (core.Option[scip.Range], error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorTranslateRangeFunc) PushReturn(r0 core.Option[scip.Range], r1 error) {
	f.PushHook(func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (core.Option[scip.Range], error) {
		return r0, r1
	})
}

func (f *GitTreeTranslatorTranslateRangeFunc) nextHook() func(context.Context, api.CommitID, api.CommitID, core.RepoRelPath, scip.Range) (core.Option[scip.Range], error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorTranslateRangeFunc) appendCall(r0 GitTreeTranslatorTranslateRangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitTreeTranslatorTranslateRangeFuncCall
// objects describing the invocations of this function.
func (f *GitTreeTranslatorTranslateRangeFunc) History() []GitTreeTranslatorTranslateRangeFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorTranslateRangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorTranslateRangeFuncCall is an object that describes an
// invocation of method TranslateRange on an instance of
// MockGitTreeTranslator.
type GitTreeTranslatorTranslateRangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.CommitID
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 api.CommitID
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 core.RepoRelPath
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 scip.Range
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 core.Option[scip.Range]
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorTranslateRangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorTranslateRangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockUploadService is a mock implementation of the UploadService interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav) used for
// unit testing.
type MockUploadService struct {
	// GetCompletedUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetCompletedUploadsByIDs.
	GetCompletedUploadsByIDsFunc *UploadServiceGetCompletedUploadsByIDsFunc
	// GetCompletedUploadsWithDefinitionsForMonikersFunc is an instance of a
	// mock function object controlling the behavior of the method
	// GetCompletedUploadsWithDefinitionsForMonikers.
	GetCompletedUploadsWithDefinitionsForMonikersFunc *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc
	// GetUploadIDsWithReferencesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadIDsWithReferences.
	GetUploadIDsWithReferencesFunc *UploadServiceGetUploadIDsWithReferencesFunc
	// InferClosestUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method InferClosestUploads.
	InferClosestUploadsFunc *UploadServiceInferClosestUploadsFunc
}

// NewMockUploadService creates a new mock of the UploadService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadService() *MockUploadService {
	return &MockUploadService{
		GetCompletedUploadsByIDsFunc: &UploadServiceGetCompletedUploadsByIDsFunc{
			defaultHook: func(context.Context, []int) (r0 []shared.CompletedUpload, r1 error) {
				return
			},
		},
		GetCompletedUploadsWithDefinitionsForMonikersFunc: &UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData) (r0 []shared.CompletedUpload, r1 error) {
				return
			},
		},
		GetUploadIDsWithReferencesFunc: &UploadServiceGetUploadIDsWithReferencesFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) (r0 []int, r1 int, r2 int, r3 error) {
				return
			},
		},
		InferClosestUploadsFunc: &UploadServiceInferClosestUploadsFunc{
			defaultHook: func(context.Context, shared.UploadMatchingOptions) (r0 []shared.CompletedUpload, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadService creates a new mock of the UploadService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadService() *MockUploadService {
	return &MockUploadService{
		GetCompletedUploadsByIDsFunc: &UploadServiceGetCompletedUploadsByIDsFunc{
			defaultHook: func(context.Context, []int) ([]shared.CompletedUpload, error) {
				panic("unexpected invocation of MockUploadService.GetCompletedUploadsByIDs")
			},
		},
		GetCompletedUploadsWithDefinitionsForMonikersFunc: &UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error) {
				panic("unexpected invocation of MockUploadService.GetCompletedUploadsWithDefinitionsForMonikers")
			},
		},
		GetUploadIDsWithReferencesFunc: &UploadServiceGetUploadIDsWithReferencesFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
				panic("unexpected invocation of MockUploadService.GetUploadIDsWithReferences")
			},
		},
		InferClosestUploadsFunc: &UploadServiceInferClosestUploadsFunc{
			defaultHook: func(context.Context, shared.UploadMatchingOptions) ([]shared.CompletedUpload, error) {
				panic("unexpected invocation of MockUploadService.InferClosestUploads")
			},
		},
	}
}

// NewMockUploadServiceFrom creates a new mock of the MockUploadService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadServiceFrom(i UploadService) *MockUploadService {
	return &MockUploadService{
		GetCompletedUploadsByIDsFunc: &UploadServiceGetCompletedUploadsByIDsFunc{
			defaultHook: i.GetCompletedUploadsByIDs,
		},
		GetCompletedUploadsWithDefinitionsForMonikersFunc: &UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc{
			defaultHook: i.GetCompletedUploadsWithDefinitionsForMonikers,
		},
		GetUploadIDsWithReferencesFunc: &UploadServiceGetUploadIDsWithReferencesFunc{
			defaultHook: i.GetUploadIDsWithReferences,
		},
		InferClosestUploadsFunc: &UploadServiceInferClosestUploadsFunc{
			defaultHook: i.InferClosestUploads,
		},
	}
}

// UploadServiceGetCompletedUploadsByIDsFunc describes the behavior when the
// GetCompletedUploadsByIDs method of the parent MockUploadService instance
// is invoked.
type UploadServiceGetCompletedUploadsByIDsFunc struct {
	defaultHook func(context.Context, []int) ([]shared.CompletedUpload, error)
	hooks       []func(context.Context, []int) ([]shared.CompletedUpload, error)
	history     []UploadServiceGetCompletedUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetCompletedUploadsByIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadService) GetCompletedUploadsByIDs(v0 context.Context, v1 []int) ([]shared.CompletedUpload, error) {
	r0, r1 := m.GetCompletedUploadsByIDsFunc.nextHook()(v0, v1)
	m.GetCompletedUploadsByIDsFunc.appendCall(UploadServiceGetCompletedUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetCompletedUploadsByIDs method of the parent MockUploadService instance
// is invoked and the hook queue is empty.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, []int) ([]shared.CompletedUpload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCompletedUploadsByIDs method of the parent MockUploadService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) PushHook(hook func(context.Context, []int) ([]shared.CompletedUpload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) SetDefaultReturn(r0 []shared.CompletedUpload, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) ([]shared.CompletedUpload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) PushReturn(r0 []shared.CompletedUpload, r1 error) {
	f.PushHook(func(context.Context, []int) ([]shared.CompletedUpload, error) {
		return r0, r1
	})
}

func (f *UploadServiceGetCompletedUploadsByIDsFunc) nextHook() func(context.Context, []int) ([]shared.CompletedUpload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceGetCompletedUploadsByIDsFunc) appendCall(r0 UploadServiceGetCompletedUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadServiceGetCompletedUploadsByIDsFuncCall objects describing the
// invocations of this function.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) History() []UploadServiceGetCompletedUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceGetCompletedUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceGetCompletedUploadsByIDsFuncCall is an object that describes
// an invocation of method GetCompletedUploadsByIDs on an instance of
// MockUploadService.
type UploadServiceGetCompletedUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.CompletedUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceGetCompletedUploadsByIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceGetCompletedUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc describes
// the behavior when the GetCompletedUploadsWithDefinitionsForMonikers
// method of the parent MockUploadService instance is invoked.
type UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc struct {
	defaultHook func(context.Context, []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error)
	hooks       []func(context.Context, []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error)
	history     []UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall
	mutex       sync.Mutex
}

// GetCompletedUploadsWithDefinitionsForMonikers delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockUploadService) GetCompletedUploadsWithDefinitionsForMonikers(v0 context.Context, v1 []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error) {
	r0, r1 := m.GetCompletedUploadsWithDefinitionsForMonikersFunc.nextHook()(v0, v1)
	m.GetCompletedUploadsWithDefinitionsForMonikersFunc.appendCall(UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetCompletedUploadsWithDefinitionsForMonikers method of the parent
// MockUploadService instance is invoked and the hook queue is empty.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) SetDefaultHook(hook func(context.Context, []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCompletedUploadsWithDefinitionsForMonikers method of the parent
// MockUploadService instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) PushHook(hook func(context.Context, []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) SetDefaultReturn(r0 []shared.CompletedUpload, r1 error) {
	f.SetDefaultHook(func(context.Context, []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) PushReturn(r0 []shared.CompletedUpload, r1 error) {
	f.PushHook(func(context.Context, []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error) {
		return r0, r1
	})
}

func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) nextHook() func(context.Context, []precise.QualifiedMonikerData) ([]shared.CompletedUpload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) appendCall(r0 UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall
// objects describing the invocations of this function.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) History() []UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall is an
// object that describes an invocation of method
// GetCompletedUploadsWithDefinitionsForMonikers on an instance of
// MockUploadService.
type UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []precise.QualifiedMonikerData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.CompletedUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadServiceGetUploadIDsWithReferencesFunc describes the behavior when
// the GetUploadIDsWithReferences method of the parent MockUploadService
// instance is invoked.
type UploadServiceGetUploadIDsWithReferencesFunc struct {
	defaultHook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)
	hooks       []func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)
	history     []UploadServiceGetUploadIDsWithReferencesFuncCall
	mutex       sync.Mutex
}

// GetUploadIDsWithReferences delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUploadService) GetUploadIDsWithReferences(v0 context.Context, v1 []precise.QualifiedMonikerData, v2 []int, v3 int, v4 string, v5 int, v6 int) ([]int, int, int, error) {
	r0, r1, r2, r3 := m.GetUploadIDsWithReferencesFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetUploadIDsWithReferencesFunc.appendCall(UploadServiceGetUploadIDsWithReferencesFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// GetUploadIDsWithReferences method of the parent MockUploadService
// instance is invoked and the hook queue is empty.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) SetDefaultHook(hook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadIDsWithReferences method of the parent MockUploadService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) PushHook(hook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) SetDefaultReturn(r0 []int, r1 int, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) PushReturn(r0 []int, r1 int, r2 int, r3 error) {
	f.PushHook(func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *UploadServiceGetUploadIDsWithReferencesFunc) nextHook() func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceGetUploadIDsWithReferencesFunc) appendCall(r0 UploadServiceGetUploadIDsWithReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadServiceGetUploadIDsWithReferencesFuncCall objects describing the
// invocations of this function.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) History() []UploadServiceGetUploadIDsWithReferencesFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceGetUploadIDsWithReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceGetUploadIDsWithReferencesFuncCall is an object that
// describes an invocation of method GetUploadIDsWithReferences on an
// instance of MockUploadService.
type UploadServiceGetUploadIDsWithReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []precise.QualifiedMonikerData
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceGetUploadIDsWithReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceGetUploadIDsWithReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// UploadServiceInferClosestUploadsFunc describes the behavior when the
// InferClosestUploads method of the parent MockUploadService instance is
// invoked.
type UploadServiceInferClosestUploadsFunc struct {
	defaultHook func(context.Context, shared.UploadMatchingOptions) ([]shared.CompletedUpload, error)
	hooks       []func(context.Context, shared.UploadMatchingOptions) ([]shared.CompletedUpload, error)
	history     []UploadServiceInferClosestUploadsFuncCall
	mutex       sync.Mutex
}

// InferClosestUploads delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadService) InferClosestUploads(v0 context.Context, v1 shared.UploadMatchingOptions) ([]shared.CompletedUpload, error) {
	r0, r1 := m.InferClosestUploadsFunc.nextHook()(v0, v1)
	m.InferClosestUploadsFunc.appendCall(UploadServiceInferClosestUploadsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the InferClosestUploads
// method of the parent MockUploadService instance is invoked and the hook
// queue is empty.
func (f *UploadServiceInferClosestUploadsFunc) SetDefaultHook(hook func(context.Context, shared.UploadMatchingOptions) ([]shared.CompletedUpload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InferClosestUploads method of the parent MockUploadService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadServiceInferClosestUploadsFunc) PushHook(hook func(context.Context, shared.UploadMatchingOptions) ([]shared.CompletedUpload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceInferClosestUploadsFunc) SetDefaultReturn(r0 []shared.CompletedUpload, r1 error) {
	f.SetDefaultHook(func(context.Context, shared.UploadMatchingOptions) ([]shared.CompletedUpload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceInferClosestUploadsFunc) PushReturn(r0 []shared.CompletedUpload, r1 error) {
	f.PushHook(func(context.Context, shared.UploadMatchingOptions) ([]shared.CompletedUpload, error) {
		return r0, r1
	})
}

func (f *UploadServiceInferClosestUploadsFunc) nextHook() func(context.Context, shared.UploadMatchingOptions) ([]shared.CompletedUpload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceInferClosestUploadsFunc) appendCall(r0 UploadServiceInferClosestUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadServiceInferClosestUploadsFuncCall
// objects describing the invocations of this function.
func (f *UploadServiceInferClosestUploadsFunc) History() []UploadServiceInferClosestUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceInferClosestUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceInferClosestUploadsFuncCall is an object that describes an
// invocation of method InferClosestUploads on an instance of
// MockUploadService.
type UploadServiceInferClosestUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.UploadMatchingOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.CompletedUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceInferClosestUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceInferClosestUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
