// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package codenav

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/codenav/shared"
	shared1 "github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/shared"
	precise "github.com/sourcegraph/sourcegraph/lib/codeintel/precise"
)

// MockGitTreeTranslator is a mock implementation of the GitTreeTranslator
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav) used for
// unit testing.
type MockGitTreeTranslator struct {
	// GetSourceCommitFunc is an instance of a mock function object
	// controlling the behavior of the method GetSourceCommit.
	GetSourceCommitFunc *GitTreeTranslatorGetSourceCommitFunc
	// GetTargetCommitPositionFromSourcePositionFunc is an instance of a
	// mock function object controlling the behavior of the method
	// GetTargetCommitPositionFromSourcePosition.
	GetTargetCommitPositionFromSourcePositionFunc *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc
	// GetTargetCommitRangeFromSourceRangeFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetTargetCommitRangeFromSourceRange.
	GetTargetCommitRangeFromSourceRangeFunc *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc
}

// NewMockGitTreeTranslator creates a new mock of the GitTreeTranslator
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockGitTreeTranslator() *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		GetSourceCommitFunc: &GitTreeTranslatorGetSourceCommitFunc{
			defaultHook: func() (r0 api.CommitID) {
				return
			},
		},
		GetTargetCommitPositionFromSourcePositionFunc: &GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc{
			defaultHook: func(context.Context, string, string, shared.Position, bool) (r0 shared.Position, r1 bool, r2 error) {
				return
			},
		},
		GetTargetCommitRangeFromSourceRangeFunc: &GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc{
			defaultHook: func(context.Context, string, string, shared.Range, bool) (r0 shared.Range, r1 bool, r2 error) {
				return
			},
		},
	}
}

// NewStrictMockGitTreeTranslator creates a new mock of the
// GitTreeTranslator interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockGitTreeTranslator() *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		GetSourceCommitFunc: &GitTreeTranslatorGetSourceCommitFunc{
			defaultHook: func() api.CommitID {
				panic("unexpected invocation of MockGitTreeTranslator.GetSourceCommit")
			},
		},
		GetTargetCommitPositionFromSourcePositionFunc: &GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc{
			defaultHook: func(context.Context, string, string, shared.Position, bool) (shared.Position, bool, error) {
				panic("unexpected invocation of MockGitTreeTranslator.GetTargetCommitPositionFromSourcePosition")
			},
		},
		GetTargetCommitRangeFromSourceRangeFunc: &GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc{
			defaultHook: func(context.Context, string, string, shared.Range, bool) (shared.Range, bool, error) {
				panic("unexpected invocation of MockGitTreeTranslator.GetTargetCommitRangeFromSourceRange")
			},
		},
	}
}

// NewMockGitTreeTranslatorFrom creates a new mock of the
// MockGitTreeTranslator interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockGitTreeTranslatorFrom(i GitTreeTranslator) *MockGitTreeTranslator {
	return &MockGitTreeTranslator{
		GetSourceCommitFunc: &GitTreeTranslatorGetSourceCommitFunc{
			defaultHook: i.GetSourceCommit,
		},
		GetTargetCommitPositionFromSourcePositionFunc: &GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc{
			defaultHook: i.GetTargetCommitPositionFromSourcePosition,
		},
		GetTargetCommitRangeFromSourceRangeFunc: &GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc{
			defaultHook: i.GetTargetCommitRangeFromSourceRange,
		},
	}
}

// GitTreeTranslatorGetSourceCommitFunc describes the behavior when the
// GetSourceCommit method of the parent MockGitTreeTranslator instance is
// invoked.
type GitTreeTranslatorGetSourceCommitFunc struct {
	defaultHook func() api.CommitID
	hooks       []func() api.CommitID
	history     []GitTreeTranslatorGetSourceCommitFuncCall
	mutex       sync.Mutex
}

// GetSourceCommit delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockGitTreeTranslator) GetSourceCommit() api.CommitID {
	r0 := m.GetSourceCommitFunc.nextHook()()
	m.GetSourceCommitFunc.appendCall(GitTreeTranslatorGetSourceCommitFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the GetSourceCommit
// method of the parent MockGitTreeTranslator instance is invoked and the
// hook queue is empty.
func (f *GitTreeTranslatorGetSourceCommitFunc) SetDefaultHook(hook func() api.CommitID) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSourceCommit method of the parent MockGitTreeTranslator instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *GitTreeTranslatorGetSourceCommitFunc) PushHook(hook func() api.CommitID) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorGetSourceCommitFunc) SetDefaultReturn(r0 api.CommitID) {
	f.SetDefaultHook(func() api.CommitID {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorGetSourceCommitFunc) PushReturn(r0 api.CommitID) {
	f.PushHook(func() api.CommitID {
		return r0
	})
}

func (f *GitTreeTranslatorGetSourceCommitFunc) nextHook() func() api.CommitID {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorGetSourceCommitFunc) appendCall(r0 GitTreeTranslatorGetSourceCommitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of GitTreeTranslatorGetSourceCommitFuncCall
// objects describing the invocations of this function.
func (f *GitTreeTranslatorGetSourceCommitFunc) History() []GitTreeTranslatorGetSourceCommitFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorGetSourceCommitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorGetSourceCommitFuncCall is an object that describes an
// invocation of method GetSourceCommit on an instance of
// MockGitTreeTranslator.
type GitTreeTranslatorGetSourceCommitFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.CommitID
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorGetSourceCommitFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorGetSourceCommitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc describes
// the behavior when the GetTargetCommitPositionFromSourcePosition method of
// the parent MockGitTreeTranslator instance is invoked.
type GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc struct {
	defaultHook func(context.Context, string, string, shared.Position, bool) (shared.Position, bool, error)
	hooks       []func(context.Context, string, string, shared.Position, bool) (shared.Position, bool, error)
	history     []GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall
	mutex       sync.Mutex
}

// GetTargetCommitPositionFromSourcePosition delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockGitTreeTranslator) GetTargetCommitPositionFromSourcePosition(v0 context.Context, v1 string, v2 string, v3 shared.Position, v4 bool) (shared.Position, bool, error) {
	r0, r1, r2 := m.GetTargetCommitPositionFromSourcePositionFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetTargetCommitPositionFromSourcePositionFunc.appendCall(GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetTargetCommitPositionFromSourcePosition method of the parent
// MockGitTreeTranslator instance is invoked and the hook queue is empty.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) SetDefaultHook(hook func(context.Context, string, string, shared.Position, bool) (shared.Position, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTargetCommitPositionFromSourcePosition method of the parent
// MockGitTreeTranslator instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) PushHook(hook func(context.Context, string, string, shared.Position, bool) (shared.Position, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) SetDefaultReturn(r0 shared.Position, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, shared.Position, bool) (shared.Position, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) PushReturn(r0 shared.Position, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, string, shared.Position, bool) (shared.Position, bool, error) {
		return r0, r1, r2
	})
}

func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) nextHook() func(context.Context, string, string, shared.Position, bool) (shared.Position, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) appendCall(r0 GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall
// objects describing the invocations of this function.
func (f *GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFunc) History() []GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall is an
// object that describes an invocation of method
// GetTargetCommitPositionFromSourcePosition on an instance of
// MockGitTreeTranslator.
type GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 shared.Position
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.Position
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitPositionFromSourcePositionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc describes the
// behavior when the GetTargetCommitRangeFromSourceRange method of the
// parent MockGitTreeTranslator instance is invoked.
type GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc struct {
	defaultHook func(context.Context, string, string, shared.Range, bool) (shared.Range, bool, error)
	hooks       []func(context.Context, string, string, shared.Range, bool) (shared.Range, bool, error)
	history     []GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall
	mutex       sync.Mutex
}

// GetTargetCommitRangeFromSourceRange delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockGitTreeTranslator) GetTargetCommitRangeFromSourceRange(v0 context.Context, v1 string, v2 string, v3 shared.Range, v4 bool) (shared.Range, bool, error) {
	r0, r1, r2 := m.GetTargetCommitRangeFromSourceRangeFunc.nextHook()(v0, v1, v2, v3, v4)
	m.GetTargetCommitRangeFromSourceRangeFunc.appendCall(GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall{v0, v1, v2, v3, v4, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetTargetCommitRangeFromSourceRange method of the parent
// MockGitTreeTranslator instance is invoked and the hook queue is empty.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) SetDefaultHook(hook func(context.Context, string, string, shared.Range, bool) (shared.Range, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetTargetCommitRangeFromSourceRange method of the parent
// MockGitTreeTranslator instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) PushHook(hook func(context.Context, string, string, shared.Range, bool) (shared.Range, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) SetDefaultReturn(r0 shared.Range, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, string, shared.Range, bool) (shared.Range, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) PushReturn(r0 shared.Range, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, string, shared.Range, bool) (shared.Range, bool, error) {
		return r0, r1, r2
	})
}

func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) nextHook() func(context.Context, string, string, shared.Range, bool) (shared.Range, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) appendCall(r0 GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall objects
// describing the invocations of this function.
func (f *GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFunc) History() []GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall {
	f.mutex.Lock()
	history := make([]GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall is an object
// that describes an invocation of method
// GetTargetCommitRangeFromSourceRange on an instance of
// MockGitTreeTranslator.
type GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 shared.Range
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.Range
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c GitTreeTranslatorGetTargetCommitRangeFromSourceRangeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// MockUploadService is a mock implementation of the UploadService interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/codenav) used for
// unit testing.
type MockUploadService struct {
	// GetCompletedUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetCompletedUploadsByIDs.
	GetCompletedUploadsByIDsFunc *UploadServiceGetCompletedUploadsByIDsFunc
	// GetCompletedUploadsWithDefinitionsForMonikersFunc is an instance of a
	// mock function object controlling the behavior of the method
	// GetCompletedUploadsWithDefinitionsForMonikers.
	GetCompletedUploadsWithDefinitionsForMonikersFunc *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc
	// GetUploadIDsWithReferencesFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetUploadIDsWithReferences.
	GetUploadIDsWithReferencesFunc *UploadServiceGetUploadIDsWithReferencesFunc
	// InferClosestUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method InferClosestUploads.
	InferClosestUploadsFunc *UploadServiceInferClosestUploadsFunc
}

// NewMockUploadService creates a new mock of the UploadService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadService() *MockUploadService {
	return &MockUploadService{
		GetCompletedUploadsByIDsFunc: &UploadServiceGetCompletedUploadsByIDsFunc{
			defaultHook: func(context.Context, []int) (r0 []shared1.CompletedUpload, r1 error) {
				return
			},
		},
		GetCompletedUploadsWithDefinitionsForMonikersFunc: &UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData) (r0 []shared1.CompletedUpload, r1 error) {
				return
			},
		},
		GetUploadIDsWithReferencesFunc: &UploadServiceGetUploadIDsWithReferencesFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) (r0 []int, r1 int, r2 int, r3 error) {
				return
			},
		},
		InferClosestUploadsFunc: &UploadServiceInferClosestUploadsFunc{
			defaultHook: func(context.Context, shared1.UploadMatchingOptions) (r0 []shared1.CompletedUpload, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadService creates a new mock of the UploadService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadService() *MockUploadService {
	return &MockUploadService{
		GetCompletedUploadsByIDsFunc: &UploadServiceGetCompletedUploadsByIDsFunc{
			defaultHook: func(context.Context, []int) ([]shared1.CompletedUpload, error) {
				panic("unexpected invocation of MockUploadService.GetCompletedUploadsByIDs")
			},
		},
		GetCompletedUploadsWithDefinitionsForMonikersFunc: &UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error) {
				panic("unexpected invocation of MockUploadService.GetCompletedUploadsWithDefinitionsForMonikers")
			},
		},
		GetUploadIDsWithReferencesFunc: &UploadServiceGetUploadIDsWithReferencesFunc{
			defaultHook: func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
				panic("unexpected invocation of MockUploadService.GetUploadIDsWithReferences")
			},
		},
		InferClosestUploadsFunc: &UploadServiceInferClosestUploadsFunc{
			defaultHook: func(context.Context, shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error) {
				panic("unexpected invocation of MockUploadService.InferClosestUploads")
			},
		},
	}
}

// NewMockUploadServiceFrom creates a new mock of the MockUploadService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadServiceFrom(i UploadService) *MockUploadService {
	return &MockUploadService{
		GetCompletedUploadsByIDsFunc: &UploadServiceGetCompletedUploadsByIDsFunc{
			defaultHook: i.GetCompletedUploadsByIDs,
		},
		GetCompletedUploadsWithDefinitionsForMonikersFunc: &UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc{
			defaultHook: i.GetCompletedUploadsWithDefinitionsForMonikers,
		},
		GetUploadIDsWithReferencesFunc: &UploadServiceGetUploadIDsWithReferencesFunc{
			defaultHook: i.GetUploadIDsWithReferences,
		},
		InferClosestUploadsFunc: &UploadServiceInferClosestUploadsFunc{
			defaultHook: i.InferClosestUploads,
		},
	}
}

// UploadServiceGetCompletedUploadsByIDsFunc describes the behavior when the
// GetCompletedUploadsByIDs method of the parent MockUploadService instance
// is invoked.
type UploadServiceGetCompletedUploadsByIDsFunc struct {
	defaultHook func(context.Context, []int) ([]shared1.CompletedUpload, error)
	hooks       []func(context.Context, []int) ([]shared1.CompletedUpload, error)
	history     []UploadServiceGetCompletedUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetCompletedUploadsByIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadService) GetCompletedUploadsByIDs(v0 context.Context, v1 []int) ([]shared1.CompletedUpload, error) {
	r0, r1 := m.GetCompletedUploadsByIDsFunc.nextHook()(v0, v1)
	m.GetCompletedUploadsByIDsFunc.appendCall(UploadServiceGetCompletedUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetCompletedUploadsByIDs method of the parent MockUploadService instance
// is invoked and the hook queue is empty.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, []int) ([]shared1.CompletedUpload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCompletedUploadsByIDs method of the parent MockUploadService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) PushHook(hook func(context.Context, []int) ([]shared1.CompletedUpload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) SetDefaultReturn(r0 []shared1.CompletedUpload, r1 error) {
	f.SetDefaultHook(func(context.Context, []int) ([]shared1.CompletedUpload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) PushReturn(r0 []shared1.CompletedUpload, r1 error) {
	f.PushHook(func(context.Context, []int) ([]shared1.CompletedUpload, error) {
		return r0, r1
	})
}

func (f *UploadServiceGetCompletedUploadsByIDsFunc) nextHook() func(context.Context, []int) ([]shared1.CompletedUpload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceGetCompletedUploadsByIDsFunc) appendCall(r0 UploadServiceGetCompletedUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadServiceGetCompletedUploadsByIDsFuncCall objects describing the
// invocations of this function.
func (f *UploadServiceGetCompletedUploadsByIDsFunc) History() []UploadServiceGetCompletedUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceGetCompletedUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceGetCompletedUploadsByIDsFuncCall is an object that describes
// an invocation of method GetCompletedUploadsByIDs on an instance of
// MockUploadService.
type UploadServiceGetCompletedUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.CompletedUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceGetCompletedUploadsByIDsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceGetCompletedUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc describes
// the behavior when the GetCompletedUploadsWithDefinitionsForMonikers
// method of the parent MockUploadService instance is invoked.
type UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc struct {
	defaultHook func(context.Context, []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error)
	hooks       []func(context.Context, []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error)
	history     []UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall
	mutex       sync.Mutex
}

// GetCompletedUploadsWithDefinitionsForMonikers delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockUploadService) GetCompletedUploadsWithDefinitionsForMonikers(v0 context.Context, v1 []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error) {
	r0, r1 := m.GetCompletedUploadsWithDefinitionsForMonikersFunc.nextHook()(v0, v1)
	m.GetCompletedUploadsWithDefinitionsForMonikersFunc.appendCall(UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetCompletedUploadsWithDefinitionsForMonikers method of the parent
// MockUploadService instance is invoked and the hook queue is empty.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) SetDefaultHook(hook func(context.Context, []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCompletedUploadsWithDefinitionsForMonikers method of the parent
// MockUploadService instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) PushHook(hook func(context.Context, []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) SetDefaultReturn(r0 []shared1.CompletedUpload, r1 error) {
	f.SetDefaultHook(func(context.Context, []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) PushReturn(r0 []shared1.CompletedUpload, r1 error) {
	f.PushHook(func(context.Context, []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error) {
		return r0, r1
	})
}

func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) nextHook() func(context.Context, []precise.QualifiedMonikerData) ([]shared1.CompletedUpload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) appendCall(r0 UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall
// objects describing the invocations of this function.
func (f *UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFunc) History() []UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall is an
// object that describes an invocation of method
// GetCompletedUploadsWithDefinitionsForMonikers on an instance of
// MockUploadService.
type UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []precise.QualifiedMonikerData
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.CompletedUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceGetCompletedUploadsWithDefinitionsForMonikersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadServiceGetUploadIDsWithReferencesFunc describes the behavior when
// the GetUploadIDsWithReferences method of the parent MockUploadService
// instance is invoked.
type UploadServiceGetUploadIDsWithReferencesFunc struct {
	defaultHook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)
	hooks       []func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)
	history     []UploadServiceGetUploadIDsWithReferencesFuncCall
	mutex       sync.Mutex
}

// GetUploadIDsWithReferences delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUploadService) GetUploadIDsWithReferences(v0 context.Context, v1 []precise.QualifiedMonikerData, v2 []int, v3 int, v4 string, v5 int, v6 int) ([]int, int, int, error) {
	r0, r1, r2, r3 := m.GetUploadIDsWithReferencesFunc.nextHook()(v0, v1, v2, v3, v4, v5, v6)
	m.GetUploadIDsWithReferencesFunc.appendCall(UploadServiceGetUploadIDsWithReferencesFuncCall{v0, v1, v2, v3, v4, v5, v6, r0, r1, r2, r3})
	return r0, r1, r2, r3
}

// SetDefaultHook sets function that is called when the
// GetUploadIDsWithReferences method of the parent MockUploadService
// instance is invoked and the hook queue is empty.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) SetDefaultHook(hook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadIDsWithReferences method of the parent MockUploadService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) PushHook(hook func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) SetDefaultReturn(r0 []int, r1 int, r2 int, r3 error) {
	f.SetDefaultHook(func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
		return r0, r1, r2, r3
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) PushReturn(r0 []int, r1 int, r2 int, r3 error) {
	f.PushHook(func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
		return r0, r1, r2, r3
	})
}

func (f *UploadServiceGetUploadIDsWithReferencesFunc) nextHook() func(context.Context, []precise.QualifiedMonikerData, []int, int, string, int, int) ([]int, int, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceGetUploadIDsWithReferencesFunc) appendCall(r0 UploadServiceGetUploadIDsWithReferencesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadServiceGetUploadIDsWithReferencesFuncCall objects describing the
// invocations of this function.
func (f *UploadServiceGetUploadIDsWithReferencesFunc) History() []UploadServiceGetUploadIDsWithReferencesFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceGetUploadIDsWithReferencesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceGetUploadIDsWithReferencesFuncCall is an object that
// describes an invocation of method GetUploadIDsWithReferences on an
// instance of MockUploadService.
type UploadServiceGetUploadIDsWithReferencesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []precise.QualifiedMonikerData
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 int
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 string
	// Arg5 is the value of the 6th argument passed to this method
	// invocation.
	Arg5 int
	// Arg6 is the value of the 7th argument passed to this method
	// invocation.
	Arg6 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 int
	// Result3 is the value of the 4th result returned from this method
	// invocation.
	Result3 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceGetUploadIDsWithReferencesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4, c.Arg5, c.Arg6}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceGetUploadIDsWithReferencesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2, c.Result3}
}

// UploadServiceInferClosestUploadsFunc describes the behavior when the
// InferClosestUploads method of the parent MockUploadService instance is
// invoked.
type UploadServiceInferClosestUploadsFunc struct {
	defaultHook func(context.Context, shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error)
	hooks       []func(context.Context, shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error)
	history     []UploadServiceInferClosestUploadsFuncCall
	mutex       sync.Mutex
}

// InferClosestUploads delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadService) InferClosestUploads(v0 context.Context, v1 shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error) {
	r0, r1 := m.InferClosestUploadsFunc.nextHook()(v0, v1)
	m.InferClosestUploadsFunc.appendCall(UploadServiceInferClosestUploadsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the InferClosestUploads
// method of the parent MockUploadService instance is invoked and the hook
// queue is empty.
func (f *UploadServiceInferClosestUploadsFunc) SetDefaultHook(hook func(context.Context, shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InferClosestUploads method of the parent MockUploadService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadServiceInferClosestUploadsFunc) PushHook(hook func(context.Context, shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadServiceInferClosestUploadsFunc) SetDefaultReturn(r0 []shared1.CompletedUpload, r1 error) {
	f.SetDefaultHook(func(context.Context, shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadServiceInferClosestUploadsFunc) PushReturn(r0 []shared1.CompletedUpload, r1 error) {
	f.PushHook(func(context.Context, shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error) {
		return r0, r1
	})
}

func (f *UploadServiceInferClosestUploadsFunc) nextHook() func(context.Context, shared1.UploadMatchingOptions) ([]shared1.CompletedUpload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadServiceInferClosestUploadsFunc) appendCall(r0 UploadServiceInferClosestUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadServiceInferClosestUploadsFuncCall
// objects describing the invocations of this function.
func (f *UploadServiceInferClosestUploadsFunc) History() []UploadServiceInferClosestUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadServiceInferClosestUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadServiceInferClosestUploadsFuncCall is an object that describes an
// invocation of method InferClosestUploads on an instance of
// MockUploadService.
type UploadServiceInferClosestUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared1.UploadMatchingOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared1.CompletedUpload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadServiceInferClosestUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadServiceInferClosestUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
