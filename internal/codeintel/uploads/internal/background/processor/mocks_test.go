// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package processor

import (
	"context"
	"sync"
	"time"

	sqlf "github.com/keegancsmith/sqlf"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	basestore "github.com/sourcegraph/sourcegraph/internal/database/basestore"
	executor "github.com/sourcegraph/sourcegraph/internal/executor"
	types "github.com/sourcegraph/sourcegraph/internal/types"
	workerutil "github.com/sourcegraph/sourcegraph/internal/workerutil"
	store "github.com/sourcegraph/sourcegraph/internal/workerutil/dbworker/store"
)

// MockRepoStore is a mock implementation of the RepoStore interface (from
// the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/internal/background/processor)
// used for unit testing.
type MockRepoStore struct {
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *RepoStoreGetFunc
}

// NewMockRepoStore creates a new mock of the RepoStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (r0 *types.Repo, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockRepoStore creates a new mock of the RepoStore interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockRepoStore() *MockRepoStore {
	return &MockRepoStore{
		GetFunc: &RepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.Repo, error) {
				panic("unexpected invocation of MockRepoStore.Get")
			},
		},
	}
}

// NewMockRepoStoreFrom creates a new mock of the MockRepoStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockRepoStoreFrom(i RepoStore) *MockRepoStore {
	return &MockRepoStore{
		GetFunc: &RepoStoreGetFunc{
			defaultHook: i.Get,
		},
	}
}

// RepoStoreGetFunc describes the behavior when the Get method of the parent
// MockRepoStore instance is invoked.
type RepoStoreGetFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoID) (*types.Repo, error)
	history     []RepoStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockRepoStore) Get(v0 context.Context, v1 api.RepoID) (*types.Repo, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(RepoStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockRepoStore instance is invoked and the hook queue is empty.
func (f *RepoStoreGetFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *RepoStoreGetFunc) PushHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *RepoStoreGetFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *RepoStoreGetFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *RepoStoreGetFunc) nextHook() func(context.Context, api.RepoID) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoStoreGetFunc) appendCall(r0 RepoStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of RepoStoreGetFuncCall objects describing the
// invocations of this function.
func (f *RepoStoreGetFunc) History() []RepoStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]RepoStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoStoreGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockRepoStore.
type RepoStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockWorkerStore is a mock implementation of the Store interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/workerutil/dbworker/store)
// used for unit testing.
type MockWorkerStore[T workerutil.Record] struct {
	// AddExecutionLogEntryFunc is an instance of a mock function object
	// controlling the behavior of the method AddExecutionLogEntry.
	AddExecutionLogEntryFunc *WorkerStoreAddExecutionLogEntryFunc[T]
	// DequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Dequeue.
	DequeueFunc *WorkerStoreDequeueFunc[T]
	// HandleFunc is an instance of a mock function object controlling the
	// behavior of the method Handle.
	HandleFunc *WorkerStoreHandleFunc[T]
	// HeartbeatFunc is an instance of a mock function object controlling
	// the behavior of the method Heartbeat.
	HeartbeatFunc *WorkerStoreHeartbeatFunc[T]
	// MarkCompleteFunc is an instance of a mock function object controlling
	// the behavior of the method MarkComplete.
	MarkCompleteFunc *WorkerStoreMarkCompleteFunc[T]
	// MarkErroredFunc is an instance of a mock function object controlling
	// the behavior of the method MarkErrored.
	MarkErroredFunc *WorkerStoreMarkErroredFunc[T]
	// MarkFailedFunc is an instance of a mock function object controlling
	// the behavior of the method MarkFailed.
	MarkFailedFunc *WorkerStoreMarkFailedFunc[T]
	// MaxDurationInQueueFunc is an instance of a mock function object
	// controlling the behavior of the method MaxDurationInQueue.
	MaxDurationInQueueFunc *WorkerStoreMaxDurationInQueueFunc[T]
	// QueuedCountFunc is an instance of a mock function object controlling
	// the behavior of the method QueuedCount.
	QueuedCountFunc *WorkerStoreQueuedCountFunc[T]
	// RequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Requeue.
	RequeueFunc *WorkerStoreRequeueFunc[T]
	// ResetStalledFunc is an instance of a mock function object controlling
	// the behavior of the method ResetStalled.
	ResetStalledFunc *WorkerStoreResetStalledFunc[T]
	// UpdateExecutionLogEntryFunc is an instance of a mock function object
	// controlling the behavior of the method UpdateExecutionLogEntry.
	UpdateExecutionLogEntryFunc *WorkerStoreUpdateExecutionLogEntryFunc[T]
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *WorkerStoreWithFunc[T]
}

// NewMockWorkerStore creates a new mock of the Store interface. All methods
// return zero values for all results, unless overwritten.
func NewMockWorkerStore[T workerutil.Record]() *MockWorkerStore[T] {
	return &MockWorkerStore[T]{
		AddExecutionLogEntryFunc: &WorkerStoreAddExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (r0 int, r1 error) {
				return
			},
		},
		DequeueFunc: &WorkerStoreDequeueFunc[T]{
			defaultHook: func(context.Context, string, []*sqlf.Query) (r0 T, r1 bool, r2 error) {
				return
			},
		},
		HandleFunc: &WorkerStoreHandleFunc[T]{
			defaultHook: func() (r0 basestore.TransactableHandle) {
				return
			},
		},
		HeartbeatFunc: &WorkerStoreHeartbeatFunc[T]{
			defaultHook: func(context.Context, []string, store.HeartbeatOptions) (r0 []string, r1 []string, r2 error) {
				return
			},
		},
		MarkCompleteFunc: &WorkerStoreMarkCompleteFunc[T]{
			defaultHook: func(context.Context, int, store.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MarkErroredFunc: &WorkerStoreMarkErroredFunc[T]{
			defaultHook: func(context.Context, int, string, store.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MarkFailedFunc: &WorkerStoreMarkFailedFunc[T]{
			defaultHook: func(context.Context, int, string, store.MarkFinalOptions) (r0 bool, r1 error) {
				return
			},
		},
		MaxDurationInQueueFunc: &WorkerStoreMaxDurationInQueueFunc[T]{
			defaultHook: func(context.Context) (r0 time.Duration, r1 error) {
				return
			},
		},
		QueuedCountFunc: &WorkerStoreQueuedCountFunc[T]{
			defaultHook: func(context.Context, bool) (r0 int, r1 error) {
				return
			},
		},
		RequeueFunc: &WorkerStoreRequeueFunc[T]{
			defaultHook: func(context.Context, int, time.Time) (r0 error) {
				return
			},
		},
		ResetStalledFunc: &WorkerStoreResetStalledFunc[T]{
			defaultHook: func(context.Context) (r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
				return
			},
		},
		UpdateExecutionLogEntryFunc: &WorkerStoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (r0 error) {
				return
			},
		},
		WithFunc: &WorkerStoreWithFunc[T]{
			defaultHook: func(basestore.ShareableStore) (r0 store.Store[T]) {
				return
			},
		},
	}
}

// NewStrictMockWorkerStore creates a new mock of the Store interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockWorkerStore[T workerutil.Record]() *MockWorkerStore[T] {
	return &MockWorkerStore[T]{
		AddExecutionLogEntryFunc: &WorkerStoreAddExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error) {
				panic("unexpected invocation of MockWorkerStore.AddExecutionLogEntry")
			},
		},
		DequeueFunc: &WorkerStoreDequeueFunc[T]{
			defaultHook: func(context.Context, string, []*sqlf.Query) (T, bool, error) {
				panic("unexpected invocation of MockWorkerStore.Dequeue")
			},
		},
		HandleFunc: &WorkerStoreHandleFunc[T]{
			defaultHook: func() basestore.TransactableHandle {
				panic("unexpected invocation of MockWorkerStore.Handle")
			},
		},
		HeartbeatFunc: &WorkerStoreHeartbeatFunc[T]{
			defaultHook: func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error) {
				panic("unexpected invocation of MockWorkerStore.Heartbeat")
			},
		},
		MarkCompleteFunc: &WorkerStoreMarkCompleteFunc[T]{
			defaultHook: func(context.Context, int, store.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockWorkerStore.MarkComplete")
			},
		},
		MarkErroredFunc: &WorkerStoreMarkErroredFunc[T]{
			defaultHook: func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockWorkerStore.MarkErrored")
			},
		},
		MarkFailedFunc: &WorkerStoreMarkFailedFunc[T]{
			defaultHook: func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
				panic("unexpected invocation of MockWorkerStore.MarkFailed")
			},
		},
		MaxDurationInQueueFunc: &WorkerStoreMaxDurationInQueueFunc[T]{
			defaultHook: func(context.Context) (time.Duration, error) {
				panic("unexpected invocation of MockWorkerStore.MaxDurationInQueue")
			},
		},
		QueuedCountFunc: &WorkerStoreQueuedCountFunc[T]{
			defaultHook: func(context.Context, bool) (int, error) {
				panic("unexpected invocation of MockWorkerStore.QueuedCount")
			},
		},
		RequeueFunc: &WorkerStoreRequeueFunc[T]{
			defaultHook: func(context.Context, int, time.Time) error {
				panic("unexpected invocation of MockWorkerStore.Requeue")
			},
		},
		ResetStalledFunc: &WorkerStoreResetStalledFunc[T]{
			defaultHook: func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
				panic("unexpected invocation of MockWorkerStore.ResetStalled")
			},
		},
		UpdateExecutionLogEntryFunc: &WorkerStoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error {
				panic("unexpected invocation of MockWorkerStore.UpdateExecutionLogEntry")
			},
		},
		WithFunc: &WorkerStoreWithFunc[T]{
			defaultHook: func(basestore.ShareableStore) store.Store[T] {
				panic("unexpected invocation of MockWorkerStore.With")
			},
		},
	}
}

// NewMockWorkerStoreFrom creates a new mock of the MockWorkerStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockWorkerStoreFrom[T workerutil.Record](i store.Store[T]) *MockWorkerStore[T] {
	return &MockWorkerStore[T]{
		AddExecutionLogEntryFunc: &WorkerStoreAddExecutionLogEntryFunc[T]{
			defaultHook: i.AddExecutionLogEntry,
		},
		DequeueFunc: &WorkerStoreDequeueFunc[T]{
			defaultHook: i.Dequeue,
		},
		HandleFunc: &WorkerStoreHandleFunc[T]{
			defaultHook: i.Handle,
		},
		HeartbeatFunc: &WorkerStoreHeartbeatFunc[T]{
			defaultHook: i.Heartbeat,
		},
		MarkCompleteFunc: &WorkerStoreMarkCompleteFunc[T]{
			defaultHook: i.MarkComplete,
		},
		MarkErroredFunc: &WorkerStoreMarkErroredFunc[T]{
			defaultHook: i.MarkErrored,
		},
		MarkFailedFunc: &WorkerStoreMarkFailedFunc[T]{
			defaultHook: i.MarkFailed,
		},
		MaxDurationInQueueFunc: &WorkerStoreMaxDurationInQueueFunc[T]{
			defaultHook: i.MaxDurationInQueue,
		},
		QueuedCountFunc: &WorkerStoreQueuedCountFunc[T]{
			defaultHook: i.QueuedCount,
		},
		RequeueFunc: &WorkerStoreRequeueFunc[T]{
			defaultHook: i.Requeue,
		},
		ResetStalledFunc: &WorkerStoreResetStalledFunc[T]{
			defaultHook: i.ResetStalled,
		},
		UpdateExecutionLogEntryFunc: &WorkerStoreUpdateExecutionLogEntryFunc[T]{
			defaultHook: i.UpdateExecutionLogEntry,
		},
		WithFunc: &WorkerStoreWithFunc[T]{
			defaultHook: i.With,
		},
	}
}

// WorkerStoreAddExecutionLogEntryFunc describes the behavior when the
// AddExecutionLogEntry method of the parent MockWorkerStore instance is
// invoked.
type WorkerStoreAddExecutionLogEntryFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error)
	hooks       []func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error)
	history     []WorkerStoreAddExecutionLogEntryFuncCall[T]
	mutex       sync.Mutex
}

// AddExecutionLogEntry delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) AddExecutionLogEntry(v0 context.Context, v1 int, v2 executor.ExecutionLogEntry, v3 store.ExecutionLogEntryOptions) (int, error) {
	r0, r1 := m.AddExecutionLogEntryFunc.nextHook()(v0, v1, v2, v3)
	m.AddExecutionLogEntryFunc.appendCall(WorkerStoreAddExecutionLogEntryFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AddExecutionLogEntry
// method of the parent MockWorkerStore instance is invoked and the hook
// queue is empty.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) SetDefaultHook(hook func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AddExecutionLogEntry method of the parent MockWorkerStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) PushHook(hook func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error) {
		return r0, r1
	})
}

func (f *WorkerStoreAddExecutionLogEntryFunc[T]) nextHook() func(context.Context, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreAddExecutionLogEntryFunc[T]) appendCall(r0 WorkerStoreAddExecutionLogEntryFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreAddExecutionLogEntryFuncCall
// objects describing the invocations of this function.
func (f *WorkerStoreAddExecutionLogEntryFunc[T]) History() []WorkerStoreAddExecutionLogEntryFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreAddExecutionLogEntryFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreAddExecutionLogEntryFuncCall is an object that describes an
// invocation of method AddExecutionLogEntry on an instance of
// MockWorkerStore.
type WorkerStoreAddExecutionLogEntryFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 executor.ExecutionLogEntry
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store.ExecutionLogEntryOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreAddExecutionLogEntryFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreAddExecutionLogEntryFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreDequeueFunc describes the behavior when the Dequeue method of
// the parent MockWorkerStore instance is invoked.
type WorkerStoreDequeueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, string, []*sqlf.Query) (T, bool, error)
	hooks       []func(context.Context, string, []*sqlf.Query) (T, bool, error)
	history     []WorkerStoreDequeueFuncCall[T]
	mutex       sync.Mutex
}

// Dequeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) Dequeue(v0 context.Context, v1 string, v2 []*sqlf.Query) (T, bool, error) {
	r0, r1, r2 := m.DequeueFunc.nextHook()(v0, v1, v2)
	m.DequeueFunc.appendCall(WorkerStoreDequeueFuncCall[T]{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Dequeue method of
// the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreDequeueFunc[T]) SetDefaultHook(hook func(context.Context, string, []*sqlf.Query) (T, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Dequeue method of the parent MockWorkerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreDequeueFunc[T]) PushHook(hook func(context.Context, string, []*sqlf.Query) (T, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreDequeueFunc[T]) SetDefaultReturn(r0 T, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string, []*sqlf.Query) (T, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreDequeueFunc[T]) PushReturn(r0 T, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string, []*sqlf.Query) (T, bool, error) {
		return r0, r1, r2
	})
}

func (f *WorkerStoreDequeueFunc[T]) nextHook() func(context.Context, string, []*sqlf.Query) (T, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreDequeueFunc[T]) appendCall(r0 WorkerStoreDequeueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreDequeueFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreDequeueFunc[T]) History() []WorkerStoreDequeueFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreDequeueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreDequeueFuncCall is an object that describes an invocation of
// method Dequeue on an instance of MockWorkerStore.
type WorkerStoreDequeueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []*sqlf.Query
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 T
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreDequeueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreDequeueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// WorkerStoreHandleFunc describes the behavior when the Handle method of
// the parent MockWorkerStore instance is invoked.
type WorkerStoreHandleFunc[T workerutil.Record] struct {
	defaultHook func() basestore.TransactableHandle
	hooks       []func() basestore.TransactableHandle
	history     []WorkerStoreHandleFuncCall[T]
	mutex       sync.Mutex
}

// Handle delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) Handle() basestore.TransactableHandle {
	r0 := m.HandleFunc.nextHook()()
	m.HandleFunc.appendCall(WorkerStoreHandleFuncCall[T]{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Handle method of the
// parent MockWorkerStore instance is invoked and the hook queue is empty.
func (f *WorkerStoreHandleFunc[T]) SetDefaultHook(hook func() basestore.TransactableHandle) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Handle method of the parent MockWorkerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreHandleFunc[T]) PushHook(hook func() basestore.TransactableHandle) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreHandleFunc[T]) SetDefaultReturn(r0 basestore.TransactableHandle) {
	f.SetDefaultHook(func() basestore.TransactableHandle {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreHandleFunc[T]) PushReturn(r0 basestore.TransactableHandle) {
	f.PushHook(func() basestore.TransactableHandle {
		return r0
	})
}

func (f *WorkerStoreHandleFunc[T]) nextHook() func() basestore.TransactableHandle {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreHandleFunc[T]) appendCall(r0 WorkerStoreHandleFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreHandleFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreHandleFunc[T]) History() []WorkerStoreHandleFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreHandleFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreHandleFuncCall is an object that describes an invocation of
// method Handle on an instance of MockWorkerStore.
type WorkerStoreHandleFuncCall[T workerutil.Record] struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 basestore.TransactableHandle
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreHandleFuncCall[T]) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreHandleFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerStoreHeartbeatFunc describes the behavior when the Heartbeat method
// of the parent MockWorkerStore instance is invoked.
type WorkerStoreHeartbeatFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error)
	hooks       []func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error)
	history     []WorkerStoreHeartbeatFuncCall[T]
	mutex       sync.Mutex
}

// Heartbeat delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) Heartbeat(v0 context.Context, v1 []string, v2 store.HeartbeatOptions) ([]string, []string, error) {
	r0, r1, r2 := m.HeartbeatFunc.nextHook()(v0, v1, v2)
	m.HeartbeatFunc.appendCall(WorkerStoreHeartbeatFuncCall[T]{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Heartbeat method of
// the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreHeartbeatFunc[T]) SetDefaultHook(hook func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Heartbeat method of the parent MockWorkerStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreHeartbeatFunc[T]) PushHook(hook func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreHeartbeatFunc[T]) SetDefaultReturn(r0 []string, r1 []string, r2 error) {
	f.SetDefaultHook(func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreHeartbeatFunc[T]) PushReturn(r0 []string, r1 []string, r2 error) {
	f.PushHook(func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error) {
		return r0, r1, r2
	})
}

func (f *WorkerStoreHeartbeatFunc[T]) nextHook() func(context.Context, []string, store.HeartbeatOptions) ([]string, []string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreHeartbeatFunc[T]) appendCall(r0 WorkerStoreHeartbeatFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreHeartbeatFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreHeartbeatFunc[T]) History() []WorkerStoreHeartbeatFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreHeartbeatFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreHeartbeatFuncCall is an object that describes an invocation of
// method Heartbeat on an instance of MockWorkerStore.
type WorkerStoreHeartbeatFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 store.HeartbeatOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 []string
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreHeartbeatFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreHeartbeatFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// WorkerStoreMarkCompleteFunc describes the behavior when the MarkComplete
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreMarkCompleteFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, store.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, store.MarkFinalOptions) (bool, error)
	history     []WorkerStoreMarkCompleteFuncCall[T]
	mutex       sync.Mutex
}

// MarkComplete delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) MarkComplete(v0 context.Context, v1 int, v2 store.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkCompleteFunc.nextHook()(v0, v1, v2)
	m.MarkCompleteFunc.appendCall(WorkerStoreMarkCompleteFuncCall[T]{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkComplete method
// of the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreMarkCompleteFunc[T]) SetDefaultHook(hook func(context.Context, int, store.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkComplete method of the parent MockWorkerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerStoreMarkCompleteFunc[T]) PushHook(hook func(context.Context, int, store.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreMarkCompleteFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreMarkCompleteFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *WorkerStoreMarkCompleteFunc[T]) nextHook() func(context.Context, int, store.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreMarkCompleteFunc[T]) appendCall(r0 WorkerStoreMarkCompleteFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreMarkCompleteFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreMarkCompleteFunc[T]) History() []WorkerStoreMarkCompleteFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreMarkCompleteFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreMarkCompleteFuncCall is an object that describes an invocation
// of method MarkComplete on an instance of MockWorkerStore.
type WorkerStoreMarkCompleteFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 store.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreMarkCompleteFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreMarkCompleteFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreMarkErroredFunc describes the behavior when the MarkErrored
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreMarkErroredFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, string, store.MarkFinalOptions) (bool, error)
	history     []WorkerStoreMarkErroredFuncCall[T]
	mutex       sync.Mutex
}

// MarkErrored delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) MarkErrored(v0 context.Context, v1 int, v2 string, v3 store.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkErroredFunc.nextHook()(v0, v1, v2, v3)
	m.MarkErroredFunc.appendCall(WorkerStoreMarkErroredFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkErrored method
// of the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreMarkErroredFunc[T]) SetDefaultHook(hook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkErrored method of the parent MockWorkerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerStoreMarkErroredFunc[T]) PushHook(hook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreMarkErroredFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreMarkErroredFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *WorkerStoreMarkErroredFunc[T]) nextHook() func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreMarkErroredFunc[T]) appendCall(r0 WorkerStoreMarkErroredFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreMarkErroredFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreMarkErroredFunc[T]) History() []WorkerStoreMarkErroredFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreMarkErroredFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreMarkErroredFuncCall is an object that describes an invocation
// of method MarkErrored on an instance of MockWorkerStore.
type WorkerStoreMarkErroredFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreMarkErroredFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreMarkErroredFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreMarkFailedFunc describes the behavior when the MarkFailed
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreMarkFailedFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)
	hooks       []func(context.Context, int, string, store.MarkFinalOptions) (bool, error)
	history     []WorkerStoreMarkFailedFuncCall[T]
	mutex       sync.Mutex
}

// MarkFailed delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) MarkFailed(v0 context.Context, v1 int, v2 string, v3 store.MarkFinalOptions) (bool, error) {
	r0, r1 := m.MarkFailedFunc.nextHook()(v0, v1, v2, v3)
	m.MarkFailedFunc.appendCall(WorkerStoreMarkFailedFuncCall[T]{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MarkFailed method of
// the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreMarkFailedFunc[T]) SetDefaultHook(hook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MarkFailed method of the parent MockWorkerStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreMarkFailedFunc[T]) PushHook(hook func(context.Context, int, string, store.MarkFinalOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreMarkFailedFunc[T]) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreMarkFailedFunc[T]) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
		return r0, r1
	})
}

func (f *WorkerStoreMarkFailedFunc[T]) nextHook() func(context.Context, int, string, store.MarkFinalOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreMarkFailedFunc[T]) appendCall(r0 WorkerStoreMarkFailedFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreMarkFailedFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreMarkFailedFunc[T]) History() []WorkerStoreMarkFailedFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreMarkFailedFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreMarkFailedFuncCall is an object that describes an invocation
// of method MarkFailed on an instance of MockWorkerStore.
type WorkerStoreMarkFailedFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 store.MarkFinalOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreMarkFailedFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreMarkFailedFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreMaxDurationInQueueFunc describes the behavior when the
// MaxDurationInQueue method of the parent MockWorkerStore instance is
// invoked.
type WorkerStoreMaxDurationInQueueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context) (time.Duration, error)
	hooks       []func(context.Context) (time.Duration, error)
	history     []WorkerStoreMaxDurationInQueueFuncCall[T]
	mutex       sync.Mutex
}

// MaxDurationInQueue delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) MaxDurationInQueue(v0 context.Context) (time.Duration, error) {
	r0, r1 := m.MaxDurationInQueueFunc.nextHook()(v0)
	m.MaxDurationInQueueFunc.appendCall(WorkerStoreMaxDurationInQueueFuncCall[T]{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the MaxDurationInQueue
// method of the parent MockWorkerStore instance is invoked and the hook
// queue is empty.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) SetDefaultHook(hook func(context.Context) (time.Duration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// MaxDurationInQueue method of the parent MockWorkerStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) PushHook(hook func(context.Context) (time.Duration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) SetDefaultReturn(r0 time.Duration, r1 error) {
	f.SetDefaultHook(func(context.Context) (time.Duration, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) PushReturn(r0 time.Duration, r1 error) {
	f.PushHook(func(context.Context) (time.Duration, error) {
		return r0, r1
	})
}

func (f *WorkerStoreMaxDurationInQueueFunc[T]) nextHook() func(context.Context) (time.Duration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreMaxDurationInQueueFunc[T]) appendCall(r0 WorkerStoreMaxDurationInQueueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreMaxDurationInQueueFuncCall
// objects describing the invocations of this function.
func (f *WorkerStoreMaxDurationInQueueFunc[T]) History() []WorkerStoreMaxDurationInQueueFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreMaxDurationInQueueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreMaxDurationInQueueFuncCall is an object that describes an
// invocation of method MaxDurationInQueue on an instance of
// MockWorkerStore.
type WorkerStoreMaxDurationInQueueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 time.Duration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreMaxDurationInQueueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreMaxDurationInQueueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreQueuedCountFunc describes the behavior when the QueuedCount
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreQueuedCountFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, bool) (int, error)
	hooks       []func(context.Context, bool) (int, error)
	history     []WorkerStoreQueuedCountFuncCall[T]
	mutex       sync.Mutex
}

// QueuedCount delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) QueuedCount(v0 context.Context, v1 bool) (int, error) {
	r0, r1 := m.QueuedCountFunc.nextHook()(v0, v1)
	m.QueuedCountFunc.appendCall(WorkerStoreQueuedCountFuncCall[T]{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the QueuedCount method
// of the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreQueuedCountFunc[T]) SetDefaultHook(hook func(context.Context, bool) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// QueuedCount method of the parent MockWorkerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerStoreQueuedCountFunc[T]) PushHook(hook func(context.Context, bool) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreQueuedCountFunc[T]) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, bool) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreQueuedCountFunc[T]) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, bool) (int, error) {
		return r0, r1
	})
}

func (f *WorkerStoreQueuedCountFunc[T]) nextHook() func(context.Context, bool) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreQueuedCountFunc[T]) appendCall(r0 WorkerStoreQueuedCountFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreQueuedCountFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreQueuedCountFunc[T]) History() []WorkerStoreQueuedCountFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreQueuedCountFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreQueuedCountFuncCall is an object that describes an invocation
// of method QueuedCount on an instance of MockWorkerStore.
type WorkerStoreQueuedCountFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 bool
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreQueuedCountFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreQueuedCountFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// WorkerStoreRequeueFunc describes the behavior when the Requeue method of
// the parent MockWorkerStore instance is invoked.
type WorkerStoreRequeueFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, time.Time) error
	hooks       []func(context.Context, int, time.Time) error
	history     []WorkerStoreRequeueFuncCall[T]
	mutex       sync.Mutex
}

// Requeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) Requeue(v0 context.Context, v1 int, v2 time.Time) error {
	r0 := m.RequeueFunc.nextHook()(v0, v1, v2)
	m.RequeueFunc.appendCall(WorkerStoreRequeueFuncCall[T]{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Requeue method of
// the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreRequeueFunc[T]) SetDefaultHook(hook func(context.Context, int, time.Time) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Requeue method of the parent MockWorkerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreRequeueFunc[T]) PushHook(hook func(context.Context, int, time.Time) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreRequeueFunc[T]) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, time.Time) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreRequeueFunc[T]) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, time.Time) error {
		return r0
	})
}

func (f *WorkerStoreRequeueFunc[T]) nextHook() func(context.Context, int, time.Time) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreRequeueFunc[T]) appendCall(r0 WorkerStoreRequeueFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreRequeueFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreRequeueFunc[T]) History() []WorkerStoreRequeueFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreRequeueFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreRequeueFuncCall is an object that describes an invocation of
// method Requeue on an instance of MockWorkerStore.
type WorkerStoreRequeueFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Time
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreRequeueFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreRequeueFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerStoreResetStalledFunc describes the behavior when the ResetStalled
// method of the parent MockWorkerStore instance is invoked.
type WorkerStoreResetStalledFunc[T workerutil.Record] struct {
	defaultHook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)
	hooks       []func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)
	history     []WorkerStoreResetStalledFuncCall[T]
	mutex       sync.Mutex
}

// ResetStalled delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) ResetStalled(v0 context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
	r0, r1, r2 := m.ResetStalledFunc.nextHook()(v0)
	m.ResetStalledFunc.appendCall(WorkerStoreResetStalledFuncCall[T]{v0, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the ResetStalled method
// of the parent MockWorkerStore instance is invoked and the hook queue is
// empty.
func (f *WorkerStoreResetStalledFunc[T]) SetDefaultHook(hook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ResetStalled method of the parent MockWorkerStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *WorkerStoreResetStalledFunc[T]) PushHook(hook func(context.Context) (map[int]time.Duration, map[int]time.Duration, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreResetStalledFunc[T]) SetDefaultReturn(r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
	f.SetDefaultHook(func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreResetStalledFunc[T]) PushReturn(r0 map[int]time.Duration, r1 map[int]time.Duration, r2 error) {
	f.PushHook(func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
		return r0, r1, r2
	})
}

func (f *WorkerStoreResetStalledFunc[T]) nextHook() func(context.Context) (map[int]time.Duration, map[int]time.Duration, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreResetStalledFunc[T]) appendCall(r0 WorkerStoreResetStalledFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreResetStalledFuncCall objects
// describing the invocations of this function.
func (f *WorkerStoreResetStalledFunc[T]) History() []WorkerStoreResetStalledFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreResetStalledFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreResetStalledFuncCall is an object that describes an invocation
// of method ResetStalled on an instance of MockWorkerStore.
type WorkerStoreResetStalledFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[int]time.Duration
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 map[int]time.Duration
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreResetStalledFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreResetStalledFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// WorkerStoreUpdateExecutionLogEntryFunc describes the behavior when the
// UpdateExecutionLogEntry method of the parent MockWorkerStore instance is
// invoked.
type WorkerStoreUpdateExecutionLogEntryFunc[T workerutil.Record] struct {
	defaultHook func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error
	hooks       []func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error
	history     []WorkerStoreUpdateExecutionLogEntryFuncCall[T]
	mutex       sync.Mutex
}

// UpdateExecutionLogEntry delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockWorkerStore[T]) UpdateExecutionLogEntry(v0 context.Context, v1 int, v2 int, v3 executor.ExecutionLogEntry, v4 store.ExecutionLogEntryOptions) error {
	r0 := m.UpdateExecutionLogEntryFunc.nextHook()(v0, v1, v2, v3, v4)
	m.UpdateExecutionLogEntryFunc.appendCall(WorkerStoreUpdateExecutionLogEntryFuncCall[T]{v0, v1, v2, v3, v4, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// UpdateExecutionLogEntry method of the parent MockWorkerStore instance is
// invoked and the hook queue is empty.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) SetDefaultHook(hook func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpdateExecutionLogEntry method of the parent MockWorkerStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) PushHook(hook func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error {
		return r0
	})
}

func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) nextHook() func(context.Context, int, int, executor.ExecutionLogEntry, store.ExecutionLogEntryOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) appendCall(r0 WorkerStoreUpdateExecutionLogEntryFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreUpdateExecutionLogEntryFuncCall
// objects describing the invocations of this function.
func (f *WorkerStoreUpdateExecutionLogEntryFunc[T]) History() []WorkerStoreUpdateExecutionLogEntryFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreUpdateExecutionLogEntryFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreUpdateExecutionLogEntryFuncCall is an object that describes an
// invocation of method UpdateExecutionLogEntry on an instance of
// MockWorkerStore.
type WorkerStoreUpdateExecutionLogEntryFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 executor.ExecutionLogEntry
	// Arg4 is the value of the 5th argument passed to this method
	// invocation.
	Arg4 store.ExecutionLogEntryOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreUpdateExecutionLogEntryFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3, c.Arg4}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreUpdateExecutionLogEntryFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}

// WorkerStoreWithFunc describes the behavior when the With method of the
// parent MockWorkerStore instance is invoked.
type WorkerStoreWithFunc[T workerutil.Record] struct {
	defaultHook func(basestore.ShareableStore) store.Store[T]
	hooks       []func(basestore.ShareableStore) store.Store[T]
	history     []WorkerStoreWithFuncCall[T]
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockWorkerStore[T]) With(v0 basestore.ShareableStore) store.Store[T] {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(WorkerStoreWithFuncCall[T]{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockWorkerStore instance is invoked and the hook queue is empty.
func (f *WorkerStoreWithFunc[T]) SetDefaultHook(hook func(basestore.ShareableStore) store.Store[T]) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockWorkerStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *WorkerStoreWithFunc[T]) PushHook(hook func(basestore.ShareableStore) store.Store[T]) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *WorkerStoreWithFunc[T]) SetDefaultReturn(r0 store.Store[T]) {
	f.SetDefaultHook(func(basestore.ShareableStore) store.Store[T] {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *WorkerStoreWithFunc[T]) PushReturn(r0 store.Store[T]) {
	f.PushHook(func(basestore.ShareableStore) store.Store[T] {
		return r0
	})
}

func (f *WorkerStoreWithFunc[T]) nextHook() func(basestore.ShareableStore) store.Store[T] {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *WorkerStoreWithFunc[T]) appendCall(r0 WorkerStoreWithFuncCall[T]) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of WorkerStoreWithFuncCall objects describing
// the invocations of this function.
func (f *WorkerStoreWithFunc[T]) History() []WorkerStoreWithFuncCall[T] {
	f.mutex.Lock()
	history := make([]WorkerStoreWithFuncCall[T], len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// WorkerStoreWithFuncCall is an object that describes an invocation of
// method With on an instance of MockWorkerStore.
type WorkerStoreWithFuncCall[T workerutil.Record] struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store.Store[T]
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c WorkerStoreWithFuncCall[T]) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c WorkerStoreWithFuncCall[T]) Results() []interface{} {
	return []interface{}{c.Result0}
}
