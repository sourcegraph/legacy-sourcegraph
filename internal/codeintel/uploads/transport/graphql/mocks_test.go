// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package graphql

import (
	"context"
	"sync"
	"time"

	shared "github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/shared"
)

// MockUploadsService is a mock implementation of the UploadsService
// interface (from the package
// github.com/sourcegraph/sourcegraph/internal/codeintel/uploads/transport/graphql)
// used for unit testing.
type MockUploadsService struct {
	// DeleteAutoIndexJobByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteAutoIndexJobByID.
	DeleteAutoIndexJobByIDFunc *UploadsServiceDeleteAutoIndexJobByIDFunc
	// DeleteAutoIndexJobsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteAutoIndexJobs.
	DeleteAutoIndexJobsFunc *UploadsServiceDeleteAutoIndexJobsFunc
	// DeleteUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploadByID.
	DeleteUploadByIDFunc *UploadsServiceDeleteUploadByIDFunc
	// DeleteUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method DeleteUploads.
	DeleteUploadsFunc *UploadsServiceDeleteUploadsFunc
	// GetAuditLogsForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method GetAuditLogsForUpload.
	GetAuditLogsForUploadFunc *UploadsServiceGetAuditLogsForUploadFunc
	// GetAutoIndexJobByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetAutoIndexJobByID.
	GetAutoIndexJobByIDFunc *UploadsServiceGetAutoIndexJobByIDFunc
	// GetAutoIndexJobsFunc is an instance of a mock function object
	// controlling the behavior of the method GetAutoIndexJobs.
	GetAutoIndexJobsFunc *UploadsServiceGetAutoIndexJobsFunc
	// GetAutoIndexJobsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetAutoIndexJobsByIDs.
	GetAutoIndexJobsByIDsFunc *UploadsServiceGetAutoIndexJobsByIDsFunc
	// GetCommitGraphMetadataFunc is an instance of a mock function object
	// controlling the behavior of the method GetCommitGraphMetadata.
	GetCommitGraphMetadataFunc *UploadsServiceGetCommitGraphMetadataFunc
	// GetIndexersFunc is an instance of a mock function object controlling
	// the behavior of the method GetIndexers.
	GetIndexersFunc *UploadsServiceGetIndexersFunc
	// GetLastUploadRetentionScanForRepositoryFunc is an instance of a mock
	// function object controlling the behavior of the method
	// GetLastUploadRetentionScanForRepository.
	GetLastUploadRetentionScanForRepositoryFunc *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc
	// GetRecentAutoIndexJobsSummaryFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetRecentAutoIndexJobsSummary.
	GetRecentAutoIndexJobsSummaryFunc *UploadsServiceGetRecentAutoIndexJobsSummaryFunc
	// GetRecentUploadsSummaryFunc is an instance of a mock function object
	// controlling the behavior of the method GetRecentUploadsSummary.
	GetRecentUploadsSummaryFunc *UploadsServiceGetRecentUploadsSummaryFunc
	// GetUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadByID.
	GetUploadByIDFunc *UploadsServiceGetUploadByIDFunc
	// GetUploadsFunc is an instance of a mock function object controlling
	// the behavior of the method GetUploads.
	GetUploadsFunc *UploadsServiceGetUploadsFunc
	// GetUploadsByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetUploadsByIDs.
	GetUploadsByIDsFunc *UploadsServiceGetUploadsByIDsFunc
	// NumRepositoriesWithCodeIntelligenceFunc is an instance of a mock
	// function object controlling the behavior of the method
	// NumRepositoriesWithCodeIntelligence.
	NumRepositoriesWithCodeIntelligenceFunc *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc
	// ReindexUploadByIDFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexUploadByID.
	ReindexUploadByIDFunc *UploadsServiceReindexUploadByIDFunc
	// ReindexUploadsFunc is an instance of a mock function object
	// controlling the behavior of the method ReindexUploads.
	ReindexUploadsFunc *UploadsServiceReindexUploadsFunc
	// RepositoryIDsWithErrorsFunc is an instance of a mock function object
	// controlling the behavior of the method RepositoryIDsWithErrors.
	RepositoryIDsWithErrorsFunc *UploadsServiceRepositoryIDsWithErrorsFunc
	// SetRerunAutoIndexJobByIDFunc is an instance of a mock function object
	// controlling the behavior of the method SetRerunAutoIndexJobByID.
	SetRerunAutoIndexJobByIDFunc *UploadsServiceSetRerunAutoIndexJobByIDFunc
	// SetRerunAutoIndexJobsFunc is an instance of a mock function object
	// controlling the behavior of the method SetRerunAutoIndexJobs.
	SetRerunAutoIndexJobsFunc *UploadsServiceSetRerunAutoIndexJobsFunc
}

// NewMockUploadsService creates a new mock of the UploadsService interface.
// All methods return zero values for all results, unless overwritten.
func NewMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		DeleteAutoIndexJobByIDFunc: &UploadsServiceDeleteAutoIndexJobByIDFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 error) {
				return
			},
		},
		DeleteAutoIndexJobsFunc: &UploadsServiceDeleteAutoIndexJobsFunc{
			defaultHook: func(context.Context, shared.DeleteAutoIndexJobsOptions) (r0 error) {
				return
			},
		},
		DeleteUploadByIDFunc: &UploadsServiceDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 error) {
				return
			},
		},
		DeleteUploadsFunc: &UploadsServiceDeleteUploadsFunc{
			defaultHook: func(context.Context, shared.DeleteUploadsOptions) (r0 error) {
				return
			},
		},
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) (r0 []shared.UploadLog, r1 error) {
				return
			},
		},
		GetAutoIndexJobByIDFunc: &UploadsServiceGetAutoIndexJobByIDFunc{
			defaultHook: func(context.Context, int) (r0 shared.AutoIndexJob, r1 bool, r2 error) {
				return
			},
		},
		GetAutoIndexJobsFunc: &UploadsServiceGetAutoIndexJobsFunc{
			defaultHook: func(context.Context, shared.GetAutoIndexJobsOptions) (r0 []shared.AutoIndexJob, r1 int, r2 error) {
				return
			},
		},
		GetAutoIndexJobsByIDsFunc: &UploadsServiceGetAutoIndexJobsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.AutoIndexJob, r1 error) {
				return
			},
		},
		GetCommitGraphMetadataFunc: &UploadsServiceGetCommitGraphMetadataFunc{
			defaultHook: func(context.Context, int) (r0 bool, r1 *time.Time, r2 error) {
				return
			},
		},
		GetIndexersFunc: &UploadsServiceGetIndexersFunc{
			defaultHook: func(context.Context, shared.GetIndexersOptions) (r0 []string, r1 error) {
				return
			},
		},
		GetLastUploadRetentionScanForRepositoryFunc: &UploadsServiceGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (r0 *time.Time, r1 error) {
				return
			},
		},
		GetRecentAutoIndexJobsSummaryFunc: &UploadsServiceGetRecentAutoIndexJobsSummaryFunc{
			defaultHook: func(context.Context, int) (r0 []shared.GroupedAutoIndexJobs, r1 error) {
				return
			},
		},
		GetRecentUploadsSummaryFunc: &UploadsServiceGetRecentUploadsSummaryFunc{
			defaultHook: func(context.Context, int) (r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
				return
			},
		},
		GetUploadByIDFunc: &UploadsServiceGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 shared.Upload, r1 bool, r2 error) {
				return
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, shared.GetUploadsOptions) (r0 []shared.Upload, r1 int, r2 error) {
				return
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) (r0 []shared.Upload, r1 error) {
				return
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &UploadsServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (r0 int, r1 error) {
				return
			},
		},
		ReindexUploadByIDFunc: &UploadsServiceReindexUploadByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		ReindexUploadsFunc: &UploadsServiceReindexUploadsFunc{
			defaultHook: func(context.Context, shared.ReindexUploadsOptions) (r0 error) {
				return
			},
		},
		RepositoryIDsWithErrorsFunc: &UploadsServiceRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) (r0 []shared.RepositoryWithCount, r1 int, r2 error) {
				return
			},
		},
		SetRerunAutoIndexJobByIDFunc: &UploadsServiceSetRerunAutoIndexJobByIDFunc{
			defaultHook: func(context.Context, int) (r0 error) {
				return
			},
		},
		SetRerunAutoIndexJobsFunc: &UploadsServiceSetRerunAutoIndexJobsFunc{
			defaultHook: func(context.Context, shared.SetRerunAutoIndexJobsOptions) (r0 error) {
				return
			},
		},
	}
}

// NewStrictMockUploadsService creates a new mock of the UploadsService
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockUploadsService() *MockUploadsService {
	return &MockUploadsService{
		DeleteAutoIndexJobByIDFunc: &UploadsServiceDeleteAutoIndexJobByIDFunc{
			defaultHook: func(context.Context, int) (bool, error) {
				panic("unexpected invocation of MockUploadsService.DeleteAutoIndexJobByID")
			},
		},
		DeleteAutoIndexJobsFunc: &UploadsServiceDeleteAutoIndexJobsFunc{
			defaultHook: func(context.Context, shared.DeleteAutoIndexJobsOptions) error {
				panic("unexpected invocation of MockUploadsService.DeleteAutoIndexJobs")
			},
		},
		DeleteUploadByIDFunc: &UploadsServiceDeleteUploadByIDFunc{
			defaultHook: func(context.Context, int) (bool, error) {
				panic("unexpected invocation of MockUploadsService.DeleteUploadByID")
			},
		},
		DeleteUploadsFunc: &UploadsServiceDeleteUploadsFunc{
			defaultHook: func(context.Context, shared.DeleteUploadsOptions) error {
				panic("unexpected invocation of MockUploadsService.DeleteUploads")
			},
		},
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: func(context.Context, int) ([]shared.UploadLog, error) {
				panic("unexpected invocation of MockUploadsService.GetAuditLogsForUpload")
			},
		},
		GetAutoIndexJobByIDFunc: &UploadsServiceGetAutoIndexJobByIDFunc{
			defaultHook: func(context.Context, int) (shared.AutoIndexJob, bool, error) {
				panic("unexpected invocation of MockUploadsService.GetAutoIndexJobByID")
			},
		},
		GetAutoIndexJobsFunc: &UploadsServiceGetAutoIndexJobsFunc{
			defaultHook: func(context.Context, shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error) {
				panic("unexpected invocation of MockUploadsService.GetAutoIndexJobs")
			},
		},
		GetAutoIndexJobsByIDsFunc: &UploadsServiceGetAutoIndexJobsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.AutoIndexJob, error) {
				panic("unexpected invocation of MockUploadsService.GetAutoIndexJobsByIDs")
			},
		},
		GetCommitGraphMetadataFunc: &UploadsServiceGetCommitGraphMetadataFunc{
			defaultHook: func(context.Context, int) (bool, *time.Time, error) {
				panic("unexpected invocation of MockUploadsService.GetCommitGraphMetadata")
			},
		},
		GetIndexersFunc: &UploadsServiceGetIndexersFunc{
			defaultHook: func(context.Context, shared.GetIndexersOptions) ([]string, error) {
				panic("unexpected invocation of MockUploadsService.GetIndexers")
			},
		},
		GetLastUploadRetentionScanForRepositoryFunc: &UploadsServiceGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: func(context.Context, int) (*time.Time, error) {
				panic("unexpected invocation of MockUploadsService.GetLastUploadRetentionScanForRepository")
			},
		},
		GetRecentAutoIndexJobsSummaryFunc: &UploadsServiceGetRecentAutoIndexJobsSummaryFunc{
			defaultHook: func(context.Context, int) ([]shared.GroupedAutoIndexJobs, error) {
				panic("unexpected invocation of MockUploadsService.GetRecentAutoIndexJobsSummary")
			},
		},
		GetRecentUploadsSummaryFunc: &UploadsServiceGetRecentUploadsSummaryFunc{
			defaultHook: func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
				panic("unexpected invocation of MockUploadsService.GetRecentUploadsSummary")
			},
		},
		GetUploadByIDFunc: &UploadsServiceGetUploadByIDFunc{
			defaultHook: func(context.Context, int) (shared.Upload, bool, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadByID")
			},
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
				panic("unexpected invocation of MockUploadsService.GetUploads")
			},
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: func(context.Context, ...int) ([]shared.Upload, error) {
				panic("unexpected invocation of MockUploadsService.GetUploadsByIDs")
			},
		},
		NumRepositoriesWithCodeIntelligenceFunc: &UploadsServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: func(context.Context) (int, error) {
				panic("unexpected invocation of MockUploadsService.NumRepositoriesWithCodeIntelligence")
			},
		},
		ReindexUploadByIDFunc: &UploadsServiceReindexUploadByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockUploadsService.ReindexUploadByID")
			},
		},
		ReindexUploadsFunc: &UploadsServiceReindexUploadsFunc{
			defaultHook: func(context.Context, shared.ReindexUploadsOptions) error {
				panic("unexpected invocation of MockUploadsService.ReindexUploads")
			},
		},
		RepositoryIDsWithErrorsFunc: &UploadsServiceRepositoryIDsWithErrorsFunc{
			defaultHook: func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
				panic("unexpected invocation of MockUploadsService.RepositoryIDsWithErrors")
			},
		},
		SetRerunAutoIndexJobByIDFunc: &UploadsServiceSetRerunAutoIndexJobByIDFunc{
			defaultHook: func(context.Context, int) error {
				panic("unexpected invocation of MockUploadsService.SetRerunAutoIndexJobByID")
			},
		},
		SetRerunAutoIndexJobsFunc: &UploadsServiceSetRerunAutoIndexJobsFunc{
			defaultHook: func(context.Context, shared.SetRerunAutoIndexJobsOptions) error {
				panic("unexpected invocation of MockUploadsService.SetRerunAutoIndexJobs")
			},
		},
	}
}

// NewMockUploadsServiceFrom creates a new mock of the MockUploadsService
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockUploadsServiceFrom(i UploadsService) *MockUploadsService {
	return &MockUploadsService{
		DeleteAutoIndexJobByIDFunc: &UploadsServiceDeleteAutoIndexJobByIDFunc{
			defaultHook: i.DeleteAutoIndexJobByID,
		},
		DeleteAutoIndexJobsFunc: &UploadsServiceDeleteAutoIndexJobsFunc{
			defaultHook: i.DeleteAutoIndexJobs,
		},
		DeleteUploadByIDFunc: &UploadsServiceDeleteUploadByIDFunc{
			defaultHook: i.DeleteUploadByID,
		},
		DeleteUploadsFunc: &UploadsServiceDeleteUploadsFunc{
			defaultHook: i.DeleteUploads,
		},
		GetAuditLogsForUploadFunc: &UploadsServiceGetAuditLogsForUploadFunc{
			defaultHook: i.GetAuditLogsForUpload,
		},
		GetAutoIndexJobByIDFunc: &UploadsServiceGetAutoIndexJobByIDFunc{
			defaultHook: i.GetAutoIndexJobByID,
		},
		GetAutoIndexJobsFunc: &UploadsServiceGetAutoIndexJobsFunc{
			defaultHook: i.GetAutoIndexJobs,
		},
		GetAutoIndexJobsByIDsFunc: &UploadsServiceGetAutoIndexJobsByIDsFunc{
			defaultHook: i.GetAutoIndexJobsByIDs,
		},
		GetCommitGraphMetadataFunc: &UploadsServiceGetCommitGraphMetadataFunc{
			defaultHook: i.GetCommitGraphMetadata,
		},
		GetIndexersFunc: &UploadsServiceGetIndexersFunc{
			defaultHook: i.GetIndexers,
		},
		GetLastUploadRetentionScanForRepositoryFunc: &UploadsServiceGetLastUploadRetentionScanForRepositoryFunc{
			defaultHook: i.GetLastUploadRetentionScanForRepository,
		},
		GetRecentAutoIndexJobsSummaryFunc: &UploadsServiceGetRecentAutoIndexJobsSummaryFunc{
			defaultHook: i.GetRecentAutoIndexJobsSummary,
		},
		GetRecentUploadsSummaryFunc: &UploadsServiceGetRecentUploadsSummaryFunc{
			defaultHook: i.GetRecentUploadsSummary,
		},
		GetUploadByIDFunc: &UploadsServiceGetUploadByIDFunc{
			defaultHook: i.GetUploadByID,
		},
		GetUploadsFunc: &UploadsServiceGetUploadsFunc{
			defaultHook: i.GetUploads,
		},
		GetUploadsByIDsFunc: &UploadsServiceGetUploadsByIDsFunc{
			defaultHook: i.GetUploadsByIDs,
		},
		NumRepositoriesWithCodeIntelligenceFunc: &UploadsServiceNumRepositoriesWithCodeIntelligenceFunc{
			defaultHook: i.NumRepositoriesWithCodeIntelligence,
		},
		ReindexUploadByIDFunc: &UploadsServiceReindexUploadByIDFunc{
			defaultHook: i.ReindexUploadByID,
		},
		ReindexUploadsFunc: &UploadsServiceReindexUploadsFunc{
			defaultHook: i.ReindexUploads,
		},
		RepositoryIDsWithErrorsFunc: &UploadsServiceRepositoryIDsWithErrorsFunc{
			defaultHook: i.RepositoryIDsWithErrors,
		},
		SetRerunAutoIndexJobByIDFunc: &UploadsServiceSetRerunAutoIndexJobByIDFunc{
			defaultHook: i.SetRerunAutoIndexJobByID,
		},
		SetRerunAutoIndexJobsFunc: &UploadsServiceSetRerunAutoIndexJobsFunc{
			defaultHook: i.SetRerunAutoIndexJobs,
		},
	}
}

// UploadsServiceDeleteAutoIndexJobByIDFunc describes the behavior when the
// DeleteAutoIndexJobByID method of the parent MockUploadsService instance
// is invoked.
type UploadsServiceDeleteAutoIndexJobByIDFunc struct {
	defaultHook func(context.Context, int) (bool, error)
	hooks       []func(context.Context, int) (bool, error)
	history     []UploadsServiceDeleteAutoIndexJobByIDFuncCall
	mutex       sync.Mutex
}

// DeleteAutoIndexJobByID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) DeleteAutoIndexJobByID(v0 context.Context, v1 int) (bool, error) {
	r0, r1 := m.DeleteAutoIndexJobByIDFunc.nextHook()(v0, v1)
	m.DeleteAutoIndexJobByIDFunc.appendCall(UploadsServiceDeleteAutoIndexJobByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// DeleteAutoIndexJobByID method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceDeleteAutoIndexJobByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteAutoIndexJobByID method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceDeleteAutoIndexJobByIDFunc) PushHook(hook func(context.Context, int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceDeleteAutoIndexJobByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceDeleteAutoIndexJobByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

func (f *UploadsServiceDeleteAutoIndexJobByIDFunc) nextHook() func(context.Context, int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceDeleteAutoIndexJobByIDFunc) appendCall(r0 UploadsServiceDeleteAutoIndexJobByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceDeleteAutoIndexJobByIDFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceDeleteAutoIndexJobByIDFunc) History() []UploadsServiceDeleteAutoIndexJobByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceDeleteAutoIndexJobByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceDeleteAutoIndexJobByIDFuncCall is an object that describes
// an invocation of method DeleteAutoIndexJobByID on an instance of
// MockUploadsService.
type UploadsServiceDeleteAutoIndexJobByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceDeleteAutoIndexJobByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceDeleteAutoIndexJobByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceDeleteAutoIndexJobsFunc describes the behavior when the
// DeleteAutoIndexJobs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceDeleteAutoIndexJobsFunc struct {
	defaultHook func(context.Context, shared.DeleteAutoIndexJobsOptions) error
	hooks       []func(context.Context, shared.DeleteAutoIndexJobsOptions) error
	history     []UploadsServiceDeleteAutoIndexJobsFuncCall
	mutex       sync.Mutex
}

// DeleteAutoIndexJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) DeleteAutoIndexJobs(v0 context.Context, v1 shared.DeleteAutoIndexJobsOptions) error {
	r0 := m.DeleteAutoIndexJobsFunc.nextHook()(v0, v1)
	m.DeleteAutoIndexJobsFunc.appendCall(UploadsServiceDeleteAutoIndexJobsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteAutoIndexJobs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceDeleteAutoIndexJobsFunc) SetDefaultHook(hook func(context.Context, shared.DeleteAutoIndexJobsOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteAutoIndexJobs method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceDeleteAutoIndexJobsFunc) PushHook(hook func(context.Context, shared.DeleteAutoIndexJobsOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceDeleteAutoIndexJobsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.DeleteAutoIndexJobsOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceDeleteAutoIndexJobsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.DeleteAutoIndexJobsOptions) error {
		return r0
	})
}

func (f *UploadsServiceDeleteAutoIndexJobsFunc) nextHook() func(context.Context, shared.DeleteAutoIndexJobsOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceDeleteAutoIndexJobsFunc) appendCall(r0 UploadsServiceDeleteAutoIndexJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceDeleteAutoIndexJobsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceDeleteAutoIndexJobsFunc) History() []UploadsServiceDeleteAutoIndexJobsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceDeleteAutoIndexJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceDeleteAutoIndexJobsFuncCall is an object that describes an
// invocation of method DeleteAutoIndexJobs on an instance of
// MockUploadsService.
type UploadsServiceDeleteAutoIndexJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.DeleteAutoIndexJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceDeleteAutoIndexJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceDeleteAutoIndexJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceDeleteUploadByIDFunc describes the behavior when the
// DeleteUploadByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceDeleteUploadByIDFunc struct {
	defaultHook func(context.Context, int) (bool, error)
	hooks       []func(context.Context, int) (bool, error)
	history     []UploadsServiceDeleteUploadByIDFuncCall
	mutex       sync.Mutex
}

// DeleteUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) DeleteUploadByID(v0 context.Context, v1 int) (bool, error) {
	r0, r1 := m.DeleteUploadByIDFunc.nextHook()(v0, v1)
	m.DeleteUploadByIDFunc.appendCall(UploadsServiceDeleteUploadByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the DeleteUploadByID
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceDeleteUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploadByID method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceDeleteUploadByIDFunc) PushHook(hook func(context.Context, int) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceDeleteUploadByIDFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceDeleteUploadByIDFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, int) (bool, error) {
		return r0, r1
	})
}

func (f *UploadsServiceDeleteUploadByIDFunc) nextHook() func(context.Context, int) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceDeleteUploadByIDFunc) appendCall(r0 UploadsServiceDeleteUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceDeleteUploadByIDFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceDeleteUploadByIDFunc) History() []UploadsServiceDeleteUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceDeleteUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceDeleteUploadByIDFuncCall is an object that describes an
// invocation of method DeleteUploadByID on an instance of
// MockUploadsService.
type UploadsServiceDeleteUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceDeleteUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceDeleteUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceDeleteUploadsFunc describes the behavior when the
// DeleteUploads method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceDeleteUploadsFunc struct {
	defaultHook func(context.Context, shared.DeleteUploadsOptions) error
	hooks       []func(context.Context, shared.DeleteUploadsOptions) error
	history     []UploadsServiceDeleteUploadsFuncCall
	mutex       sync.Mutex
}

// DeleteUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) DeleteUploads(v0 context.Context, v1 shared.DeleteUploadsOptions) error {
	r0 := m.DeleteUploadsFunc.nextHook()(v0, v1)
	m.DeleteUploadsFunc.appendCall(UploadsServiceDeleteUploadsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the DeleteUploads method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceDeleteUploadsFunc) SetDefaultHook(hook func(context.Context, shared.DeleteUploadsOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DeleteUploads method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceDeleteUploadsFunc) PushHook(hook func(context.Context, shared.DeleteUploadsOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceDeleteUploadsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.DeleteUploadsOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceDeleteUploadsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.DeleteUploadsOptions) error {
		return r0
	})
}

func (f *UploadsServiceDeleteUploadsFunc) nextHook() func(context.Context, shared.DeleteUploadsOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceDeleteUploadsFunc) appendCall(r0 UploadsServiceDeleteUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceDeleteUploadsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceDeleteUploadsFunc) History() []UploadsServiceDeleteUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceDeleteUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceDeleteUploadsFuncCall is an object that describes an
// invocation of method DeleteUploads on an instance of MockUploadsService.
type UploadsServiceDeleteUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.DeleteUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceDeleteUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceDeleteUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceGetAuditLogsForUploadFunc describes the behavior when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetAuditLogsForUploadFunc struct {
	defaultHook func(context.Context, int) ([]shared.UploadLog, error)
	hooks       []func(context.Context, int) ([]shared.UploadLog, error)
	history     []UploadsServiceGetAuditLogsForUploadFuncCall
	mutex       sync.Mutex
}

// GetAuditLogsForUpload delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetAuditLogsForUpload(v0 context.Context, v1 int) ([]shared.UploadLog, error) {
	r0, r1 := m.GetAuditLogsForUploadFunc.nextHook()(v0, v1)
	m.GetAuditLogsForUploadFunc.appendCall(UploadsServiceGetAuditLogsForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAuditLogsForUpload method of the parent MockUploadsService instance is
// invoked and the hook queue is empty.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.UploadLog, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAuditLogsForUpload method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushHook(hook func(context.Context, int) ([]shared.UploadLog, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) SetDefaultReturn(r0 []shared.UploadLog, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.UploadLog, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetAuditLogsForUploadFunc) PushReturn(r0 []shared.UploadLog, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.UploadLog, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) nextHook() func(context.Context, int) ([]shared.UploadLog, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetAuditLogsForUploadFunc) appendCall(r0 UploadsServiceGetAuditLogsForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetAuditLogsForUploadFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetAuditLogsForUploadFunc) History() []UploadsServiceGetAuditLogsForUploadFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetAuditLogsForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetAuditLogsForUploadFuncCall is an object that describes
// an invocation of method GetAuditLogsForUpload on an instance of
// MockUploadsService.
type UploadsServiceGetAuditLogsForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadLog
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetAuditLogsForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetAutoIndexJobByIDFunc describes the behavior when the
// GetAutoIndexJobByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetAutoIndexJobByIDFunc struct {
	defaultHook func(context.Context, int) (shared.AutoIndexJob, bool, error)
	hooks       []func(context.Context, int) (shared.AutoIndexJob, bool, error)
	history     []UploadsServiceGetAutoIndexJobByIDFuncCall
	mutex       sync.Mutex
}

// GetAutoIndexJobByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetAutoIndexJobByID(v0 context.Context, v1 int) (shared.AutoIndexJob, bool, error) {
	r0, r1, r2 := m.GetAutoIndexJobByIDFunc.nextHook()(v0, v1)
	m.GetAutoIndexJobByIDFunc.appendCall(UploadsServiceGetAutoIndexJobByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetAutoIndexJobByID
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetAutoIndexJobByIDFunc) SetDefaultHook(hook func(context.Context, int) (shared.AutoIndexJob, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAutoIndexJobByID method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetAutoIndexJobByIDFunc) PushHook(hook func(context.Context, int) (shared.AutoIndexJob, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetAutoIndexJobByIDFunc) SetDefaultReturn(r0 shared.AutoIndexJob, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (shared.AutoIndexJob, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetAutoIndexJobByIDFunc) PushReturn(r0 shared.AutoIndexJob, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (shared.AutoIndexJob, bool, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetAutoIndexJobByIDFunc) nextHook() func(context.Context, int) (shared.AutoIndexJob, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetAutoIndexJobByIDFunc) appendCall(r0 UploadsServiceGetAutoIndexJobByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetAutoIndexJobByIDFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetAutoIndexJobByIDFunc) History() []UploadsServiceGetAutoIndexJobByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetAutoIndexJobByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetAutoIndexJobByIDFuncCall is an object that describes an
// invocation of method GetAutoIndexJobByID on an instance of
// MockUploadsService.
type UploadsServiceGetAutoIndexJobByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.AutoIndexJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetAutoIndexJobByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetAutoIndexJobByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetAutoIndexJobsFunc describes the behavior when the
// GetAutoIndexJobs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetAutoIndexJobsFunc struct {
	defaultHook func(context.Context, shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error)
	hooks       []func(context.Context, shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error)
	history     []UploadsServiceGetAutoIndexJobsFuncCall
	mutex       sync.Mutex
}

// GetAutoIndexJobs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetAutoIndexJobs(v0 context.Context, v1 shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error) {
	r0, r1, r2 := m.GetAutoIndexJobsFunc.nextHook()(v0, v1)
	m.GetAutoIndexJobsFunc.appendCall(UploadsServiceGetAutoIndexJobsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetAutoIndexJobs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetAutoIndexJobsFunc) SetDefaultHook(hook func(context.Context, shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAutoIndexJobs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetAutoIndexJobsFunc) PushHook(hook func(context.Context, shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetAutoIndexJobsFunc) SetDefaultReturn(r0 []shared.AutoIndexJob, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetAutoIndexJobsFunc) PushReturn(r0 []shared.AutoIndexJob, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetAutoIndexJobsFunc) nextHook() func(context.Context, shared.GetAutoIndexJobsOptions) ([]shared.AutoIndexJob, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetAutoIndexJobsFunc) appendCall(r0 UploadsServiceGetAutoIndexJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetAutoIndexJobsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetAutoIndexJobsFunc) History() []UploadsServiceGetAutoIndexJobsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetAutoIndexJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetAutoIndexJobsFuncCall is an object that describes an
// invocation of method GetAutoIndexJobs on an instance of
// MockUploadsService.
type UploadsServiceGetAutoIndexJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetAutoIndexJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.AutoIndexJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetAutoIndexJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetAutoIndexJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetAutoIndexJobsByIDsFunc describes the behavior when the
// GetAutoIndexJobsByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetAutoIndexJobsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.AutoIndexJob, error)
	hooks       []func(context.Context, ...int) ([]shared.AutoIndexJob, error)
	history     []UploadsServiceGetAutoIndexJobsByIDsFuncCall
	mutex       sync.Mutex
}

// GetAutoIndexJobsByIDs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetAutoIndexJobsByIDs(v0 context.Context, v1 ...int) ([]shared.AutoIndexJob, error) {
	r0, r1 := m.GetAutoIndexJobsByIDsFunc.nextHook()(v0, v1...)
	m.GetAutoIndexJobsByIDsFunc.appendCall(UploadsServiceGetAutoIndexJobsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetAutoIndexJobsByIDs method of the parent MockUploadsService instance is
// invoked and the hook queue is empty.
func (f *UploadsServiceGetAutoIndexJobsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.AutoIndexJob, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetAutoIndexJobsByIDs method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetAutoIndexJobsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.AutoIndexJob, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetAutoIndexJobsByIDsFunc) SetDefaultReturn(r0 []shared.AutoIndexJob, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.AutoIndexJob, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetAutoIndexJobsByIDsFunc) PushReturn(r0 []shared.AutoIndexJob, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.AutoIndexJob, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetAutoIndexJobsByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.AutoIndexJob, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetAutoIndexJobsByIDsFunc) appendCall(r0 UploadsServiceGetAutoIndexJobsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetAutoIndexJobsByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetAutoIndexJobsByIDsFunc) History() []UploadsServiceGetAutoIndexJobsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetAutoIndexJobsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetAutoIndexJobsByIDsFuncCall is an object that describes
// an invocation of method GetAutoIndexJobsByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetAutoIndexJobsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.AutoIndexJob
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetAutoIndexJobsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetAutoIndexJobsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetCommitGraphMetadataFunc describes the behavior when the
// GetCommitGraphMetadata method of the parent MockUploadsService instance
// is invoked.
type UploadsServiceGetCommitGraphMetadataFunc struct {
	defaultHook func(context.Context, int) (bool, *time.Time, error)
	hooks       []func(context.Context, int) (bool, *time.Time, error)
	history     []UploadsServiceGetCommitGraphMetadataFuncCall
	mutex       sync.Mutex
}

// GetCommitGraphMetadata delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetCommitGraphMetadata(v0 context.Context, v1 int) (bool, *time.Time, error) {
	r0, r1, r2 := m.GetCommitGraphMetadataFunc.nextHook()(v0, v1)
	m.GetCommitGraphMetadataFunc.appendCall(UploadsServiceGetCommitGraphMetadataFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// GetCommitGraphMetadata method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceGetCommitGraphMetadataFunc) SetDefaultHook(hook func(context.Context, int) (bool, *time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetCommitGraphMetadata method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetCommitGraphMetadataFunc) PushHook(hook func(context.Context, int) (bool, *time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetCommitGraphMetadataFunc) SetDefaultReturn(r0 bool, r1 *time.Time, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (bool, *time.Time, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetCommitGraphMetadataFunc) PushReturn(r0 bool, r1 *time.Time, r2 error) {
	f.PushHook(func(context.Context, int) (bool, *time.Time, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetCommitGraphMetadataFunc) nextHook() func(context.Context, int) (bool, *time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetCommitGraphMetadataFunc) appendCall(r0 UploadsServiceGetCommitGraphMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetCommitGraphMetadataFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceGetCommitGraphMetadataFunc) History() []UploadsServiceGetCommitGraphMetadataFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetCommitGraphMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetCommitGraphMetadataFuncCall is an object that describes
// an invocation of method GetCommitGraphMetadata on an instance of
// MockUploadsService.
type UploadsServiceGetCommitGraphMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 *time.Time
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetCommitGraphMetadataFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetCommitGraphMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetIndexersFunc describes the behavior when the GetIndexers
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetIndexersFunc struct {
	defaultHook func(context.Context, shared.GetIndexersOptions) ([]string, error)
	hooks       []func(context.Context, shared.GetIndexersOptions) ([]string, error)
	history     []UploadsServiceGetIndexersFuncCall
	mutex       sync.Mutex
}

// GetIndexers delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetIndexers(v0 context.Context, v1 shared.GetIndexersOptions) ([]string, error) {
	r0, r1 := m.GetIndexersFunc.nextHook()(v0, v1)
	m.GetIndexersFunc.appendCall(UploadsServiceGetIndexersFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetIndexers method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceGetIndexersFunc) SetDefaultHook(hook func(context.Context, shared.GetIndexersOptions) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetIndexers method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetIndexersFunc) PushHook(hook func(context.Context, shared.GetIndexersOptions) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetIndexersFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, shared.GetIndexersOptions) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetIndexersFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, shared.GetIndexersOptions) ([]string, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetIndexersFunc) nextHook() func(context.Context, shared.GetIndexersOptions) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetIndexersFunc) appendCall(r0 UploadsServiceGetIndexersFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetIndexersFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetIndexersFunc) History() []UploadsServiceGetIndexersFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetIndexersFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetIndexersFuncCall is an object that describes an
// invocation of method GetIndexers on an instance of MockUploadsService.
type UploadsServiceGetIndexersFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetIndexersOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetIndexersFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetIndexersFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetLastUploadRetentionScanForRepositoryFunc describes the
// behavior when the GetLastUploadRetentionScanForRepository method of the
// parent MockUploadsService instance is invoked.
type UploadsServiceGetLastUploadRetentionScanForRepositoryFunc struct {
	defaultHook func(context.Context, int) (*time.Time, error)
	hooks       []func(context.Context, int) (*time.Time, error)
	history     []UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall
	mutex       sync.Mutex
}

// GetLastUploadRetentionScanForRepository delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockUploadsService) GetLastUploadRetentionScanForRepository(v0 context.Context, v1 int) (*time.Time, error) {
	r0, r1 := m.GetLastUploadRetentionScanForRepositoryFunc.nextHook()(v0, v1)
	m.GetLastUploadRetentionScanForRepositoryFunc.appendCall(UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetLastUploadRetentionScanForRepository method of the parent
// MockUploadsService instance is invoked and the hook queue is empty.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) SetDefaultHook(hook func(context.Context, int) (*time.Time, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetLastUploadRetentionScanForRepository method of the parent
// MockUploadsService instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) PushHook(hook func(context.Context, int) (*time.Time, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) SetDefaultReturn(r0 *time.Time, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) PushReturn(r0 *time.Time, r1 error) {
	f.PushHook(func(context.Context, int) (*time.Time, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) nextHook() func(context.Context, int) (*time.Time, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) appendCall(r0 UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetLastUploadRetentionScanForRepositoryFunc) History() []UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall is an
// object that describes an invocation of method
// GetLastUploadRetentionScanForRepository on an instance of
// MockUploadsService.
type UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *time.Time
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetLastUploadRetentionScanForRepositoryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetRecentAutoIndexJobsSummaryFunc describes the behavior
// when the GetRecentAutoIndexJobsSummary method of the parent
// MockUploadsService instance is invoked.
type UploadsServiceGetRecentAutoIndexJobsSummaryFunc struct {
	defaultHook func(context.Context, int) ([]shared.GroupedAutoIndexJobs, error)
	hooks       []func(context.Context, int) ([]shared.GroupedAutoIndexJobs, error)
	history     []UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall
	mutex       sync.Mutex
}

// GetRecentAutoIndexJobsSummary delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetRecentAutoIndexJobsSummary(v0 context.Context, v1 int) ([]shared.GroupedAutoIndexJobs, error) {
	r0, r1 := m.GetRecentAutoIndexJobsSummaryFunc.nextHook()(v0, v1)
	m.GetRecentAutoIndexJobsSummaryFunc.appendCall(UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRecentAutoIndexJobsSummary method of the parent MockUploadsService
// instance is invoked and the hook queue is empty.
func (f *UploadsServiceGetRecentAutoIndexJobsSummaryFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.GroupedAutoIndexJobs, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRecentAutoIndexJobsSummary method of the parent MockUploadsService
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *UploadsServiceGetRecentAutoIndexJobsSummaryFunc) PushHook(hook func(context.Context, int) ([]shared.GroupedAutoIndexJobs, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetRecentAutoIndexJobsSummaryFunc) SetDefaultReturn(r0 []shared.GroupedAutoIndexJobs, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.GroupedAutoIndexJobs, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetRecentAutoIndexJobsSummaryFunc) PushReturn(r0 []shared.GroupedAutoIndexJobs, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.GroupedAutoIndexJobs, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetRecentAutoIndexJobsSummaryFunc) nextHook() func(context.Context, int) ([]shared.GroupedAutoIndexJobs, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetRecentAutoIndexJobsSummaryFunc) appendCall(r0 UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall objects describing
// the invocations of this function.
func (f *UploadsServiceGetRecentAutoIndexJobsSummaryFunc) History() []UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall is an object that
// describes an invocation of method GetRecentAutoIndexJobsSummary on an
// instance of MockUploadsService.
type UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.GroupedAutoIndexJobs
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetRecentAutoIndexJobsSummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetRecentUploadsSummaryFunc describes the behavior when the
// GetRecentUploadsSummary method of the parent MockUploadsService instance
// is invoked.
type UploadsServiceGetRecentUploadsSummaryFunc struct {
	defaultHook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)
	hooks       []func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)
	history     []UploadsServiceGetRecentUploadsSummaryFuncCall
	mutex       sync.Mutex
}

// GetRecentUploadsSummary delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetRecentUploadsSummary(v0 context.Context, v1 int) ([]shared.UploadsWithRepositoryNamespace, error) {
	r0, r1 := m.GetRecentUploadsSummaryFunc.nextHook()(v0, v1)
	m.GetRecentUploadsSummaryFunc.appendCall(UploadsServiceGetRecentUploadsSummaryFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetRecentUploadsSummary method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) SetDefaultHook(hook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRecentUploadsSummary method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) PushHook(hook func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) SetDefaultReturn(r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
	f.SetDefaultHook(func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) PushReturn(r0 []shared.UploadsWithRepositoryNamespace, r1 error) {
	f.PushHook(func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetRecentUploadsSummaryFunc) nextHook() func(context.Context, int) ([]shared.UploadsWithRepositoryNamespace, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetRecentUploadsSummaryFunc) appendCall(r0 UploadsServiceGetRecentUploadsSummaryFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceGetRecentUploadsSummaryFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceGetRecentUploadsSummaryFunc) History() []UploadsServiceGetRecentUploadsSummaryFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetRecentUploadsSummaryFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetRecentUploadsSummaryFuncCall is an object that describes
// an invocation of method GetRecentUploadsSummary on an instance of
// MockUploadsService.
type UploadsServiceGetRecentUploadsSummaryFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.UploadsWithRepositoryNamespace
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetRecentUploadsSummaryFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetRecentUploadsSummaryFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceGetUploadByIDFunc describes the behavior when the
// GetUploadByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetUploadByIDFunc struct {
	defaultHook func(context.Context, int) (shared.Upload, bool, error)
	hooks       []func(context.Context, int) (shared.Upload, bool, error)
	history     []UploadsServiceGetUploadByIDFuncCall
	mutex       sync.Mutex
}

// GetUploadByID delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadByID(v0 context.Context, v1 int) (shared.Upload, bool, error) {
	r0, r1, r2 := m.GetUploadByIDFunc.nextHook()(v0, v1)
	m.GetUploadByIDFunc.appendCall(UploadsServiceGetUploadByIDFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploadByID method
// of the parent MockUploadsService instance is invoked and the hook queue
// is empty.
func (f *UploadsServiceGetUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) (shared.Upload, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadByID method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadByIDFunc) PushHook(hook func(context.Context, int) (shared.Upload, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadByIDFunc) SetDefaultReturn(r0 shared.Upload, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, int) (shared.Upload, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadByIDFunc) PushReturn(r0 shared.Upload, r1 bool, r2 error) {
	f.PushHook(func(context.Context, int) (shared.Upload, bool, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadByIDFunc) nextHook() func(context.Context, int) (shared.Upload, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadByIDFunc) appendCall(r0 UploadsServiceGetUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadByIDFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetUploadByIDFunc) History() []UploadsServiceGetUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadByIDFuncCall is an object that describes an
// invocation of method GetUploadByID on an instance of MockUploadsService.
type UploadsServiceGetUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsFunc describes the behavior when the GetUploads
// method of the parent MockUploadsService instance is invoked.
type UploadsServiceGetUploadsFunc struct {
	defaultHook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)
	hooks       []func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)
	history     []UploadsServiceGetUploadsFuncCall
	mutex       sync.Mutex
}

// GetUploads delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploads(v0 context.Context, v1 shared.GetUploadsOptions) ([]shared.Upload, int, error) {
	r0, r1, r2 := m.GetUploadsFunc.nextHook()(v0, v1)
	m.GetUploadsFunc.appendCall(UploadsServiceGetUploadsFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the GetUploads method of
// the parent MockUploadsService instance is invoked and the hook queue is
// empty.
func (f *UploadsServiceGetUploadsFunc) SetDefaultHook(hook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploads method of the parent MockUploadsService instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsFunc) PushHook(hook func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsFunc) SetDefaultReturn(r0 []shared.Upload, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsFunc) PushReturn(r0 []shared.Upload, r1 int, r2 error) {
	f.PushHook(func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceGetUploadsFunc) nextHook() func(context.Context, shared.GetUploadsOptions) ([]shared.Upload, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsFunc) appendCall(r0 UploadsServiceGetUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceGetUploadsFunc) History() []UploadsServiceGetUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsFuncCall is an object that describes an
// invocation of method GetUploads on an instance of MockUploadsService.
type UploadsServiceGetUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.GetUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceGetUploadsByIDsFunc describes the behavior when the
// GetUploadsByIDs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceGetUploadsByIDsFunc struct {
	defaultHook func(context.Context, ...int) ([]shared.Upload, error)
	hooks       []func(context.Context, ...int) ([]shared.Upload, error)
	history     []UploadsServiceGetUploadsByIDsFuncCall
	mutex       sync.Mutex
}

// GetUploadsByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) GetUploadsByIDs(v0 context.Context, v1 ...int) ([]shared.Upload, error) {
	r0, r1 := m.GetUploadsByIDsFunc.nextHook()(v0, v1...)
	m.GetUploadsByIDsFunc.appendCall(UploadsServiceGetUploadsByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetUploadsByIDs
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetUploadsByIDs method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceGetUploadsByIDsFunc) PushHook(hook func(context.Context, ...int) ([]shared.Upload, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceGetUploadsByIDsFunc) SetDefaultReturn(r0 []shared.Upload, r1 error) {
	f.SetDefaultHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceGetUploadsByIDsFunc) PushReturn(r0 []shared.Upload, r1 error) {
	f.PushHook(func(context.Context, ...int) ([]shared.Upload, error) {
		return r0, r1
	})
}

func (f *UploadsServiceGetUploadsByIDsFunc) nextHook() func(context.Context, ...int) ([]shared.Upload, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceGetUploadsByIDsFunc) appendCall(r0 UploadsServiceGetUploadsByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceGetUploadsByIDsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceGetUploadsByIDsFunc) History() []UploadsServiceGetUploadsByIDsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceGetUploadsByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceGetUploadsByIDsFuncCall is an object that describes an
// invocation of method GetUploadsByIDs on an instance of
// MockUploadsService.
type UploadsServiceGetUploadsByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.Upload
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c UploadsServiceGetUploadsByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceGetUploadsByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceNumRepositoriesWithCodeIntelligenceFunc describes the
// behavior when the NumRepositoriesWithCodeIntelligence method of the
// parent MockUploadsService instance is invoked.
type UploadsServiceNumRepositoriesWithCodeIntelligenceFunc struct {
	defaultHook func(context.Context) (int, error)
	hooks       []func(context.Context) (int, error)
	history     []UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall
	mutex       sync.Mutex
}

// NumRepositoriesWithCodeIntelligence delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockUploadsService) NumRepositoriesWithCodeIntelligence(v0 context.Context) (int, error) {
	r0, r1 := m.NumRepositoriesWithCodeIntelligenceFunc.nextHook()(v0)
	m.NumRepositoriesWithCodeIntelligenceFunc.appendCall(UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// NumRepositoriesWithCodeIntelligence method of the parent
// MockUploadsService instance is invoked and the hook queue is empty.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) SetDefaultHook(hook func(context.Context) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// NumRepositoriesWithCodeIntelligence method of the parent
// MockUploadsService instance invokes the hook at the front of the queue
// and discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) PushHook(hook func(context.Context) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context) (int, error) {
		return r0, r1
	})
}

func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) nextHook() func(context.Context) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) appendCall(r0 UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall objects
// describing the invocations of this function.
func (f *UploadsServiceNumRepositoriesWithCodeIntelligenceFunc) History() []UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall is an object
// that describes an invocation of method
// NumRepositoriesWithCodeIntelligence on an instance of MockUploadsService.
type UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceNumRepositoriesWithCodeIntelligenceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// UploadsServiceReindexUploadByIDFunc describes the behavior when the
// ReindexUploadByID method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceReindexUploadByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []UploadsServiceReindexUploadByIDFuncCall
	mutex       sync.Mutex
}

// ReindexUploadByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) ReindexUploadByID(v0 context.Context, v1 int) error {
	r0 := m.ReindexUploadByIDFunc.nextHook()(v0, v1)
	m.ReindexUploadByIDFunc.appendCall(UploadsServiceReindexUploadByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexUploadByID
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceReindexUploadByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexUploadByID method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceReindexUploadByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceReindexUploadByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceReindexUploadByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *UploadsServiceReindexUploadByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceReindexUploadByIDFunc) appendCall(r0 UploadsServiceReindexUploadByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceReindexUploadByIDFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceReindexUploadByIDFunc) History() []UploadsServiceReindexUploadByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceReindexUploadByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceReindexUploadByIDFuncCall is an object that describes an
// invocation of method ReindexUploadByID on an instance of
// MockUploadsService.
type UploadsServiceReindexUploadByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceReindexUploadByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceReindexUploadByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceReindexUploadsFunc describes the behavior when the
// ReindexUploads method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceReindexUploadsFunc struct {
	defaultHook func(context.Context, shared.ReindexUploadsOptions) error
	hooks       []func(context.Context, shared.ReindexUploadsOptions) error
	history     []UploadsServiceReindexUploadsFuncCall
	mutex       sync.Mutex
}

// ReindexUploads delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockUploadsService) ReindexUploads(v0 context.Context, v1 shared.ReindexUploadsOptions) error {
	r0 := m.ReindexUploadsFunc.nextHook()(v0, v1)
	m.ReindexUploadsFunc.appendCall(UploadsServiceReindexUploadsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReindexUploads
// method of the parent MockUploadsService instance is invoked and the hook
// queue is empty.
func (f *UploadsServiceReindexUploadsFunc) SetDefaultHook(hook func(context.Context, shared.ReindexUploadsOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReindexUploads method of the parent MockUploadsService instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *UploadsServiceReindexUploadsFunc) PushHook(hook func(context.Context, shared.ReindexUploadsOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceReindexUploadsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.ReindexUploadsOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceReindexUploadsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.ReindexUploadsOptions) error {
		return r0
	})
}

func (f *UploadsServiceReindexUploadsFunc) nextHook() func(context.Context, shared.ReindexUploadsOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceReindexUploadsFunc) appendCall(r0 UploadsServiceReindexUploadsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceReindexUploadsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceReindexUploadsFunc) History() []UploadsServiceReindexUploadsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceReindexUploadsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceReindexUploadsFuncCall is an object that describes an
// invocation of method ReindexUploads on an instance of MockUploadsService.
type UploadsServiceReindexUploadsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.ReindexUploadsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceReindexUploadsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceReindexUploadsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceRepositoryIDsWithErrorsFunc describes the behavior when the
// RepositoryIDsWithErrors method of the parent MockUploadsService instance
// is invoked.
type UploadsServiceRepositoryIDsWithErrorsFunc struct {
	defaultHook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	hooks       []func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)
	history     []UploadsServiceRepositoryIDsWithErrorsFuncCall
	mutex       sync.Mutex
}

// RepositoryIDsWithErrors delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) RepositoryIDsWithErrors(v0 context.Context, v1 int, v2 int) ([]shared.RepositoryWithCount, int, error) {
	r0, r1, r2 := m.RepositoryIDsWithErrorsFunc.nextHook()(v0, v1, v2)
	m.RepositoryIDsWithErrorsFunc.appendCall(UploadsServiceRepositoryIDsWithErrorsFuncCall{v0, v1, v2, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the
// RepositoryIDsWithErrors method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) SetDefaultHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RepositoryIDsWithErrors method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) PushHook(hook func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) SetDefaultReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.SetDefaultHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) PushReturn(r0 []shared.RepositoryWithCount, r1 int, r2 error) {
	f.PushHook(func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
		return r0, r1, r2
	})
}

func (f *UploadsServiceRepositoryIDsWithErrorsFunc) nextHook() func(context.Context, int, int) ([]shared.RepositoryWithCount, int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceRepositoryIDsWithErrorsFunc) appendCall(r0 UploadsServiceRepositoryIDsWithErrorsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceRepositoryIDsWithErrorsFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceRepositoryIDsWithErrorsFunc) History() []UploadsServiceRepositoryIDsWithErrorsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceRepositoryIDsWithErrorsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceRepositoryIDsWithErrorsFuncCall is an object that describes
// an invocation of method RepositoryIDsWithErrors on an instance of
// MockUploadsService.
type UploadsServiceRepositoryIDsWithErrorsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []shared.RepositoryWithCount
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 int
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceRepositoryIDsWithErrorsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceRepositoryIDsWithErrorsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// UploadsServiceSetRerunAutoIndexJobByIDFunc describes the behavior when
// the SetRerunAutoIndexJobByID method of the parent MockUploadsService
// instance is invoked.
type UploadsServiceSetRerunAutoIndexJobByIDFunc struct {
	defaultHook func(context.Context, int) error
	hooks       []func(context.Context, int) error
	history     []UploadsServiceSetRerunAutoIndexJobByIDFuncCall
	mutex       sync.Mutex
}

// SetRerunAutoIndexJobByID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) SetRerunAutoIndexJobByID(v0 context.Context, v1 int) error {
	r0 := m.SetRerunAutoIndexJobByIDFunc.nextHook()(v0, v1)
	m.SetRerunAutoIndexJobByIDFunc.appendCall(UploadsServiceSetRerunAutoIndexJobByIDFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetRerunAutoIndexJobByID method of the parent MockUploadsService instance
// is invoked and the hook queue is empty.
func (f *UploadsServiceSetRerunAutoIndexJobByIDFunc) SetDefaultHook(hook func(context.Context, int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRerunAutoIndexJobByID method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceSetRerunAutoIndexJobByIDFunc) PushHook(hook func(context.Context, int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceSetRerunAutoIndexJobByIDFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceSetRerunAutoIndexJobByIDFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int) error {
		return r0
	})
}

func (f *UploadsServiceSetRerunAutoIndexJobByIDFunc) nextHook() func(context.Context, int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceSetRerunAutoIndexJobByIDFunc) appendCall(r0 UploadsServiceSetRerunAutoIndexJobByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// UploadsServiceSetRerunAutoIndexJobByIDFuncCall objects describing the
// invocations of this function.
func (f *UploadsServiceSetRerunAutoIndexJobByIDFunc) History() []UploadsServiceSetRerunAutoIndexJobByIDFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceSetRerunAutoIndexJobByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceSetRerunAutoIndexJobByIDFuncCall is an object that
// describes an invocation of method SetRerunAutoIndexJobByID on an instance
// of MockUploadsService.
type UploadsServiceSetRerunAutoIndexJobByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceSetRerunAutoIndexJobByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceSetRerunAutoIndexJobByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// UploadsServiceSetRerunAutoIndexJobsFunc describes the behavior when the
// SetRerunAutoIndexJobs method of the parent MockUploadsService instance is
// invoked.
type UploadsServiceSetRerunAutoIndexJobsFunc struct {
	defaultHook func(context.Context, shared.SetRerunAutoIndexJobsOptions) error
	hooks       []func(context.Context, shared.SetRerunAutoIndexJobsOptions) error
	history     []UploadsServiceSetRerunAutoIndexJobsFuncCall
	mutex       sync.Mutex
}

// SetRerunAutoIndexJobs delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockUploadsService) SetRerunAutoIndexJobs(v0 context.Context, v1 shared.SetRerunAutoIndexJobsOptions) error {
	r0 := m.SetRerunAutoIndexJobsFunc.nextHook()(v0, v1)
	m.SetRerunAutoIndexJobsFunc.appendCall(UploadsServiceSetRerunAutoIndexJobsFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// SetRerunAutoIndexJobs method of the parent MockUploadsService instance is
// invoked and the hook queue is empty.
func (f *UploadsServiceSetRerunAutoIndexJobsFunc) SetDefaultHook(hook func(context.Context, shared.SetRerunAutoIndexJobsOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetRerunAutoIndexJobs method of the parent MockUploadsService instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *UploadsServiceSetRerunAutoIndexJobsFunc) PushHook(hook func(context.Context, shared.SetRerunAutoIndexJobsOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *UploadsServiceSetRerunAutoIndexJobsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, shared.SetRerunAutoIndexJobsOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *UploadsServiceSetRerunAutoIndexJobsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, shared.SetRerunAutoIndexJobsOptions) error {
		return r0
	})
}

func (f *UploadsServiceSetRerunAutoIndexJobsFunc) nextHook() func(context.Context, shared.SetRerunAutoIndexJobsOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *UploadsServiceSetRerunAutoIndexJobsFunc) appendCall(r0 UploadsServiceSetRerunAutoIndexJobsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of UploadsServiceSetRerunAutoIndexJobsFuncCall
// objects describing the invocations of this function.
func (f *UploadsServiceSetRerunAutoIndexJobsFunc) History() []UploadsServiceSetRerunAutoIndexJobsFuncCall {
	f.mutex.Lock()
	history := make([]UploadsServiceSetRerunAutoIndexJobsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// UploadsServiceSetRerunAutoIndexJobsFuncCall is an object that describes
// an invocation of method SetRerunAutoIndexJobs on an instance of
// MockUploadsService.
type UploadsServiceSetRerunAutoIndexJobsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 shared.SetRerunAutoIndexJobsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c UploadsServiceSetRerunAutoIndexJobsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c UploadsServiceSetRerunAutoIndexJobsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
