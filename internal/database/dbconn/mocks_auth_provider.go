// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package dbconn

import (
	"sync"

	v4 "github.com/jackc/pgx/v4"
	log "github.com/sourcegraph/log"
)

// MockAuthProvider is a mock implementation of the AuthProvider interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/database/dbconn) used for
// unit testing.
type MockAuthProvider struct {
	// ApplyFunc is an instance of a mock function object controlling the
	// behavior of the method Apply.
	ApplyFunc *AuthProviderApplyFunc
	// IsRefreshFunc is an instance of a mock function object controlling
	// the behavior of the method IsRefresh.
	IsRefreshFunc *AuthProviderIsRefreshFunc
}

// NewMockAuthProvider creates a new mock of the AuthProvider interface. All
// methods return zero values for all results, unless overwritten.
func NewMockAuthProvider() *MockAuthProvider {
	return &MockAuthProvider{
		ApplyFunc: &AuthProviderApplyFunc{
			defaultHook: func(log.Logger, *v4.ConnConfig) (r0 error) {
				return
			},
		},
		IsRefreshFunc: &AuthProviderIsRefreshFunc{
			defaultHook: func(log.Logger, *v4.ConnConfig) (r0 bool) {
				return
			},
		},
	}
}

// NewStrictMockAuthProvider creates a new mock of the AuthProvider
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAuthProvider() *MockAuthProvider {
	return &MockAuthProvider{
		ApplyFunc: &AuthProviderApplyFunc{
			defaultHook: func(log.Logger, *v4.ConnConfig) error {
				panic("unexpected invocation of MockAuthProvider.Apply")
			},
		},
		IsRefreshFunc: &AuthProviderIsRefreshFunc{
			defaultHook: func(log.Logger, *v4.ConnConfig) bool {
				panic("unexpected invocation of MockAuthProvider.IsRefresh")
			},
		},
	}
}

// NewMockAuthProviderFrom creates a new mock of the MockAuthProvider
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockAuthProviderFrom(i AuthProvider) *MockAuthProvider {
	return &MockAuthProvider{
		ApplyFunc: &AuthProviderApplyFunc{
			defaultHook: i.Apply,
		},
		IsRefreshFunc: &AuthProviderIsRefreshFunc{
			defaultHook: i.IsRefresh,
		},
	}
}

// AuthProviderApplyFunc describes the behavior when the Apply method of the
// parent MockAuthProvider instance is invoked.
type AuthProviderApplyFunc struct {
	defaultHook func(log.Logger, *v4.ConnConfig) error
	hooks       []func(log.Logger, *v4.ConnConfig) error
	history     []AuthProviderApplyFuncCall
	mutex       sync.Mutex
}

// Apply delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAuthProvider) Apply(v0 log.Logger, v1 *v4.ConnConfig) error {
	r0 := m.ApplyFunc.nextHook()(v0, v1)
	m.ApplyFunc.appendCall(AuthProviderApplyFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Apply method of the
// parent MockAuthProvider instance is invoked and the hook queue is empty.
func (f *AuthProviderApplyFunc) SetDefaultHook(hook func(log.Logger, *v4.ConnConfig) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Apply method of the parent MockAuthProvider instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AuthProviderApplyFunc) PushHook(hook func(log.Logger, *v4.ConnConfig) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthProviderApplyFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(log.Logger, *v4.ConnConfig) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthProviderApplyFunc) PushReturn(r0 error) {
	f.PushHook(func(log.Logger, *v4.ConnConfig) error {
		return r0
	})
}

func (f *AuthProviderApplyFunc) nextHook() func(log.Logger, *v4.ConnConfig) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthProviderApplyFunc) appendCall(r0 AuthProviderApplyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthProviderApplyFuncCall objects
// describing the invocations of this function.
func (f *AuthProviderApplyFunc) History() []AuthProviderApplyFuncCall {
	f.mutex.Lock()
	history := make([]AuthProviderApplyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthProviderApplyFuncCall is an object that describes an invocation of
// method Apply on an instance of MockAuthProvider.
type AuthProviderApplyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.Logger
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v4.ConnConfig
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthProviderApplyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthProviderApplyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AuthProviderIsRefreshFunc describes the behavior when the IsRefresh
// method of the parent MockAuthProvider instance is invoked.
type AuthProviderIsRefreshFunc struct {
	defaultHook func(log.Logger, *v4.ConnConfig) bool
	hooks       []func(log.Logger, *v4.ConnConfig) bool
	history     []AuthProviderIsRefreshFuncCall
	mutex       sync.Mutex
}

// IsRefresh delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAuthProvider) IsRefresh(v0 log.Logger, v1 *v4.ConnConfig) bool {
	r0 := m.IsRefreshFunc.nextHook()(v0, v1)
	m.IsRefreshFunc.appendCall(AuthProviderIsRefreshFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IsRefresh method of
// the parent MockAuthProvider instance is invoked and the hook queue is
// empty.
func (f *AuthProviderIsRefreshFunc) SetDefaultHook(hook func(log.Logger, *v4.ConnConfig) bool) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IsRefresh method of the parent MockAuthProvider instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AuthProviderIsRefreshFunc) PushHook(hook func(log.Logger, *v4.ConnConfig) bool) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthProviderIsRefreshFunc) SetDefaultReturn(r0 bool) {
	f.SetDefaultHook(func(log.Logger, *v4.ConnConfig) bool {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthProviderIsRefreshFunc) PushReturn(r0 bool) {
	f.PushHook(func(log.Logger, *v4.ConnConfig) bool {
		return r0
	})
}

func (f *AuthProviderIsRefreshFunc) nextHook() func(log.Logger, *v4.ConnConfig) bool {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthProviderIsRefreshFunc) appendCall(r0 AuthProviderIsRefreshFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthProviderIsRefreshFuncCall objects
// describing the invocations of this function.
func (f *AuthProviderIsRefreshFunc) History() []AuthProviderIsRefreshFuncCall {
	f.mutex.Lock()
	history := make([]AuthProviderIsRefreshFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthProviderIsRefreshFuncCall is an object that describes an invocation
// of method IsRefresh on an instance of MockAuthProvider.
type AuthProviderIsRefreshFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.Logger
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *v4.ConnConfig
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthProviderIsRefreshFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthProviderIsRefreshFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
