// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package rds

import "sync"

// MockAuthProvider is a mock implementation of the AuthProvider interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/database/dbconn/rds) used for
// unit testing.
type MockAuthProvider struct {
	// AuthTokenFunc is an instance of a mock function object controlling
	// the behavior of the method AuthToken.
	AuthTokenFunc *AuthProviderAuthTokenFunc
}

// NewMockAuthProvider creates a new mock of the AuthProvider interface. All
// methods return zero values for all results, unless overwritten.
func NewMockAuthProvider() *MockAuthProvider {
	return &MockAuthProvider{
		AuthTokenFunc: &AuthProviderAuthTokenFunc{
			defaultHook: func(string, uint16, string) (r0 string, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockAuthProvider creates a new mock of the AuthProvider
// interface. All methods panic on invocation, unless overwritten.
func NewStrictMockAuthProvider() *MockAuthProvider {
	return &MockAuthProvider{
		AuthTokenFunc: &AuthProviderAuthTokenFunc{
			defaultHook: func(string, uint16, string) (string, error) {
				panic("unexpected invocation of MockAuthProvider.AuthToken")
			},
		},
	}
}

// NewMockAuthProviderFrom creates a new mock of the MockAuthProvider
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockAuthProviderFrom(i AuthProvider) *MockAuthProvider {
	return &MockAuthProvider{
		AuthTokenFunc: &AuthProviderAuthTokenFunc{
			defaultHook: i.AuthToken,
		},
	}
}

// AuthProviderAuthTokenFunc describes the behavior when the AuthToken
// method of the parent MockAuthProvider instance is invoked.
type AuthProviderAuthTokenFunc struct {
	defaultHook func(string, uint16, string) (string, error)
	hooks       []func(string, uint16, string) (string, error)
	history     []AuthProviderAuthTokenFuncCall
	mutex       sync.Mutex
}

// AuthToken delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAuthProvider) AuthToken(v0 string, v1 uint16, v2 string) (string, error) {
	r0, r1 := m.AuthTokenFunc.nextHook()(v0, v1, v2)
	m.AuthTokenFunc.appendCall(AuthProviderAuthTokenFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the AuthToken method of
// the parent MockAuthProvider instance is invoked and the hook queue is
// empty.
func (f *AuthProviderAuthTokenFunc) SetDefaultHook(hook func(string, uint16, string) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// AuthToken method of the parent MockAuthProvider instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AuthProviderAuthTokenFunc) PushHook(hook func(string, uint16, string) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *AuthProviderAuthTokenFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(string, uint16, string) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *AuthProviderAuthTokenFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(string, uint16, string) (string, error) {
		return r0, r1
	})
}

func (f *AuthProviderAuthTokenFunc) nextHook() func(string, uint16, string) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AuthProviderAuthTokenFunc) appendCall(r0 AuthProviderAuthTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AuthProviderAuthTokenFuncCall objects
// describing the invocations of this function.
func (f *AuthProviderAuthTokenFunc) History() []AuthProviderAuthTokenFuncCall {
	f.mutex.Lock()
	history := make([]AuthProviderAuthTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AuthProviderAuthTokenFuncCall is an object that describes an invocation
// of method AuthToken on an instance of MockAuthProvider.
type AuthProviderAuthTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 uint16
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AuthProviderAuthTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AuthProviderAuthTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
