// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dbmock

import (
	"context"
	"sync"

	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockIRepoStore is a mock implementation of the IRepoStore interface (from
// the package github.com/sourcegraph/sourcegraph/internal/database) used
// for unit testing.
type MockIRepoStore struct {
	// CountFunc is an instance of a mock function object controlling the
	// behavior of the method Count.
	CountFunc *IRepoStoreCountFunc
	// CreateFunc is an instance of a mock function object controlling the
	// behavior of the method Create.
	CreateFunc *IRepoStoreCreateFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *IRepoStoreDeleteFunc
	// ExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ExternalServices.
	ExternalServicesFunc *IRepoStoreExternalServicesFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *IRepoStoreGetFunc
	// GetByIDsFunc is an instance of a mock function object controlling the
	// behavior of the method GetByIDs.
	GetByIDsFunc *IRepoStoreGetByIDsFunc
	// GetByNameFunc is an instance of a mock function object controlling
	// the behavior of the method GetByName.
	GetByNameFunc *IRepoStoreGetByNameFunc
	// GetFirstRepoNamesByCloneURLFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetFirstRepoNamesByCloneURL.
	GetFirstRepoNamesByCloneURLFunc *IRepoStoreGetFirstRepoNamesByCloneURLFunc
	// GetReposSetByIDsFunc is an instance of a mock function object
	// controlling the behavior of the method GetReposSetByIDs.
	GetReposSetByIDsFunc *IRepoStoreGetReposSetByIDsFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *IRepoStoreListFunc
	// ListEnabledNamesFunc is an instance of a mock function object
	// controlling the behavior of the method ListEnabledNames.
	ListEnabledNamesFunc *IRepoStoreListEnabledNamesFunc
	// ListIndexableReposFunc is an instance of a mock function object
	// controlling the behavior of the method ListIndexableRepos.
	ListIndexableReposFunc *IRepoStoreListIndexableReposFunc
	// ListRepoNamesFunc is an instance of a mock function object
	// controlling the behavior of the method ListRepoNames.
	ListRepoNamesFunc *IRepoStoreListRepoNamesFunc
	// MetadataFunc is an instance of a mock function object controlling the
	// behavior of the method Metadata.
	MetadataFunc *IRepoStoreMetadataFunc
	// StreamRepoNamesFunc is an instance of a mock function object
	// controlling the behavior of the method StreamRepoNames.
	StreamRepoNamesFunc *IRepoStoreStreamRepoNamesFunc
}

// NewMockIRepoStore creates a new mock of the IRepoStore interface. All
// methods return zero values for all results, unless overwritten.
func NewMockIRepoStore() *MockIRepoStore {
	return &MockIRepoStore{
		CountFunc: &IRepoStoreCountFunc{
			defaultHook: func(context.Context, database.ReposListOptions) (int, error) {
				return 0, nil
			},
		},
		CreateFunc: &IRepoStoreCreateFunc{
			defaultHook: func(context.Context, ...*types.Repo) error {
				return nil
			},
		},
		DeleteFunc: &IRepoStoreDeleteFunc{
			defaultHook: func(context.Context, ...api.RepoID) error {
				return nil
			},
		},
		ExternalServicesFunc: &IRepoStoreExternalServicesFunc{
			defaultHook: func(context.Context, api.RepoID) ([]*types.ExternalService, error) {
				return nil, nil
			},
		},
		GetFunc: &IRepoStoreGetFunc{
			defaultHook: func(context.Context, api.RepoID) (*types.Repo, error) {
				return nil, nil
			},
		},
		GetByIDsFunc: &IRepoStoreGetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
				return nil, nil
			},
		},
		GetByNameFunc: &IRepoStoreGetByNameFunc{
			defaultHook: func(context.Context, api.RepoName) (*types.Repo, error) {
				return nil, nil
			},
		},
		GetFirstRepoNamesByCloneURLFunc: &IRepoStoreGetFirstRepoNamesByCloneURLFunc{
			defaultHook: func(context.Context, string) (api.RepoName, error) {
				return "", nil
			},
		},
		GetReposSetByIDsFunc: &IRepoStoreGetReposSetByIDsFunc{
			defaultHook: func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
				return nil, nil
			},
		},
		ListFunc: &IRepoStoreListFunc{
			defaultHook: func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
				return nil, nil
			},
		},
		ListEnabledNamesFunc: &IRepoStoreListEnabledNamesFunc{
			defaultHook: func(context.Context) ([]string, error) {
				return nil, nil
			},
		},
		ListIndexableReposFunc: &IRepoStoreListIndexableReposFunc{
			defaultHook: func(context.Context, database.ListIndexableReposOptions) ([]types.RepoName, error) {
				return nil, nil
			},
		},
		ListRepoNamesFunc: &IRepoStoreListRepoNamesFunc{
			defaultHook: func(context.Context, database.ReposListOptions) ([]types.RepoName, error) {
				return nil, nil
			},
		},
		MetadataFunc: &IRepoStoreMetadataFunc{
			defaultHook: func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
				return nil, nil
			},
		},
		StreamRepoNamesFunc: &IRepoStoreStreamRepoNamesFunc{
			defaultHook: func(context.Context, database.ReposListOptions, func(*types.RepoName)) error {
				return nil
			},
		},
	}
}

// NewMockIRepoStoreFrom creates a new mock of the MockIRepoStore interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockIRepoStoreFrom(i database.IRepoStore) *MockIRepoStore {
	return &MockIRepoStore{
		CountFunc: &IRepoStoreCountFunc{
			defaultHook: i.Count,
		},
		CreateFunc: &IRepoStoreCreateFunc{
			defaultHook: i.Create,
		},
		DeleteFunc: &IRepoStoreDeleteFunc{
			defaultHook: i.Delete,
		},
		ExternalServicesFunc: &IRepoStoreExternalServicesFunc{
			defaultHook: i.ExternalServices,
		},
		GetFunc: &IRepoStoreGetFunc{
			defaultHook: i.Get,
		},
		GetByIDsFunc: &IRepoStoreGetByIDsFunc{
			defaultHook: i.GetByIDs,
		},
		GetByNameFunc: &IRepoStoreGetByNameFunc{
			defaultHook: i.GetByName,
		},
		GetFirstRepoNamesByCloneURLFunc: &IRepoStoreGetFirstRepoNamesByCloneURLFunc{
			defaultHook: i.GetFirstRepoNamesByCloneURL,
		},
		GetReposSetByIDsFunc: &IRepoStoreGetReposSetByIDsFunc{
			defaultHook: i.GetReposSetByIDs,
		},
		ListFunc: &IRepoStoreListFunc{
			defaultHook: i.List,
		},
		ListEnabledNamesFunc: &IRepoStoreListEnabledNamesFunc{
			defaultHook: i.ListEnabledNames,
		},
		ListIndexableReposFunc: &IRepoStoreListIndexableReposFunc{
			defaultHook: i.ListIndexableRepos,
		},
		ListRepoNamesFunc: &IRepoStoreListRepoNamesFunc{
			defaultHook: i.ListRepoNames,
		},
		MetadataFunc: &IRepoStoreMetadataFunc{
			defaultHook: i.Metadata,
		},
		StreamRepoNamesFunc: &IRepoStoreStreamRepoNamesFunc{
			defaultHook: i.StreamRepoNames,
		},
	}
}

// IRepoStoreCountFunc describes the behavior when the Count method of the
// parent MockIRepoStore instance is invoked.
type IRepoStoreCountFunc struct {
	defaultHook func(context.Context, database.ReposListOptions) (int, error)
	hooks       []func(context.Context, database.ReposListOptions) (int, error)
	history     []IRepoStoreCountFuncCall
	mutex       sync.Mutex
}

// Count delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIRepoStore) Count(v0 context.Context, v1 database.ReposListOptions) (int, error) {
	r0, r1 := m.CountFunc.nextHook()(v0, v1)
	m.CountFunc.appendCall(IRepoStoreCountFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Count method of the
// parent MockIRepoStore instance is invoked and the hook queue is empty.
func (f *IRepoStoreCountFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) (int, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Count method of the parent MockIRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IRepoStoreCountFunc) PushHook(hook func(context.Context, database.ReposListOptions) (int, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreCountFunc) SetDefaultReturn(r0 int, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions) (int, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreCountFunc) PushReturn(r0 int, r1 error) {
	f.PushHook(func(context.Context, database.ReposListOptions) (int, error) {
		return r0, r1
	})
}

func (f *IRepoStoreCountFunc) nextHook() func(context.Context, database.ReposListOptions) (int, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreCountFunc) appendCall(r0 IRepoStoreCountFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreCountFuncCall objects describing
// the invocations of this function.
func (f *IRepoStoreCountFunc) History() []IRepoStoreCountFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreCountFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreCountFuncCall is an object that describes an invocation of
// method Count on an instance of MockIRepoStore.
type IRepoStoreCountFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreCountFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreCountFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreCreateFunc describes the behavior when the Create method of the
// parent MockIRepoStore instance is invoked.
type IRepoStoreCreateFunc struct {
	defaultHook func(context.Context, ...*types.Repo) error
	hooks       []func(context.Context, ...*types.Repo) error
	history     []IRepoStoreCreateFuncCall
	mutex       sync.Mutex
}

// Create delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIRepoStore) Create(v0 context.Context, v1 ...*types.Repo) error {
	r0 := m.CreateFunc.nextHook()(v0, v1...)
	m.CreateFunc.appendCall(IRepoStoreCreateFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Create method of the
// parent MockIRepoStore instance is invoked and the hook queue is empty.
func (f *IRepoStoreCreateFunc) SetDefaultHook(hook func(context.Context, ...*types.Repo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Create method of the parent MockIRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IRepoStoreCreateFunc) PushHook(hook func(context.Context, ...*types.Repo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreCreateFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...*types.Repo) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreCreateFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...*types.Repo) error {
		return r0
	})
}

func (f *IRepoStoreCreateFunc) nextHook() func(context.Context, ...*types.Repo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreCreateFunc) appendCall(r0 IRepoStoreCreateFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreCreateFuncCall objects describing
// the invocations of this function.
func (f *IRepoStoreCreateFunc) History() []IRepoStoreCreateFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreCreateFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreCreateFuncCall is an object that describes an invocation of
// method Create on an instance of MockIRepoStore.
type IRepoStoreCreateFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []*types.Repo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c IRepoStoreCreateFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreCreateFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// IRepoStoreDeleteFunc describes the behavior when the Delete method of the
// parent MockIRepoStore instance is invoked.
type IRepoStoreDeleteFunc struct {
	defaultHook func(context.Context, ...api.RepoID) error
	hooks       []func(context.Context, ...api.RepoID) error
	history     []IRepoStoreDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIRepoStore) Delete(v0 context.Context, v1 ...api.RepoID) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1...)
	m.DeleteFunc.appendCall(IRepoStoreDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockIRepoStore instance is invoked and the hook queue is empty.
func (f *IRepoStoreDeleteFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockIRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IRepoStoreDeleteFunc) PushHook(hook func(context.Context, ...api.RepoID) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, ...api.RepoID) error {
		return r0
	})
}

func (f *IRepoStoreDeleteFunc) nextHook() func(context.Context, ...api.RepoID) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreDeleteFunc) appendCall(r0 IRepoStoreDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreDeleteFuncCall objects describing
// the invocations of this function.
func (f *IRepoStoreDeleteFunc) History() []IRepoStoreDeleteFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreDeleteFuncCall is an object that describes an invocation of
// method Delete on an instance of MockIRepoStore.
type IRepoStoreDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c IRepoStoreDeleteFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// IRepoStoreExternalServicesFunc describes the behavior when the
// ExternalServices method of the parent MockIRepoStore instance is invoked.
type IRepoStoreExternalServicesFunc struct {
	defaultHook func(context.Context, api.RepoID) ([]*types.ExternalService, error)
	hooks       []func(context.Context, api.RepoID) ([]*types.ExternalService, error)
	history     []IRepoStoreExternalServicesFuncCall
	mutex       sync.Mutex
}

// ExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIRepoStore) ExternalServices(v0 context.Context, v1 api.RepoID) ([]*types.ExternalService, error) {
	r0, r1 := m.ExternalServicesFunc.nextHook()(v0, v1)
	m.ExternalServicesFunc.appendCall(IRepoStoreExternalServicesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ExternalServices
// method of the parent MockIRepoStore instance is invoked and the hook
// queue is empty.
func (f *IRepoStoreExternalServicesFunc) SetDefaultHook(hook func(context.Context, api.RepoID) ([]*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExternalServices method of the parent MockIRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IRepoStoreExternalServicesFunc) PushHook(hook func(context.Context, api.RepoID) ([]*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreExternalServicesFunc) SetDefaultReturn(r0 []*types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreExternalServicesFunc) PushReturn(r0 []*types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *IRepoStoreExternalServicesFunc) nextHook() func(context.Context, api.RepoID) ([]*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreExternalServicesFunc) appendCall(r0 IRepoStoreExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreExternalServicesFuncCall objects
// describing the invocations of this function.
func (f *IRepoStoreExternalServicesFunc) History() []IRepoStoreExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreExternalServicesFuncCall is an object that describes an
// invocation of method ExternalServices on an instance of MockIRepoStore.
type IRepoStoreExternalServicesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreGetFunc describes the behavior when the Get method of the
// parent MockIRepoStore instance is invoked.
type IRepoStoreGetFunc struct {
	defaultHook func(context.Context, api.RepoID) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoID) (*types.Repo, error)
	history     []IRepoStoreGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIRepoStore) Get(v0 context.Context, v1 api.RepoID) (*types.Repo, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(IRepoStoreGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockIRepoStore instance is invoked and the hook queue is empty.
func (f *IRepoStoreGetFunc) SetDefaultHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockIRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IRepoStoreGetFunc) PushHook(hook func(context.Context, api.RepoID) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreGetFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreGetFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoID) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *IRepoStoreGetFunc) nextHook() func(context.Context, api.RepoID) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreGetFunc) appendCall(r0 IRepoStoreGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreGetFuncCall objects describing
// the invocations of this function.
func (f *IRepoStoreGetFunc) History() []IRepoStoreGetFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockIRepoStore.
type IRepoStoreGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreGetByIDsFunc describes the behavior when the GetByIDs method of
// the parent MockIRepoStore instance is invoked.
type IRepoStoreGetByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) ([]*types.Repo, error)
	hooks       []func(context.Context, ...api.RepoID) ([]*types.Repo, error)
	history     []IRepoStoreGetByIDsFuncCall
	mutex       sync.Mutex
}

// GetByIDs delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIRepoStore) GetByIDs(v0 context.Context, v1 ...api.RepoID) ([]*types.Repo, error) {
	r0, r1 := m.GetByIDsFunc.nextHook()(v0, v1...)
	m.GetByIDsFunc.appendCall(IRepoStoreGetByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByIDs method of
// the parent MockIRepoStore instance is invoked and the hook queue is
// empty.
func (f *IRepoStoreGetByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByIDs method of the parent MockIRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IRepoStoreGetByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreGetByIDsFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreGetByIDsFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *IRepoStoreGetByIDsFunc) nextHook() func(context.Context, ...api.RepoID) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreGetByIDsFunc) appendCall(r0 IRepoStoreGetByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreGetByIDsFuncCall objects
// describing the invocations of this function.
func (f *IRepoStoreGetByIDsFunc) History() []IRepoStoreGetByIDsFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreGetByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreGetByIDsFuncCall is an object that describes an invocation of
// method GetByIDs on an instance of MockIRepoStore.
type IRepoStoreGetByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c IRepoStoreGetByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreGetByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreGetByNameFunc describes the behavior when the GetByName method
// of the parent MockIRepoStore instance is invoked.
type IRepoStoreGetByNameFunc struct {
	defaultHook func(context.Context, api.RepoName) (*types.Repo, error)
	hooks       []func(context.Context, api.RepoName) (*types.Repo, error)
	history     []IRepoStoreGetByNameFuncCall
	mutex       sync.Mutex
}

// GetByName delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIRepoStore) GetByName(v0 context.Context, v1 api.RepoName) (*types.Repo, error) {
	r0, r1 := m.GetByNameFunc.nextHook()(v0, v1)
	m.GetByNameFunc.appendCall(IRepoStoreGetByNameFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetByName method of
// the parent MockIRepoStore instance is invoked and the hook queue is
// empty.
func (f *IRepoStoreGetByNameFunc) SetDefaultHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetByName method of the parent MockIRepoStore instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IRepoStoreGetByNameFunc) PushHook(hook func(context.Context, api.RepoName) (*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreGetByNameFunc) SetDefaultReturn(r0 *types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreGetByNameFunc) PushReturn(r0 *types.Repo, r1 error) {
	f.PushHook(func(context.Context, api.RepoName) (*types.Repo, error) {
		return r0, r1
	})
}

func (f *IRepoStoreGetByNameFunc) nextHook() func(context.Context, api.RepoName) (*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreGetByNameFunc) appendCall(r0 IRepoStoreGetByNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreGetByNameFuncCall objects
// describing the invocations of this function.
func (f *IRepoStoreGetByNameFunc) History() []IRepoStoreGetByNameFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreGetByNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreGetByNameFuncCall is an object that describes an invocation of
// method GetByName on an instance of MockIRepoStore.
type IRepoStoreGetByNameFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.RepoName
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreGetByNameFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreGetByNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreGetFirstRepoNamesByCloneURLFunc describes the behavior when the
// GetFirstRepoNamesByCloneURL method of the parent MockIRepoStore instance
// is invoked.
type IRepoStoreGetFirstRepoNamesByCloneURLFunc struct {
	defaultHook func(context.Context, string) (api.RepoName, error)
	hooks       []func(context.Context, string) (api.RepoName, error)
	history     []IRepoStoreGetFirstRepoNamesByCloneURLFuncCall
	mutex       sync.Mutex
}

// GetFirstRepoNamesByCloneURL delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockIRepoStore) GetFirstRepoNamesByCloneURL(v0 context.Context, v1 string) (api.RepoName, error) {
	r0, r1 := m.GetFirstRepoNamesByCloneURLFunc.nextHook()(v0, v1)
	m.GetFirstRepoNamesByCloneURLFunc.appendCall(IRepoStoreGetFirstRepoNamesByCloneURLFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetFirstRepoNamesByCloneURL method of the parent MockIRepoStore instance
// is invoked and the hook queue is empty.
func (f *IRepoStoreGetFirstRepoNamesByCloneURLFunc) SetDefaultHook(hook func(context.Context, string) (api.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetFirstRepoNamesByCloneURL method of the parent MockIRepoStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *IRepoStoreGetFirstRepoNamesByCloneURLFunc) PushHook(hook func(context.Context, string) (api.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreGetFirstRepoNamesByCloneURLFunc) SetDefaultReturn(r0 api.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (api.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreGetFirstRepoNamesByCloneURLFunc) PushReturn(r0 api.RepoName, r1 error) {
	f.PushHook(func(context.Context, string) (api.RepoName, error) {
		return r0, r1
	})
}

func (f *IRepoStoreGetFirstRepoNamesByCloneURLFunc) nextHook() func(context.Context, string) (api.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreGetFirstRepoNamesByCloneURLFunc) appendCall(r0 IRepoStoreGetFirstRepoNamesByCloneURLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// IRepoStoreGetFirstRepoNamesByCloneURLFuncCall objects describing the
// invocations of this function.
func (f *IRepoStoreGetFirstRepoNamesByCloneURLFunc) History() []IRepoStoreGetFirstRepoNamesByCloneURLFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreGetFirstRepoNamesByCloneURLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreGetFirstRepoNamesByCloneURLFuncCall is an object that describes
// an invocation of method GetFirstRepoNamesByCloneURL on an instance of
// MockIRepoStore.
type IRepoStoreGetFirstRepoNamesByCloneURLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 api.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreGetFirstRepoNamesByCloneURLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreGetFirstRepoNamesByCloneURLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreGetReposSetByIDsFunc describes the behavior when the
// GetReposSetByIDs method of the parent MockIRepoStore instance is invoked.
type IRepoStoreGetReposSetByIDsFunc struct {
	defaultHook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)
	hooks       []func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)
	history     []IRepoStoreGetReposSetByIDsFuncCall
	mutex       sync.Mutex
}

// GetReposSetByIDs delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIRepoStore) GetReposSetByIDs(v0 context.Context, v1 ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
	r0, r1 := m.GetReposSetByIDsFunc.nextHook()(v0, v1...)
	m.GetReposSetByIDsFunc.appendCall(IRepoStoreGetReposSetByIDsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetReposSetByIDs
// method of the parent MockIRepoStore instance is invoked and the hook
// queue is empty.
func (f *IRepoStoreGetReposSetByIDsFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetReposSetByIDs method of the parent MockIRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IRepoStoreGetReposSetByIDsFunc) PushHook(hook func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreGetReposSetByIDsFunc) SetDefaultReturn(r0 map[api.RepoID]*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreGetReposSetByIDsFunc) PushReturn(r0 map[api.RepoID]*types.Repo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
		return r0, r1
	})
}

func (f *IRepoStoreGetReposSetByIDsFunc) nextHook() func(context.Context, ...api.RepoID) (map[api.RepoID]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreGetReposSetByIDsFunc) appendCall(r0 IRepoStoreGetReposSetByIDsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreGetReposSetByIDsFuncCall objects
// describing the invocations of this function.
func (f *IRepoStoreGetReposSetByIDsFunc) History() []IRepoStoreGetReposSetByIDsFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreGetReposSetByIDsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreGetReposSetByIDsFuncCall is an object that describes an
// invocation of method GetReposSetByIDs on an instance of MockIRepoStore.
type IRepoStoreGetReposSetByIDsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 map[api.RepoID]*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c IRepoStoreGetReposSetByIDsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreGetReposSetByIDsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreListFunc describes the behavior when the List method of the
// parent MockIRepoStore instance is invoked.
type IRepoStoreListFunc struct {
	defaultHook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)
	hooks       []func(context.Context, database.ReposListOptions) ([]*types.Repo, error)
	history     []IRepoStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIRepoStore) List(v0 context.Context, v1 database.ReposListOptions) ([]*types.Repo, error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(IRepoStoreListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockIRepoStore instance is invoked and the hook queue is empty.
func (f *IRepoStoreListFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockIRepoStore instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *IRepoStoreListFunc) PushHook(hook func(context.Context, database.ReposListOptions) ([]*types.Repo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreListFunc) SetDefaultReturn(r0 []*types.Repo, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreListFunc) PushReturn(r0 []*types.Repo, r1 error) {
	f.PushHook(func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
		return r0, r1
	})
}

func (f *IRepoStoreListFunc) nextHook() func(context.Context, database.ReposListOptions) ([]*types.Repo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreListFunc) appendCall(r0 IRepoStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreListFuncCall objects describing
// the invocations of this function.
func (f *IRepoStoreListFunc) History() []IRepoStoreListFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreListFuncCall is an object that describes an invocation of
// method List on an instance of MockIRepoStore.
type IRepoStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.Repo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreListEnabledNamesFunc describes the behavior when the
// ListEnabledNames method of the parent MockIRepoStore instance is invoked.
type IRepoStoreListEnabledNamesFunc struct {
	defaultHook func(context.Context) ([]string, error)
	hooks       []func(context.Context) ([]string, error)
	history     []IRepoStoreListEnabledNamesFuncCall
	mutex       sync.Mutex
}

// ListEnabledNames delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIRepoStore) ListEnabledNames(v0 context.Context) ([]string, error) {
	r0, r1 := m.ListEnabledNamesFunc.nextHook()(v0)
	m.ListEnabledNamesFunc.appendCall(IRepoStoreListEnabledNamesFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListEnabledNames
// method of the parent MockIRepoStore instance is invoked and the hook
// queue is empty.
func (f *IRepoStoreListEnabledNamesFunc) SetDefaultHook(hook func(context.Context) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListEnabledNames method of the parent MockIRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IRepoStoreListEnabledNamesFunc) PushHook(hook func(context.Context) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreListEnabledNamesFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreListEnabledNamesFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context) ([]string, error) {
		return r0, r1
	})
}

func (f *IRepoStoreListEnabledNamesFunc) nextHook() func(context.Context) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreListEnabledNamesFunc) appendCall(r0 IRepoStoreListEnabledNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreListEnabledNamesFuncCall objects
// describing the invocations of this function.
func (f *IRepoStoreListEnabledNamesFunc) History() []IRepoStoreListEnabledNamesFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreListEnabledNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreListEnabledNamesFuncCall is an object that describes an
// invocation of method ListEnabledNames on an instance of MockIRepoStore.
type IRepoStoreListEnabledNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreListEnabledNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreListEnabledNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreListIndexableReposFunc describes the behavior when the
// ListIndexableRepos method of the parent MockIRepoStore instance is
// invoked.
type IRepoStoreListIndexableReposFunc struct {
	defaultHook func(context.Context, database.ListIndexableReposOptions) ([]types.RepoName, error)
	hooks       []func(context.Context, database.ListIndexableReposOptions) ([]types.RepoName, error)
	history     []IRepoStoreListIndexableReposFuncCall
	mutex       sync.Mutex
}

// ListIndexableRepos delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIRepoStore) ListIndexableRepos(v0 context.Context, v1 database.ListIndexableReposOptions) ([]types.RepoName, error) {
	r0, r1 := m.ListIndexableReposFunc.nextHook()(v0, v1)
	m.ListIndexableReposFunc.appendCall(IRepoStoreListIndexableReposFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListIndexableRepos
// method of the parent MockIRepoStore instance is invoked and the hook
// queue is empty.
func (f *IRepoStoreListIndexableReposFunc) SetDefaultHook(hook func(context.Context, database.ListIndexableReposOptions) ([]types.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListIndexableRepos method of the parent MockIRepoStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *IRepoStoreListIndexableReposFunc) PushHook(hook func(context.Context, database.ListIndexableReposOptions) ([]types.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreListIndexableReposFunc) SetDefaultReturn(r0 []types.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ListIndexableReposOptions) ([]types.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreListIndexableReposFunc) PushReturn(r0 []types.RepoName, r1 error) {
	f.PushHook(func(context.Context, database.ListIndexableReposOptions) ([]types.RepoName, error) {
		return r0, r1
	})
}

func (f *IRepoStoreListIndexableReposFunc) nextHook() func(context.Context, database.ListIndexableReposOptions) ([]types.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreListIndexableReposFunc) appendCall(r0 IRepoStoreListIndexableReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreListIndexableReposFuncCall
// objects describing the invocations of this function.
func (f *IRepoStoreListIndexableReposFunc) History() []IRepoStoreListIndexableReposFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreListIndexableReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreListIndexableReposFuncCall is an object that describes an
// invocation of method ListIndexableRepos on an instance of MockIRepoStore.
type IRepoStoreListIndexableReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ListIndexableReposOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreListIndexableReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreListIndexableReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreListRepoNamesFunc describes the behavior when the ListRepoNames
// method of the parent MockIRepoStore instance is invoked.
type IRepoStoreListRepoNamesFunc struct {
	defaultHook func(context.Context, database.ReposListOptions) ([]types.RepoName, error)
	hooks       []func(context.Context, database.ReposListOptions) ([]types.RepoName, error)
	history     []IRepoStoreListRepoNamesFuncCall
	mutex       sync.Mutex
}

// ListRepoNames delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockIRepoStore) ListRepoNames(v0 context.Context, v1 database.ReposListOptions) ([]types.RepoName, error) {
	r0, r1 := m.ListRepoNamesFunc.nextHook()(v0, v1)
	m.ListRepoNamesFunc.appendCall(IRepoStoreListRepoNamesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListRepoNames method
// of the parent MockIRepoStore instance is invoked and the hook queue is
// empty.
func (f *IRepoStoreListRepoNamesFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions) ([]types.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListRepoNames method of the parent MockIRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IRepoStoreListRepoNamesFunc) PushHook(hook func(context.Context, database.ReposListOptions) ([]types.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreListRepoNamesFunc) SetDefaultReturn(r0 []types.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions) ([]types.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreListRepoNamesFunc) PushReturn(r0 []types.RepoName, r1 error) {
	f.PushHook(func(context.Context, database.ReposListOptions) ([]types.RepoName, error) {
		return r0, r1
	})
}

func (f *IRepoStoreListRepoNamesFunc) nextHook() func(context.Context, database.ReposListOptions) ([]types.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreListRepoNamesFunc) appendCall(r0 IRepoStoreListRepoNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreListRepoNamesFuncCall objects
// describing the invocations of this function.
func (f *IRepoStoreListRepoNamesFunc) History() []IRepoStoreListRepoNamesFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreListRepoNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreListRepoNamesFuncCall is an object that describes an invocation
// of method ListRepoNames on an instance of MockIRepoStore.
type IRepoStoreListRepoNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []types.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreListRepoNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreListRepoNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreMetadataFunc describes the behavior when the Metadata method of
// the parent MockIRepoStore instance is invoked.
type IRepoStoreMetadataFunc struct {
	defaultHook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)
	hooks       []func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)
	history     []IRepoStoreMetadataFuncCall
	mutex       sync.Mutex
}

// Metadata delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIRepoStore) Metadata(v0 context.Context, v1 ...api.RepoID) ([]*types.SearchedRepo, error) {
	r0, r1 := m.MetadataFunc.nextHook()(v0, v1...)
	m.MetadataFunc.appendCall(IRepoStoreMetadataFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Metadata method of
// the parent MockIRepoStore instance is invoked and the hook queue is
// empty.
func (f *IRepoStoreMetadataFunc) SetDefaultHook(hook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Metadata method of the parent MockIRepoStore instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *IRepoStoreMetadataFunc) PushHook(hook func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreMetadataFunc) SetDefaultReturn(r0 []*types.SearchedRepo, r1 error) {
	f.SetDefaultHook(func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreMetadataFunc) PushReturn(r0 []*types.SearchedRepo, r1 error) {
	f.PushHook(func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
		return r0, r1
	})
}

func (f *IRepoStoreMetadataFunc) nextHook() func(context.Context, ...api.RepoID) ([]*types.SearchedRepo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreMetadataFunc) appendCall(r0 IRepoStoreMetadataFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreMetadataFuncCall objects
// describing the invocations of this function.
func (f *IRepoStoreMetadataFunc) History() []IRepoStoreMetadataFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreMetadataFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreMetadataFuncCall is an object that describes an invocation of
// method Metadata on an instance of MockIRepoStore.
type IRepoStoreMetadataFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []api.RepoID
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.SearchedRepo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c IRepoStoreMetadataFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreMetadataFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// IRepoStoreStreamRepoNamesFunc describes the behavior when the
// StreamRepoNames method of the parent MockIRepoStore instance is invoked.
type IRepoStoreStreamRepoNamesFunc struct {
	defaultHook func(context.Context, database.ReposListOptions, func(*types.RepoName)) error
	hooks       []func(context.Context, database.ReposListOptions, func(*types.RepoName)) error
	history     []IRepoStoreStreamRepoNamesFuncCall
	mutex       sync.Mutex
}

// StreamRepoNames delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockIRepoStore) StreamRepoNames(v0 context.Context, v1 database.ReposListOptions, v2 func(*types.RepoName)) error {
	r0 := m.StreamRepoNamesFunc.nextHook()(v0, v1, v2)
	m.StreamRepoNamesFunc.appendCall(IRepoStoreStreamRepoNamesFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the StreamRepoNames
// method of the parent MockIRepoStore instance is invoked and the hook
// queue is empty.
func (f *IRepoStoreStreamRepoNamesFunc) SetDefaultHook(hook func(context.Context, database.ReposListOptions, func(*types.RepoName)) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// StreamRepoNames method of the parent MockIRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IRepoStoreStreamRepoNamesFunc) PushHook(hook func(context.Context, database.ReposListOptions, func(*types.RepoName)) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IRepoStoreStreamRepoNamesFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, database.ReposListOptions, func(*types.RepoName)) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IRepoStoreStreamRepoNamesFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, database.ReposListOptions, func(*types.RepoName)) error {
		return r0
	})
}

func (f *IRepoStoreStreamRepoNamesFunc) nextHook() func(context.Context, database.ReposListOptions, func(*types.RepoName)) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IRepoStoreStreamRepoNamesFunc) appendCall(r0 IRepoStoreStreamRepoNamesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IRepoStoreStreamRepoNamesFuncCall objects
// describing the invocations of this function.
func (f *IRepoStoreStreamRepoNamesFunc) History() []IRepoStoreStreamRepoNamesFuncCall {
	f.mutex.Lock()
	history := make([]IRepoStoreStreamRepoNamesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IRepoStoreStreamRepoNamesFuncCall is an object that describes an
// invocation of method StreamRepoNames on an instance of MockIRepoStore.
type IRepoStoreStreamRepoNamesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ReposListOptions
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 func(*types.RepoName)
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IRepoStoreStreamRepoNamesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IRepoStoreStreamRepoNamesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
