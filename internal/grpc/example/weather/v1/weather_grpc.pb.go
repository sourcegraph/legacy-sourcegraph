// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: weather.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WeatherService_GetCurrentWeather_FullMethodName       = "/grpc.example.weather.v1.WeatherService/GetCurrentWeather"
	WeatherService_SubscribeWeatherAlerts_FullMethodName  = "/grpc.example.weather.v1.WeatherService/SubscribeWeatherAlerts"
	WeatherService_UploadWeatherData_FullMethodName       = "/grpc.example.weather.v1.WeatherService/UploadWeatherData"
	WeatherService_RealTimeWeather_FullMethodName         = "/grpc.example.weather.v1.WeatherService/RealTimeWeather"
	WeatherService_UploadWeatherScreenshot_FullMethodName = "/grpc.example.weather.v1.WeatherService/UploadWeatherScreenshot"
	WeatherService_GetCurrentWeatherOld_FullMethodName    = "/grpc.example.weather.v1.WeatherService/GetCurrentWeatherOld"
)

// WeatherServiceClient is the client API for WeatherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherServiceClient interface {
	// Unary RPC: Get current weather for a location.
	GetCurrentWeather(ctx context.Context, in *GetCurrentWeatherRequest, opts ...grpc.CallOption) (*GetCurrentWeatherResponse, error)
	// Server Streaming RPC: Subscribe to severe weather alerts.
	SubscribeWeatherAlerts(ctx context.Context, in *SubscribeWeatherAlertsRequest, opts ...grpc.CallOption) (WeatherService_SubscribeWeatherAlertsClient, error)
	// Client Streaming RPC: Send weather data from sensors.
	UploadWeatherData(ctx context.Context, opts ...grpc.CallOption) (WeatherService_UploadWeatherDataClient, error)
	// Bidirectional Streaming RPC: Real-time weather updates.
	RealTimeWeather(ctx context.Context, opts ...grpc.CallOption) (WeatherService_RealTimeWeatherClient, error)
	// Client Streaming RPC: Upload a weather screenshot.
	UploadWeatherScreenshot(ctx context.Context, opts ...grpc.CallOption) (WeatherService_UploadWeatherScreenshotClient, error)
	// Deprecated: Do not use.
	// Deprecated RPC: Get current weather for a location.
	GetCurrentWeatherOld(ctx context.Context, in *GetCurrentWeatherOldRequest, opts ...grpc.CallOption) (*GetCurrentWeatherOldResponse, error)
}

type weatherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherServiceClient(cc grpc.ClientConnInterface) WeatherServiceClient {
	return &weatherServiceClient{cc}
}

func (c *weatherServiceClient) GetCurrentWeather(ctx context.Context, in *GetCurrentWeatherRequest, opts ...grpc.CallOption) (*GetCurrentWeatherResponse, error) {
	out := new(GetCurrentWeatherResponse)
	err := c.cc.Invoke(ctx, WeatherService_GetCurrentWeather_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherServiceClient) SubscribeWeatherAlerts(ctx context.Context, in *SubscribeWeatherAlertsRequest, opts ...grpc.CallOption) (WeatherService_SubscribeWeatherAlertsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WeatherService_ServiceDesc.Streams[0], WeatherService_SubscribeWeatherAlerts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherServiceSubscribeWeatherAlertsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WeatherService_SubscribeWeatherAlertsClient interface {
	Recv() (*SubscribeWeatherAlertsResponse, error)
	grpc.ClientStream
}

type weatherServiceSubscribeWeatherAlertsClient struct {
	grpc.ClientStream
}

func (x *weatherServiceSubscribeWeatherAlertsClient) Recv() (*SubscribeWeatherAlertsResponse, error) {
	m := new(SubscribeWeatherAlertsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weatherServiceClient) UploadWeatherData(ctx context.Context, opts ...grpc.CallOption) (WeatherService_UploadWeatherDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &WeatherService_ServiceDesc.Streams[1], WeatherService_UploadWeatherData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherServiceUploadWeatherDataClient{stream}
	return x, nil
}

type WeatherService_UploadWeatherDataClient interface {
	Send(*UploadWeatherDataRequest) error
	CloseAndRecv() (*UploadWeatherDataResponse, error)
	grpc.ClientStream
}

type weatherServiceUploadWeatherDataClient struct {
	grpc.ClientStream
}

func (x *weatherServiceUploadWeatherDataClient) Send(m *UploadWeatherDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *weatherServiceUploadWeatherDataClient) CloseAndRecv() (*UploadWeatherDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadWeatherDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weatherServiceClient) RealTimeWeather(ctx context.Context, opts ...grpc.CallOption) (WeatherService_RealTimeWeatherClient, error) {
	stream, err := c.cc.NewStream(ctx, &WeatherService_ServiceDesc.Streams[2], WeatherService_RealTimeWeather_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherServiceRealTimeWeatherClient{stream}
	return x, nil
}

type WeatherService_RealTimeWeatherClient interface {
	Send(*RealTimeWeatherRequest) error
	Recv() (*RealTimeWeatherResponse, error)
	grpc.ClientStream
}

type weatherServiceRealTimeWeatherClient struct {
	grpc.ClientStream
}

func (x *weatherServiceRealTimeWeatherClient) Send(m *RealTimeWeatherRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *weatherServiceRealTimeWeatherClient) Recv() (*RealTimeWeatherResponse, error) {
	m := new(RealTimeWeatherResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weatherServiceClient) UploadWeatherScreenshot(ctx context.Context, opts ...grpc.CallOption) (WeatherService_UploadWeatherScreenshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &WeatherService_ServiceDesc.Streams[3], WeatherService_UploadWeatherScreenshot_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherServiceUploadWeatherScreenshotClient{stream}
	return x, nil
}

type WeatherService_UploadWeatherScreenshotClient interface {
	Send(*UploadWeatherScreenshotRequest) error
	CloseAndRecv() (*UploadWeatherScreenshotResponse, error)
	grpc.ClientStream
}

type weatherServiceUploadWeatherScreenshotClient struct {
	grpc.ClientStream
}

func (x *weatherServiceUploadWeatherScreenshotClient) Send(m *UploadWeatherScreenshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *weatherServiceUploadWeatherScreenshotClient) CloseAndRecv() (*UploadWeatherScreenshotResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadWeatherScreenshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *weatherServiceClient) GetCurrentWeatherOld(ctx context.Context, in *GetCurrentWeatherOldRequest, opts ...grpc.CallOption) (*GetCurrentWeatherOldResponse, error) {
	out := new(GetCurrentWeatherOldResponse)
	err := c.cc.Invoke(ctx, WeatherService_GetCurrentWeatherOld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherServiceServer is the server API for WeatherService service.
// All implementations must embed UnimplementedWeatherServiceServer
// for forward compatibility
type WeatherServiceServer interface {
	// Unary RPC: Get current weather for a location.
	GetCurrentWeather(context.Context, *GetCurrentWeatherRequest) (*GetCurrentWeatherResponse, error)
	// Server Streaming RPC: Subscribe to severe weather alerts.
	SubscribeWeatherAlerts(*SubscribeWeatherAlertsRequest, WeatherService_SubscribeWeatherAlertsServer) error
	// Client Streaming RPC: Send weather data from sensors.
	UploadWeatherData(WeatherService_UploadWeatherDataServer) error
	// Bidirectional Streaming RPC: Real-time weather updates.
	RealTimeWeather(WeatherService_RealTimeWeatherServer) error
	// Client Streaming RPC: Upload a weather screenshot.
	UploadWeatherScreenshot(WeatherService_UploadWeatherScreenshotServer) error
	// Deprecated: Do not use.
	// Deprecated RPC: Get current weather for a location.
	GetCurrentWeatherOld(context.Context, *GetCurrentWeatherOldRequest) (*GetCurrentWeatherOldResponse, error)
	mustEmbedUnimplementedWeatherServiceServer()
}

// UnimplementedWeatherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWeatherServiceServer struct {
}

func (UnimplementedWeatherServiceServer) GetCurrentWeather(context.Context, *GetCurrentWeatherRequest) (*GetCurrentWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWeather not implemented")
}
func (UnimplementedWeatherServiceServer) SubscribeWeatherAlerts(*SubscribeWeatherAlertsRequest, WeatherService_SubscribeWeatherAlertsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeWeatherAlerts not implemented")
}
func (UnimplementedWeatherServiceServer) UploadWeatherData(WeatherService_UploadWeatherDataServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadWeatherData not implemented")
}
func (UnimplementedWeatherServiceServer) RealTimeWeather(WeatherService_RealTimeWeatherServer) error {
	return status.Errorf(codes.Unimplemented, "method RealTimeWeather not implemented")
}
func (UnimplementedWeatherServiceServer) UploadWeatherScreenshot(WeatherService_UploadWeatherScreenshotServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadWeatherScreenshot not implemented")
}
func (UnimplementedWeatherServiceServer) GetCurrentWeatherOld(context.Context, *GetCurrentWeatherOldRequest) (*GetCurrentWeatherOldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWeatherOld not implemented")
}
func (UnimplementedWeatherServiceServer) mustEmbedUnimplementedWeatherServiceServer() {}

// UnsafeWeatherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherServiceServer will
// result in compilation errors.
type UnsafeWeatherServiceServer interface {
	mustEmbedUnimplementedWeatherServiceServer()
}

func RegisterWeatherServiceServer(s grpc.ServiceRegistrar, srv WeatherServiceServer) {
	s.RegisterService(&WeatherService_ServiceDesc, srv)
}

func _WeatherService_GetCurrentWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServiceServer).GetCurrentWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherService_GetCurrentWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServiceServer).GetCurrentWeather(ctx, req.(*GetCurrentWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherService_SubscribeWeatherAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeWeatherAlertsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherServiceServer).SubscribeWeatherAlerts(m, &weatherServiceSubscribeWeatherAlertsServer{stream})
}

type WeatherService_SubscribeWeatherAlertsServer interface {
	Send(*SubscribeWeatherAlertsResponse) error
	grpc.ServerStream
}

type weatherServiceSubscribeWeatherAlertsServer struct {
	grpc.ServerStream
}

func (x *weatherServiceSubscribeWeatherAlertsServer) Send(m *SubscribeWeatherAlertsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WeatherService_UploadWeatherData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeatherServiceServer).UploadWeatherData(&weatherServiceUploadWeatherDataServer{stream})
}

type WeatherService_UploadWeatherDataServer interface {
	SendAndClose(*UploadWeatherDataResponse) error
	Recv() (*UploadWeatherDataRequest, error)
	grpc.ServerStream
}

type weatherServiceUploadWeatherDataServer struct {
	grpc.ServerStream
}

func (x *weatherServiceUploadWeatherDataServer) SendAndClose(m *UploadWeatherDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *weatherServiceUploadWeatherDataServer) Recv() (*UploadWeatherDataRequest, error) {
	m := new(UploadWeatherDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WeatherService_RealTimeWeather_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeatherServiceServer).RealTimeWeather(&weatherServiceRealTimeWeatherServer{stream})
}

type WeatherService_RealTimeWeatherServer interface {
	Send(*RealTimeWeatherResponse) error
	Recv() (*RealTimeWeatherRequest, error)
	grpc.ServerStream
}

type weatherServiceRealTimeWeatherServer struct {
	grpc.ServerStream
}

func (x *weatherServiceRealTimeWeatherServer) Send(m *RealTimeWeatherResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *weatherServiceRealTimeWeatherServer) Recv() (*RealTimeWeatherRequest, error) {
	m := new(RealTimeWeatherRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WeatherService_UploadWeatherScreenshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeatherServiceServer).UploadWeatherScreenshot(&weatherServiceUploadWeatherScreenshotServer{stream})
}

type WeatherService_UploadWeatherScreenshotServer interface {
	SendAndClose(*UploadWeatherScreenshotResponse) error
	Recv() (*UploadWeatherScreenshotRequest, error)
	grpc.ServerStream
}

type weatherServiceUploadWeatherScreenshotServer struct {
	grpc.ServerStream
}

func (x *weatherServiceUploadWeatherScreenshotServer) SendAndClose(m *UploadWeatherScreenshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *weatherServiceUploadWeatherScreenshotServer) Recv() (*UploadWeatherScreenshotRequest, error) {
	m := new(UploadWeatherScreenshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WeatherService_GetCurrentWeatherOld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentWeatherOldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServiceServer).GetCurrentWeatherOld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherService_GetCurrentWeatherOld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServiceServer).GetCurrentWeatherOld(ctx, req.(*GetCurrentWeatherOldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherService_ServiceDesc is the grpc.ServiceDesc for WeatherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.example.weather.v1.WeatherService",
	HandlerType: (*WeatherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentWeather",
			Handler:    _WeatherService_GetCurrentWeather_Handler,
		},
		{
			MethodName: "GetCurrentWeatherOld",
			Handler:    _WeatherService_GetCurrentWeatherOld_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeWeatherAlerts",
			Handler:       _WeatherService_SubscribeWeatherAlerts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadWeatherData",
			Handler:       _WeatherService_UploadWeatherData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RealTimeWeather",
			Handler:       _WeatherService_RealTimeWeather_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadWeatherScreenshot",
			Handler:       _WeatherService_UploadWeatherScreenshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "weather.proto",
}
