// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: llmproxy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LLMProxyService_Complete_FullMethodName = "/llmproxy.v1.LLMProxyService/Complete"
)

// LLMProxyServiceClient is the client API for LLMProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMProxyServiceClient interface {
	Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompleteResponse, error)
}

type lLMProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMProxyServiceClient(cc grpc.ClientConnInterface) LLMProxyServiceClient {
	return &lLMProxyServiceClient{cc}
}

func (c *lLMProxyServiceClient) Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompleteResponse, error) {
	out := new(CompleteResponse)
	err := c.cc.Invoke(ctx, LLMProxyService_Complete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMProxyServiceServer is the server API for LLMProxyService service.
// All implementations must embed UnimplementedLLMProxyServiceServer
// for forward compatibility
type LLMProxyServiceServer interface {
	Complete(context.Context, *CompleteRequest) (*CompleteResponse, error)
	mustEmbedUnimplementedLLMProxyServiceServer()
}

// UnimplementedLLMProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLLMProxyServiceServer struct {
}

func (UnimplementedLLMProxyServiceServer) Complete(context.Context, *CompleteRequest) (*CompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedLLMProxyServiceServer) mustEmbedUnimplementedLLMProxyServiceServer() {}

// UnsafeLLMProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMProxyServiceServer will
// result in compilation errors.
type UnsafeLLMProxyServiceServer interface {
	mustEmbedUnimplementedLLMProxyServiceServer()
}

func RegisterLLMProxyServiceServer(s grpc.ServiceRegistrar, srv LLMProxyServiceServer) {
	s.RegisterService(&LLMProxyService_ServiceDesc, srv)
}

func _LLMProxyService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMProxyServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMProxyService_Complete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMProxyServiceServer).Complete(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMProxyService_ServiceDesc is the grpc.ServiceDesc for LLMProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmproxy.v1.LLMProxyService",
	HandlerType: (*LLMProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Complete",
			Handler:    _LLMProxyService_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "llmproxy.proto",
}
