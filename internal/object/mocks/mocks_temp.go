// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package mocks

import (
	"context"
	"io"
	"sync"
	"time"

	object "github.com/sourcegraph/sourcegraph/internal/object"
	iterator "github.com/sourcegraph/sourcegraph/lib/iterator"
)

// MockStorage is a mock implementation of the Storage interface (from the
// package github.com/sourcegraph/sourcegraph/internal/object) used for unit
// testing.
type MockStorage struct {
	// ComposeFunc is an instance of a mock function object controlling the
	// behavior of the method Compose.
	ComposeFunc *StorageComposeFunc
	// DeleteFunc is an instance of a mock function object controlling the
	// behavior of the method Delete.
	DeleteFunc *StorageDeleteFunc
	// ExpireObjectsFunc is an instance of a mock function object
	// controlling the behavior of the method ExpireObjects.
	ExpireObjectsFunc *StorageExpireObjectsFunc
	// GetFunc is an instance of a mock function object controlling the
	// behavior of the method Get.
	GetFunc *StorageGetFunc
	// InitFunc is an instance of a mock function object controlling the
	// behavior of the method Init.
	InitFunc *StorageInitFunc
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *StorageListFunc
	// UploadFunc is an instance of a mock function object controlling the
	// behavior of the method Upload.
	UploadFunc *StorageUploadFunc
}

// NewMockStorage creates a new mock of the Storage interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStorage() *MockStorage {
	return &MockStorage{
		ComposeFunc: &StorageComposeFunc{
			defaultHook: func(context.Context, string, ...string) (r0 int64, r1 error) {
				return
			},
		},
		DeleteFunc: &StorageDeleteFunc{
			defaultHook: func(context.Context, string) (r0 error) {
				return
			},
		},
		ExpireObjectsFunc: &StorageExpireObjectsFunc{
			defaultHook: func(context.Context, string, time.Duration) (r0 error) {
				return
			},
		},
		GetFunc: &StorageGetFunc{
			defaultHook: func(context.Context, string) (r0 io.ReadCloser, r1 error) {
				return
			},
		},
		InitFunc: &StorageInitFunc{
			defaultHook: func(context.Context) (r0 error) {
				return
			},
		},
		ListFunc: &StorageListFunc{
			defaultHook: func(context.Context, string) (r0 *iterator.Iterator[string], r1 error) {
				return
			},
		},
		UploadFunc: &StorageUploadFunc{
			defaultHook: func(context.Context, string, io.Reader) (r0 int64, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockStorage creates a new mock of the Storage interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockStorage() *MockStorage {
	return &MockStorage{
		ComposeFunc: &StorageComposeFunc{
			defaultHook: func(context.Context, string, ...string) (int64, error) {
				panic("unexpected invocation of MockStorage.Compose")
			},
		},
		DeleteFunc: &StorageDeleteFunc{
			defaultHook: func(context.Context, string) error {
				panic("unexpected invocation of MockStorage.Delete")
			},
		},
		ExpireObjectsFunc: &StorageExpireObjectsFunc{
			defaultHook: func(context.Context, string, time.Duration) error {
				panic("unexpected invocation of MockStorage.ExpireObjects")
			},
		},
		GetFunc: &StorageGetFunc{
			defaultHook: func(context.Context, string) (io.ReadCloser, error) {
				panic("unexpected invocation of MockStorage.Get")
			},
		},
		InitFunc: &StorageInitFunc{
			defaultHook: func(context.Context) error {
				panic("unexpected invocation of MockStorage.Init")
			},
		},
		ListFunc: &StorageListFunc{
			defaultHook: func(context.Context, string) (*iterator.Iterator[string], error) {
				panic("unexpected invocation of MockStorage.List")
			},
		},
		UploadFunc: &StorageUploadFunc{
			defaultHook: func(context.Context, string, io.Reader) (int64, error) {
				panic("unexpected invocation of MockStorage.Upload")
			},
		},
	}
}

// NewMockStorageFrom creates a new mock of the MockStorage interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStorageFrom(i object.Storage) *MockStorage {
	return &MockStorage{
		ComposeFunc: &StorageComposeFunc{
			defaultHook: i.Compose,
		},
		DeleteFunc: &StorageDeleteFunc{
			defaultHook: i.Delete,
		},
		ExpireObjectsFunc: &StorageExpireObjectsFunc{
			defaultHook: i.ExpireObjects,
		},
		GetFunc: &StorageGetFunc{
			defaultHook: i.Get,
		},
		InitFunc: &StorageInitFunc{
			defaultHook: i.Init,
		},
		ListFunc: &StorageListFunc{
			defaultHook: i.List,
		},
		UploadFunc: &StorageUploadFunc{
			defaultHook: i.Upload,
		},
	}
}

// StorageComposeFunc describes the behavior when the Compose method of the
// parent MockStorage instance is invoked.
type StorageComposeFunc struct {
	defaultHook func(context.Context, string, ...string) (int64, error)
	hooks       []func(context.Context, string, ...string) (int64, error)
	history     []StorageComposeFuncCall
	mutex       sync.Mutex
}

// Compose delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorage) Compose(v0 context.Context, v1 string, v2 ...string) (int64, error) {
	r0, r1 := m.ComposeFunc.nextHook()(v0, v1, v2...)
	m.ComposeFunc.appendCall(StorageComposeFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Compose method of
// the parent MockStorage instance is invoked and the hook queue is empty.
func (f *StorageComposeFunc) SetDefaultHook(hook func(context.Context, string, ...string) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Compose method of the parent MockStorage instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StorageComposeFunc) PushHook(hook func(context.Context, string, ...string) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageComposeFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, string, ...string) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageComposeFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, string, ...string) (int64, error) {
		return r0, r1
	})
}

func (f *StorageComposeFunc) nextHook() func(context.Context, string, ...string) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageComposeFunc) appendCall(r0 StorageComposeFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageComposeFuncCall objects describing
// the invocations of this function.
func (f *StorageComposeFunc) History() []StorageComposeFuncCall {
	f.mutex.Lock()
	history := make([]StorageComposeFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageComposeFuncCall is an object that describes an invocation of
// method Compose on an instance of MockStorage.
type StorageComposeFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c StorageComposeFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageComposeFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StorageDeleteFunc describes the behavior when the Delete method of the
// parent MockStorage instance is invoked.
type StorageDeleteFunc struct {
	defaultHook func(context.Context, string) error
	hooks       []func(context.Context, string) error
	history     []StorageDeleteFuncCall
	mutex       sync.Mutex
}

// Delete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorage) Delete(v0 context.Context, v1 string) error {
	r0 := m.DeleteFunc.nextHook()(v0, v1)
	m.DeleteFunc.appendCall(StorageDeleteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Delete method of the
// parent MockStorage instance is invoked and the hook queue is empty.
func (f *StorageDeleteFunc) SetDefaultHook(hook func(context.Context, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Delete method of the parent MockStorage instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StorageDeleteFunc) PushHook(hook func(context.Context, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageDeleteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageDeleteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string) error {
		return r0
	})
}

func (f *StorageDeleteFunc) nextHook() func(context.Context, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageDeleteFunc) appendCall(r0 StorageDeleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageDeleteFuncCall objects describing
// the invocations of this function.
func (f *StorageDeleteFunc) History() []StorageDeleteFuncCall {
	f.mutex.Lock()
	history := make([]StorageDeleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageDeleteFuncCall is an object that describes an invocation of method
// Delete on an instance of MockStorage.
type StorageDeleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageDeleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageDeleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageExpireObjectsFunc describes the behavior when the ExpireObjects
// method of the parent MockStorage instance is invoked.
type StorageExpireObjectsFunc struct {
	defaultHook func(context.Context, string, time.Duration) error
	hooks       []func(context.Context, string, time.Duration) error
	history     []StorageExpireObjectsFuncCall
	mutex       sync.Mutex
}

// ExpireObjects delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockStorage) ExpireObjects(v0 context.Context, v1 string, v2 time.Duration) error {
	r0 := m.ExpireObjectsFunc.nextHook()(v0, v1, v2)
	m.ExpireObjectsFunc.appendCall(StorageExpireObjectsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the ExpireObjects method
// of the parent MockStorage instance is invoked and the hook queue is
// empty.
func (f *StorageExpireObjectsFunc) SetDefaultHook(hook func(context.Context, string, time.Duration) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ExpireObjects method of the parent MockStorage instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StorageExpireObjectsFunc) PushHook(hook func(context.Context, string, time.Duration) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageExpireObjectsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, time.Duration) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageExpireObjectsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, time.Duration) error {
		return r0
	})
}

func (f *StorageExpireObjectsFunc) nextHook() func(context.Context, string, time.Duration) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageExpireObjectsFunc) appendCall(r0 StorageExpireObjectsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageExpireObjectsFuncCall objects
// describing the invocations of this function.
func (f *StorageExpireObjectsFunc) History() []StorageExpireObjectsFuncCall {
	f.mutex.Lock()
	history := make([]StorageExpireObjectsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageExpireObjectsFuncCall is an object that describes an invocation of
// method ExpireObjects on an instance of MockStorage.
type StorageExpireObjectsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 time.Duration
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageExpireObjectsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageExpireObjectsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageGetFunc describes the behavior when the Get method of the parent
// MockStorage instance is invoked.
type StorageGetFunc struct {
	defaultHook func(context.Context, string) (io.ReadCloser, error)
	hooks       []func(context.Context, string) (io.ReadCloser, error)
	history     []StorageGetFuncCall
	mutex       sync.Mutex
}

// Get delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorage) Get(v0 context.Context, v1 string) (io.ReadCloser, error) {
	r0, r1 := m.GetFunc.nextHook()(v0, v1)
	m.GetFunc.appendCall(StorageGetFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Get method of the
// parent MockStorage instance is invoked and the hook queue is empty.
func (f *StorageGetFunc) SetDefaultHook(hook func(context.Context, string) (io.ReadCloser, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Get method of the parent MockStorage instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StorageGetFunc) PushHook(hook func(context.Context, string) (io.ReadCloser, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageGetFunc) SetDefaultReturn(r0 io.ReadCloser, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (io.ReadCloser, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageGetFunc) PushReturn(r0 io.ReadCloser, r1 error) {
	f.PushHook(func(context.Context, string) (io.ReadCloser, error) {
		return r0, r1
	})
}

func (f *StorageGetFunc) nextHook() func(context.Context, string) (io.ReadCloser, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageGetFunc) appendCall(r0 StorageGetFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageGetFuncCall objects describing the
// invocations of this function.
func (f *StorageGetFunc) History() []StorageGetFuncCall {
	f.mutex.Lock()
	history := make([]StorageGetFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageGetFuncCall is an object that describes an invocation of method
// Get on an instance of MockStorage.
type StorageGetFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 io.ReadCloser
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageGetFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageGetFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StorageInitFunc describes the behavior when the Init method of the parent
// MockStorage instance is invoked.
type StorageInitFunc struct {
	defaultHook func(context.Context) error
	hooks       []func(context.Context) error
	history     []StorageInitFuncCall
	mutex       sync.Mutex
}

// Init delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorage) Init(v0 context.Context) error {
	r0 := m.InitFunc.nextHook()(v0)
	m.InitFunc.appendCall(StorageInitFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Init method of the
// parent MockStorage instance is invoked and the hook queue is empty.
func (f *StorageInitFunc) SetDefaultHook(hook func(context.Context) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Init method of the parent MockStorage instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StorageInitFunc) PushHook(hook func(context.Context) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageInitFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageInitFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context) error {
		return r0
	})
}

func (f *StorageInitFunc) nextHook() func(context.Context) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageInitFunc) appendCall(r0 StorageInitFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageInitFuncCall objects describing the
// invocations of this function.
func (f *StorageInitFunc) History() []StorageInitFuncCall {
	f.mutex.Lock()
	history := make([]StorageInitFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageInitFuncCall is an object that describes an invocation of method
// Init on an instance of MockStorage.
type StorageInitFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageInitFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageInitFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StorageListFunc describes the behavior when the List method of the parent
// MockStorage instance is invoked.
type StorageListFunc struct {
	defaultHook func(context.Context, string) (*iterator.Iterator[string], error)
	hooks       []func(context.Context, string) (*iterator.Iterator[string], error)
	history     []StorageListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorage) List(v0 context.Context, v1 string) (*iterator.Iterator[string], error) {
	r0, r1 := m.ListFunc.nextHook()(v0, v1)
	m.ListFunc.appendCall(StorageListFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockStorage instance is invoked and the hook queue is empty.
func (f *StorageListFunc) SetDefaultHook(hook func(context.Context, string) (*iterator.Iterator[string], error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockStorage instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StorageListFunc) PushHook(hook func(context.Context, string) (*iterator.Iterator[string], error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageListFunc) SetDefaultReturn(r0 *iterator.Iterator[string], r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*iterator.Iterator[string], error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageListFunc) PushReturn(r0 *iterator.Iterator[string], r1 error) {
	f.PushHook(func(context.Context, string) (*iterator.Iterator[string], error) {
		return r0, r1
	})
}

func (f *StorageListFunc) nextHook() func(context.Context, string) (*iterator.Iterator[string], error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageListFunc) appendCall(r0 StorageListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageListFuncCall objects describing the
// invocations of this function.
func (f *StorageListFunc) History() []StorageListFuncCall {
	f.mutex.Lock()
	history := make([]StorageListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageListFuncCall is an object that describes an invocation of method
// List on an instance of MockStorage.
type StorageListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *iterator.Iterator[string]
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StorageUploadFunc describes the behavior when the Upload method of the
// parent MockStorage instance is invoked.
type StorageUploadFunc struct {
	defaultHook func(context.Context, string, io.Reader) (int64, error)
	hooks       []func(context.Context, string, io.Reader) (int64, error)
	history     []StorageUploadFuncCall
	mutex       sync.Mutex
}

// Upload delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStorage) Upload(v0 context.Context, v1 string, v2 io.Reader) (int64, error) {
	r0, r1 := m.UploadFunc.nextHook()(v0, v1, v2)
	m.UploadFunc.appendCall(StorageUploadFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Upload method of the
// parent MockStorage instance is invoked and the hook queue is empty.
func (f *StorageUploadFunc) SetDefaultHook(hook func(context.Context, string, io.Reader) (int64, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Upload method of the parent MockStorage instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StorageUploadFunc) PushHook(hook func(context.Context, string, io.Reader) (int64, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StorageUploadFunc) SetDefaultReturn(r0 int64, r1 error) {
	f.SetDefaultHook(func(context.Context, string, io.Reader) (int64, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StorageUploadFunc) PushReturn(r0 int64, r1 error) {
	f.PushHook(func(context.Context, string, io.Reader) (int64, error) {
		return r0, r1
	})
}

func (f *StorageUploadFunc) nextHook() func(context.Context, string, io.Reader) (int64, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StorageUploadFunc) appendCall(r0 StorageUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StorageUploadFuncCall objects describing
// the invocations of this function.
func (f *StorageUploadFunc) History() []StorageUploadFuncCall {
	f.mutex.Lock()
	history := make([]StorageUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StorageUploadFuncCall is an object that describes an invocation of method
// Upload on an instance of MockStorage.
type StorageUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 io.Reader
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 int64
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StorageUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StorageUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
