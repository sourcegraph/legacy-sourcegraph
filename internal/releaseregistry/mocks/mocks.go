// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package mocks

import (
	"context"
	"sync"

	releaseregistry "github.com/sourcegraph/sourcegraph/internal/releaseregistry"
)

// MockReleaseRegistryClient is a mock implementation of the
// ReleaseRegistryClient interface (from the package
// github.com/sourcegraph/sourcegraph/internal/releaseregistry) used for
// unit testing.
type MockReleaseRegistryClient struct {
	// ListVersionsFunc is an instance of a mock function object controlling
	// the behavior of the method ListVersions.
	ListVersionsFunc *ReleaseRegistryClientListVersionsFunc
}

// NewMockReleaseRegistryClient creates a new mock of the
// ReleaseRegistryClient interface. All methods return zero values for all
// results, unless overwritten.
func NewMockReleaseRegistryClient() *MockReleaseRegistryClient {
	return &MockReleaseRegistryClient{
		ListVersionsFunc: &ReleaseRegistryClientListVersionsFunc{
			defaultHook: func(context.Context, string) (r0 []releaseregistry.ReleaseInfo, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockReleaseRegistryClient creates a new mock of the
// ReleaseRegistryClient interface. All methods panic on invocation, unless
// overwritten.
func NewStrictMockReleaseRegistryClient() *MockReleaseRegistryClient {
	return &MockReleaseRegistryClient{
		ListVersionsFunc: &ReleaseRegistryClientListVersionsFunc{
			defaultHook: func(context.Context, string) ([]releaseregistry.ReleaseInfo, error) {
				panic("unexpected invocation of MockReleaseRegistryClient.ListVersions")
			},
		},
	}
}

// NewMockReleaseRegistryClientFrom creates a new mock of the
// MockReleaseRegistryClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockReleaseRegistryClientFrom(i releaseregistry.ReleaseRegistryClient) *MockReleaseRegistryClient {
	return &MockReleaseRegistryClient{
		ListVersionsFunc: &ReleaseRegistryClientListVersionsFunc{
			defaultHook: i.ListVersions,
		},
	}
}

// ReleaseRegistryClientListVersionsFunc describes the behavior when the
// ListVersions method of the parent MockReleaseRegistryClient instance is
// invoked.
type ReleaseRegistryClientListVersionsFunc struct {
	defaultHook func(context.Context, string) ([]releaseregistry.ReleaseInfo, error)
	hooks       []func(context.Context, string) ([]releaseregistry.ReleaseInfo, error)
	history     []ReleaseRegistryClientListVersionsFuncCall
	mutex       sync.Mutex
}

// ListVersions delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockReleaseRegistryClient) ListVersions(v0 context.Context, v1 string) ([]releaseregistry.ReleaseInfo, error) {
	r0, r1 := m.ListVersionsFunc.nextHook()(v0, v1)
	m.ListVersionsFunc.appendCall(ReleaseRegistryClientListVersionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListVersions method
// of the parent MockReleaseRegistryClient instance is invoked and the hook
// queue is empty.
func (f *ReleaseRegistryClientListVersionsFunc) SetDefaultHook(hook func(context.Context, string) ([]releaseregistry.ReleaseInfo, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListVersions method of the parent MockReleaseRegistryClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *ReleaseRegistryClientListVersionsFunc) PushHook(hook func(context.Context, string) ([]releaseregistry.ReleaseInfo, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *ReleaseRegistryClientListVersionsFunc) SetDefaultReturn(r0 []releaseregistry.ReleaseInfo, r1 error) {
	f.SetDefaultHook(func(context.Context, string) ([]releaseregistry.ReleaseInfo, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *ReleaseRegistryClientListVersionsFunc) PushReturn(r0 []releaseregistry.ReleaseInfo, r1 error) {
	f.PushHook(func(context.Context, string) ([]releaseregistry.ReleaseInfo, error) {
		return r0, r1
	})
}

func (f *ReleaseRegistryClientListVersionsFunc) nextHook() func(context.Context, string) ([]releaseregistry.ReleaseInfo, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ReleaseRegistryClientListVersionsFunc) appendCall(r0 ReleaseRegistryClientListVersionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ReleaseRegistryClientListVersionsFuncCall
// objects describing the invocations of this function.
func (f *ReleaseRegistryClientListVersionsFunc) History() []ReleaseRegistryClientListVersionsFuncCall {
	f.mutex.Lock()
	history := make([]ReleaseRegistryClientListVersionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ReleaseRegistryClientListVersionsFuncCall is an object that describes an
// invocation of method ListVersions on an instance of
// MockReleaseRegistryClient.
type ReleaseRegistryClientListVersionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []releaseregistry.ReleaseInfo
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ReleaseRegistryClientListVersionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ReleaseRegistryClientListVersionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
