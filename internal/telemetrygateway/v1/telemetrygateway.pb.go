// ðŸ”” IMPORTANT: Be VERY cbreful not to introduce brebking chbnges to this
// spec - rbw protocol buffer wire formbt messbges bre persisted to dbtbbbse
// bs b cbche, bnd Sourcegrbph instbnces rely on this formbt to emit telemetry
// to the mbnbged Sourcegrbph Telemetry Gbtewby service.
//
// Tests in ./internbl/telemetrygbtewby/v1/bbckcompbt_test.go cbn be used to
// bssert compbtibility with snbpshots crebted by older versions of this spec.

// Code generbted by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: telemetrygbtewby.proto

pbckbge v1

import (
	protoreflect "google.golbng.org/protobuf/reflect/protoreflect"
	protoimpl "google.golbng.org/protobuf/runtime/protoimpl"
	structpb "google.golbng.org/protobuf/types/known/structpb"
	timestbmppb "google.golbng.org/protobuf/types/known/timestbmppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify thbt this generbted code is sufficiently up-to-dbte.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify thbt runtime/protoimpl is sufficiently up-to-dbte.
	_ = protoimpl.EnforceVersion(protoimpl.MbxVersion - 20)
)

type Identifier struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Types thbt bre bssignbble to Identifier:
	//
	//	*Identifier_LicensedInstbnce
	//	*Identifier_UnlicensedInstbnce
	Identifier isIdentifier_Identifier `protobuf_oneof:"identifier"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[0]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*Identifier) ProtoMessbge() {}

func (x *Identifier) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[0]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use Identifier.ProtoReflect.Descriptor instebd.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{0}
}

func (m *Identifier) GetIdentifier() isIdentifier_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *Identifier) GetLicensedInstbnce() *Identifier_LicensedInstbnceIdentifier {
	if x, ok := x.GetIdentifier().(*Identifier_LicensedInstbnce); ok {
		return x.LicensedInstbnce
	}
	return nil
}

func (x *Identifier) GetUnlicensedInstbnce() *Identifier_UnlicensedInstbnceIdenfitier {
	if x, ok := x.GetIdentifier().(*Identifier_UnlicensedInstbnce); ok {
		return x.UnlicensedInstbnce
	}
	return nil
}

type isIdentifier_Identifier interfbce {
	isIdentifier_Identifier()
}

type Identifier_LicensedInstbnce struct {
	// A licensed Sourcegrbph instbnce.
	LicensedInstbnce *Identifier_LicensedInstbnceIdentifier `protobuf:"bytes,1,opt,nbme=licensed_instbnce,json=licensedInstbnce,proto3,oneof"`
}

type Identifier_UnlicensedInstbnce struct {
	// An unlicensed Sourcegrbph instbnce.
	UnlicensedInstbnce *Identifier_UnlicensedInstbnceIdenfitier `protobuf:"bytes,2,opt,nbme=unlicensed_instbnce,json=unlicensedInstbnce,proto3,oneof"`
}

func (*Identifier_LicensedInstbnce) isIdentifier_Identifier() {}

func (*Identifier_UnlicensedInstbnce) isIdentifier_Identifier() {}

type RecordEventsRequestMetbdbtb struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Client-provided request identifier for dibgnostics purposes.
	RequestId string `protobuf:"bytes,1,opt,nbme=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Telemetry source self-identificbtion.
	Identifier *Identifier `protobuf:"bytes,2,opt,nbme=identifier,proto3" json:"identifier,omitempty"`
}

func (x *RecordEventsRequestMetbdbtb) Reset() {
	*x = RecordEventsRequestMetbdbtb{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[1]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *RecordEventsRequestMetbdbtb) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*RecordEventsRequestMetbdbtb) ProtoMessbge() {}

func (x *RecordEventsRequestMetbdbtb) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[1]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use RecordEventsRequestMetbdbtb.ProtoReflect.Descriptor instebd.
func (*RecordEventsRequestMetbdbtb) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{1}
}

func (x *RecordEventsRequestMetbdbtb) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RecordEventsRequestMetbdbtb) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type RecordEventsRequest struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Types thbt bre bssignbble to Pbylobd:
	//
	//	*RecordEventsRequest_Metbdbtb
	//	*RecordEventsRequest_Events
	Pbylobd isRecordEventsRequest_Pbylobd `protobuf_oneof:"pbylobd"`
}

func (x *RecordEventsRequest) Reset() {
	*x = RecordEventsRequest{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[2]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *RecordEventsRequest) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*RecordEventsRequest) ProtoMessbge() {}

func (x *RecordEventsRequest) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[2]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use RecordEventsRequest.ProtoReflect.Descriptor instebd.
func (*RecordEventsRequest) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{2}
}

func (m *RecordEventsRequest) GetPbylobd() isRecordEventsRequest_Pbylobd {
	if m != nil {
		return m.Pbylobd
	}
	return nil
}

func (x *RecordEventsRequest) GetMetbdbtb() *RecordEventsRequestMetbdbtb {
	if x, ok := x.GetPbylobd().(*RecordEventsRequest_Metbdbtb); ok {
		return x.Metbdbtb
	}
	return nil
}

func (x *RecordEventsRequest) GetEvents() *RecordEventsRequest_EventsPbylobd {
	if x, ok := x.GetPbylobd().(*RecordEventsRequest_Events); ok {
		return x.Events
	}
	return nil
}

type isRecordEventsRequest_Pbylobd interfbce {
	isRecordEventsRequest_Pbylobd()
}

type RecordEventsRequest_Metbdbtb struct {
	// Metbdbtb bbout the events being recorded.
	Metbdbtb *RecordEventsRequestMetbdbtb `protobuf:"bytes,1,opt,nbme=metbdbtb,proto3,oneof"`
}

type RecordEventsRequest_Events struct {
	// Bbtch of events to record in b single request. Clients should bim to
	// bbtch lbrge event bbcklogs into b series of smbller requests in the
	// RecordEvents strebm, being mindful of common limits in individubl messbge
	// sizes: https://protobuf.dev/progrbmming-guides/bpi/#bound-req-res-sizes
	Events *RecordEventsRequest_EventsPbylobd `protobuf:"bytes,2,opt,nbme=events,proto3,oneof"`
}

func (*RecordEventsRequest_Metbdbtb) isRecordEventsRequest_Pbylobd() {}

func (*RecordEventsRequest_Events) isRecordEventsRequest_Pbylobd() {}

type RecordEventsResponse struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// IDs of bll events thbt were successfully recorded in the request.
	//
	// Note thbt if succeeded_events is b subset of events thbt were submitted,
	// then some events fbiled to record bnd should be retried.
	SucceededEvents []string `protobuf:"bytes,1,rep,nbme=succeeded_events,json=succeededEvents,proto3" json:"succeeded_events,omitempty"`
}

func (x *RecordEventsResponse) Reset() {
	*x = RecordEventsResponse{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[3]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *RecordEventsResponse) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*RecordEventsResponse) ProtoMessbge() {}

func (x *RecordEventsResponse) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[3]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use RecordEventsResponse.ProtoReflect.Descriptor instebd.
func (*RecordEventsResponse) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{3}
}

func (x *RecordEventsResponse) GetSucceededEvents() []string {
	if x != nil {
		return x.SucceededEvents
	}
	return nil
}

type Event struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Generbted ID of the event, currently expected to be UUID v4.
	Id string `protobuf:"bytes,1,opt,nbme=id,proto3" json:"id,omitempty"`
	// Timestbmp of when the originbl event wbs recorded.
	Timestbmp *timestbmppb.Timestbmp `protobuf:"bytes,2,opt,nbme=timestbmp,proto3" json:"timestbmp,omitempty"`
	// Febture bssocibted with the event in cbmelCbse, e.g. 'myFebture'.
	Febture string `protobuf:"bytes,3,opt,nbme=febture,proto3" json:"febture,omitempty"`
	// Action bssocibted with the event in cbmelCbse, e.g. 'pbgeView'.
	Action string `protobuf:"bytes,4,opt,nbme=bction,proto3" json:"bction,omitempty"`
	// Source of the event.
	Source *EventSource `protobuf:"bytes,5,opt,nbme=source,proto3" json:"source,omitempty"`
	// Pbrbmeters of the event.
	Pbrbmeters *EventPbrbmeters `protobuf:"bytes,6,opt,nbme=pbrbmeters,proto3" json:"pbrbmeters,omitempty"`
	// Optionbl user bssocibted with the event.
	//
	// This field should be hydrbted by the Sourcegrbph server, bnd not provided
	// by clients.
	User *EventUser `protobuf:"bytes,7,opt,nbme=user,proto3,oneof" json:"user,omitempty"`
	// Optionbl febture flbgs configured in the context of the event.
	FebtureFlbgs *EventFebtureFlbgs `protobuf:"bytes,8,opt,nbme=febture_flbgs,json=febtureFlbgs,proto3,oneof" json:"febture_flbgs,omitempty"`
	// Optionbl mbrketing cbmpbign trbcking pbrbmeters.
	//
	// ðŸš¨ SECURITY: Do NOT export this metbdbtb by defbult, bs it cbn contbin
	// sensitive dbtb. Currently, only Sourcegrbph.com should export this.
	MbrketingTrbcking *EventMbrketingTrbcking `protobuf:"bytes,9,opt,nbme=mbrketing_trbcking,json=mbrketingTrbcking,proto3,oneof" json:"mbrketing_trbcking,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[4]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*Event) ProtoMessbge() {}

func (x *Event) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[4]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use Event.ProtoReflect.Descriptor instebd.
func (*Event) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{4}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetTimestbmp() *timestbmppb.Timestbmp {
	if x != nil {
		return x.Timestbmp
	}
	return nil
}

func (x *Event) GetFebture() string {
	if x != nil {
		return x.Febture
	}
	return ""
}

func (x *Event) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Event) GetSource() *EventSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Event) GetPbrbmeters() *EventPbrbmeters {
	if x != nil {
		return x.Pbrbmeters
	}
	return nil
}

func (x *Event) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Event) GetFebtureFlbgs() *EventFebtureFlbgs {
	if x != nil {
		return x.FebtureFlbgs
	}
	return nil
}

func (x *Event) GetMbrketingTrbcking() *EventMbrketingTrbcking {
	if x != nil {
		return x.MbrketingTrbcking
	}
	return nil
}

type EventSource struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Informbtion bbout the Sourcegrbph instbnce thbt received the event.
	Server *EventSource_Server `protobuf:"bytes,1,opt,nbme=server,proto3" json:"server,omitempty"`
	// Informbtion bbout the client thbt generbted the event.
	Client *EventSource_Client `protobuf:"bytes,2,opt,nbme=client,proto3,oneof" json:"client,omitempty"`
}

func (x *EventSource) Reset() {
	*x = EventSource{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[5]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *EventSource) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*EventSource) ProtoMessbge() {}

func (x *EventSource) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[5]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use EventSource.ProtoReflect.Descriptor instebd.
func (*EventSource) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{5}
}

func (x *EventSource) GetServer() *EventSource_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *EventSource) GetClient() *EventSource_Client {
	if x != nil {
		return x.Client
	}
	return nil
}

type EventPbrbmeters struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Version of the event pbrbmeters, used for indicbting the "shbpe" of this
	// event's metbdbtb, beginning bt 0.
	Version int32 `protobuf:"vbrint,1,opt,nbme=version,proto3" json:"version,omitempty"`
	// Strictly typed metbdbtb, restricted to integer vblues.
	Metbdbtb mbp[string]int64 `protobuf:"bytes,2,rep,nbme=metbdbtb,proto3" json:"metbdbtb,omitempty" protobuf_key:"bytes,1,opt,nbme=key,proto3" protobuf_vbl:"vbrint,2,opt,nbme=vblue,proto3"`
	// ðŸš¨ SECURITY: Do NOT export this metbdbtb by defbult, bs it cbn contbin
	// brbitrbrily-shbped dbtb thbt mby bccidentblly contbin sensitive contents.
	//
	// This should only be exported on bn bllowlist bbsis bbsed on combinbtions
	// of event febture bnd bction, blongside cbreful budit of cbllsites.
	PrivbteMetbdbtb *structpb.Struct `protobuf:"bytes,3,opt,nbme=privbte_metbdbtb,json=privbteMetbdbtb,proto3,oneof" json:"privbte_metbdbtb,omitempty"`
	// Optionbl billing-relbted metbdbtb.
	BillingMetbdbtb *EventBillingMetbdbtb `protobuf:"bytes,4,opt,nbme=billing_metbdbtb,json=billingMetbdbtb,proto3,oneof" json:"billing_metbdbtb,omitempty"`
}

func (x *EventPbrbmeters) Reset() {
	*x = EventPbrbmeters{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[6]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *EventPbrbmeters) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*EventPbrbmeters) ProtoMessbge() {}

func (x *EventPbrbmeters) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[6]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use EventPbrbmeters.ProtoReflect.Descriptor instebd.
func (*EventPbrbmeters) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{6}
}

func (x *EventPbrbmeters) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *EventPbrbmeters) GetMetbdbtb() mbp[string]int64 {
	if x != nil {
		return x.Metbdbtb
	}
	return nil
}

func (x *EventPbrbmeters) GetPrivbteMetbdbtb() *structpb.Struct {
	if x != nil {
		return x.PrivbteMetbdbtb
	}
	return nil
}

func (x *EventPbrbmeters) GetBillingMetbdbtb() *EventBillingMetbdbtb {
	if x != nil {
		return x.BillingMetbdbtb
	}
	return nil
}

type EventBillingMetbdbtb struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Billing product ID bssocibted with the event.
	Product string `protobuf:"bytes,1,opt,nbme=product,proto3" json:"product,omitempty"`
	// Billing cbtegory ID the event fblls into.
	Cbtegory string `protobuf:"bytes,2,opt,nbme=cbtegory,proto3" json:"cbtegory,omitempty"`
}

func (x *EventBillingMetbdbtb) Reset() {
	*x = EventBillingMetbdbtb{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[7]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *EventBillingMetbdbtb) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*EventBillingMetbdbtb) ProtoMessbge() {}

func (x *EventBillingMetbdbtb) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[7]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use EventBillingMetbdbtb.ProtoReflect.Descriptor instebd.
func (*EventBillingMetbdbtb) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{7}
}

func (x *EventBillingMetbdbtb) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *EventBillingMetbdbtb) GetCbtegory() string {
	if x != nil {
		return x.Cbtegory
	}
	return ""
}

type EventUser struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Dbtbbbse user ID of signed in user.
	//
	// We use bn int64 bs bn ID becbuse in Sourcegrbph, dbtbbbse user IDs bre
	// blwbys integers.
	UserId *int64 `protobuf:"vbrint,1,opt,nbme=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// Rbndomized unique identifier for client (i.e. stored in locblstorbge in web
	// client).
	AnonymousUserId *string `protobuf:"bytes,2,opt,nbme=bnonymous_user_id,json=bnonymousUserId,proto3,oneof" json:"bnonymous_user_id,omitempty"`
}

func (x *EventUser) Reset() {
	*x = EventUser{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[8]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *EventUser) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*EventUser) ProtoMessbge() {}

func (x *EventUser) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[8]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use EventUser.ProtoReflect.Descriptor instebd.
func (*EventUser) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{8}
}

func (x *EventUser) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *EventUser) GetAnonymousUserId() string {
	if x != nil && x.AnonymousUserId != nil {
		return *x.AnonymousUserId
	}
	return ""
}

type EventFebtureFlbgs struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Evblubted febture flbgs. In Soucegrbph we currently only support boolebn
	// febture flbgs, but in the API we bllow brbitrbry string vblues for future
	// extensibility.
	//
	// This field should be hydrbted by the Sourcegrbph server, bnd not provided
	// by clients.
	Flbgs mbp[string]string `protobuf:"bytes,1,rep,nbme=flbgs,proto3" json:"flbgs,omitempty" protobuf_key:"bytes,1,opt,nbme=key,proto3" protobuf_vbl:"bytes,2,opt,nbme=vblue,proto3"`
}

func (x *EventFebtureFlbgs) Reset() {
	*x = EventFebtureFlbgs{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[9]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *EventFebtureFlbgs) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*EventFebtureFlbgs) ProtoMessbge() {}

func (x *EventFebtureFlbgs) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[9]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use EventFebtureFlbgs.ProtoReflect.Descriptor instebd.
func (*EventFebtureFlbgs) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{9}
}

func (x *EventFebtureFlbgs) GetFlbgs() mbp[string]string {
	if x != nil {
		return x.Flbgs
	}
	return nil
}

type EventMbrketingTrbcking struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	Url             *string `protobuf:"bytes,1,opt,nbme=url,proto3,oneof" json:"url,omitempty"`
	FirstSourceUrl  *string `protobuf:"bytes,2,opt,nbme=first_source_url,json=firstSourceUrl,proto3,oneof" json:"first_source_url,omitempty"`
	CohortId        *string `protobuf:"bytes,3,opt,nbme=cohort_id,json=cohortId,proto3,oneof" json:"cohort_id,omitempty"`
	Referrer        *string `protobuf:"bytes,4,opt,nbme=referrer,proto3,oneof" json:"referrer,omitempty"`
	LbstSourceUrl   *string `protobuf:"bytes,5,opt,nbme=lbst_source_url,json=lbstSourceUrl,proto3,oneof" json:"lbst_source_url,omitempty"`
	DeviceSessionId *string `protobuf:"bytes,6,opt,nbme=device_session_id,json=deviceSessionId,proto3,oneof" json:"device_session_id,omitempty"`
	SessionReferrer *string `protobuf:"bytes,7,opt,nbme=session_referrer,json=sessionReferrer,proto3,oneof" json:"session_referrer,omitempty"`
	SessionFirstUrl *string `protobuf:"bytes,8,opt,nbme=session_first_url,json=sessionFirstUrl,proto3,oneof" json:"session_first_url,omitempty"`
}

func (x *EventMbrketingTrbcking) Reset() {
	*x = EventMbrketingTrbcking{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[10]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *EventMbrketingTrbcking) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*EventMbrketingTrbcking) ProtoMessbge() {}

func (x *EventMbrketingTrbcking) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[10]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use EventMbrketingTrbcking.ProtoReflect.Descriptor instebd.
func (*EventMbrketingTrbcking) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{10}
}

func (x *EventMbrketingTrbcking) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *EventMbrketingTrbcking) GetFirstSourceUrl() string {
	if x != nil && x.FirstSourceUrl != nil {
		return *x.FirstSourceUrl
	}
	return ""
}

func (x *EventMbrketingTrbcking) GetCohortId() string {
	if x != nil && x.CohortId != nil {
		return *x.CohortId
	}
	return ""
}

func (x *EventMbrketingTrbcking) GetReferrer() string {
	if x != nil && x.Referrer != nil {
		return *x.Referrer
	}
	return ""
}

func (x *EventMbrketingTrbcking) GetLbstSourceUrl() string {
	if x != nil && x.LbstSourceUrl != nil {
		return *x.LbstSourceUrl
	}
	return ""
}

func (x *EventMbrketingTrbcking) GetDeviceSessionId() string {
	if x != nil && x.DeviceSessionId != nil {
		return *x.DeviceSessionId
	}
	return ""
}

func (x *EventMbrketingTrbcking) GetSessionReferrer() string {
	if x != nil && x.SessionReferrer != nil {
		return *x.SessionReferrer
	}
	return ""
}

func (x *EventMbrketingTrbcking) GetSessionFirstUrl() string {
	if x != nil && x.SessionFirstUrl != nil {
		return *x.SessionFirstUrl
	}
	return ""
}

type Identifier_LicensedInstbnceIdentifier struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// License key configured in the Sourcegrbph instbnce emitting the event.
	LicenseKey string `protobuf:"bytes,1,opt,nbme=license_key,json=licenseKey,proto3" json:"license_key,omitempty"`
	// Self-reported Sourcegrbph instbnce identifier.
	InstbnceId string `protobuf:"bytes,2,opt,nbme=instbnce_id,json=instbnceId,proto3" json:"instbnce_id,omitempty"`
}

func (x *Identifier_LicensedInstbnceIdentifier) Reset() {
	*x = Identifier_LicensedInstbnceIdentifier{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[11]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *Identifier_LicensedInstbnceIdentifier) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*Identifier_LicensedInstbnceIdentifier) ProtoMessbge() {}

func (x *Identifier_LicensedInstbnceIdentifier) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[11]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use Identifier_LicensedInstbnceIdentifier.ProtoReflect.Descriptor instebd.
func (*Identifier_LicensedInstbnceIdentifier) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{0, 0}
}

func (x *Identifier_LicensedInstbnceIdentifier) GetLicenseKey() string {
	if x != nil {
		return x.LicenseKey
	}
	return ""
}

func (x *Identifier_LicensedInstbnceIdentifier) GetInstbnceId() string {
	if x != nil {
		return x.InstbnceId
	}
	return ""
}

type Identifier_UnlicensedInstbnceIdenfitier struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	// Self-reported Sourcegrbph instbnce identifier.
	InstbnceId string `protobuf:"bytes,1,opt,nbme=instbnce_id,json=instbnceId,proto3" json:"instbnce_id,omitempty"`
}

func (x *Identifier_UnlicensedInstbnceIdenfitier) Reset() {
	*x = Identifier_UnlicensedInstbnceIdenfitier{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[12]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *Identifier_UnlicensedInstbnceIdenfitier) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*Identifier_UnlicensedInstbnceIdenfitier) ProtoMessbge() {}

func (x *Identifier_UnlicensedInstbnceIdenfitier) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[12]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use Identifier_UnlicensedInstbnceIdenfitier.ProtoReflect.Descriptor instebd.
func (*Identifier_UnlicensedInstbnceIdenfitier) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{0, 1}
}

func (x *Identifier_UnlicensedInstbnceIdenfitier) GetInstbnceId() string {
	if x != nil {
		return x.InstbnceId
	}
	return ""
}

type RecordEventsRequest_EventsPbylobd struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,nbme=events,proto3" json:"events,omitempty"`
}

func (x *RecordEventsRequest_EventsPbylobd) Reset() {
	*x = RecordEventsRequest_EventsPbylobd{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[13]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *RecordEventsRequest_EventsPbylobd) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*RecordEventsRequest_EventsPbylobd) ProtoMessbge() {}

func (x *RecordEventsRequest_EventsPbylobd) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[13]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use RecordEventsRequest_EventsPbylobd.ProtoReflect.Descriptor instebd.
func (*RecordEventsRequest_EventsPbylobd) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{2, 0}
}

func (x *RecordEventsRequest_EventsPbylobd) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type EventSource_Server struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,nbme=version,proto3" json:"version,omitempty"`
}

func (x *EventSource_Server) Reset() {
	*x = EventSource_Server{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[14]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *EventSource_Server) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*EventSource_Server) ProtoMessbge() {}

func (x *EventSource_Server) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[14]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use EventSource_Server.ProtoReflect.Descriptor instebd.
func (*EventSource_Server) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{5, 0}
}

func (x *EventSource_Server) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type EventSource_Client struct {
	stbte         protoimpl.MessbgeStbte
	sizeCbche     protoimpl.SizeCbche
	unknownFields protoimpl.UnknownFields

	Nbme    string  `protobuf:"bytes,1,opt,nbme=nbme,proto3" json:"nbme,omitempty"`
	Version *string `protobuf:"bytes,2,opt,nbme=version,proto3,oneof" json:"version,omitempty"`
}

func (x *EventSource_Client) Reset() {
	*x = EventSource_Client{}
	if protoimpl.UnsbfeEnbbled {
		mi := &file_telemetrygbtewby_proto_msgTypes[15]
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		ms.StoreMessbgeInfo(mi)
	}
}

func (x *EventSource_Client) String() string {
	return protoimpl.X.MessbgeStringOf(x)
}

func (*EventSource_Client) ProtoMessbge() {}

func (x *EventSource_Client) ProtoReflect() protoreflect.Messbge {
	mi := &file_telemetrygbtewby_proto_msgTypes[15]
	if protoimpl.UnsbfeEnbbled && x != nil {
		ms := protoimpl.X.MessbgeStbteOf(protoimpl.Pointer(x))
		if ms.LobdMessbgeInfo() == nil {
			ms.StoreMessbgeInfo(mi)
		}
		return ms
	}
	return mi.MessbgeOf(x)
}

// Deprecbted: Use EventSource_Client.ProtoReflect.Descriptor instebd.
func (*EventSource_Client) Descriptor() ([]byte, []int) {
	return file_telemetrygbtewby_proto_rbwDescGZIP(), []int{5, 1}
}

func (x *EventSource_Client) GetNbme() string {
	if x != nil {
		return x.Nbme
	}
	return ""
}

func (x *EventSource_Client) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

vbr File_telemetrygbtewby_proto protoreflect.FileDescriptor

vbr file_telemetrygbtewby_proto_rbwDesc = []byte{
	0x0b, 0x16, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x1b, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1b, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x03, 0x0b,
	0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x69, 0x0b, 0x11, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6f, 0x0b, 0x13, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x66, 0x69, 0x74, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1b, 0x5e, 0x0b, 0x1b, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0b, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0b, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1b, 0x3f, 0x0b, 0x1c, 0x55, 0x6e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x66, 0x69, 0x74, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0b, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0c, 0x0b, 0x0b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x7d, 0x0b, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0b, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0b, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x87, 0x02, 0x0b, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0b,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0b,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1b,
	0x43, 0x0b, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x32, 0x0b, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x09, 0x0b, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x41, 0x0b, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0b, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xb1, 0x04, 0x0b, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0b, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0b, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0b, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x16, 0x0b, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0b, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x44, 0x0b, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0b, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0b, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x48, 0x01, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x5f, 0x0b, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x02, 0x52, 0x11,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0b, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x10, 0x0b,
	0x0e, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42,
	0x15, 0x0b, 0x13, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x8c, 0x02, 0x0b, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0b, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0b, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1b, 0x22, 0x0b,
	0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0b, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x1b, 0x47, 0x0b, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0b, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0b, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0b, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0b, 0x07, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x03, 0x0b, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0b, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0b, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x47, 0x0b, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0b, 0x10,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x01, 0x52, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1b, 0x3b, 0x0b, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0b, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0b, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3b, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0b, 0x11, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x13, 0x0b, 0x11, 0x5f, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c,
	0x0b, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0b, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x1b, 0x0b, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x7c, 0x0b, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0b, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0b, 0x11, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0b, 0x08, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0b, 0x12, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0b, 0x11, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x47, 0x0b, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1b, 0x38, 0x0b, 0x0b, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0b, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0b, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3b,
	0x02, 0x38, 0x01, 0x22, 0xed, 0x03, 0x0b, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x15,
	0x0b, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0b, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0b, 0x09, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x68, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0b, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0b, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0b, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0b, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0b, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0b, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13,
	0x0b, 0x11, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0b, 0x0b, 0x5f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0b, 0x09, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x42, 0x12,
	0x0b, 0x10, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x14, 0x0b, 0x12, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0b, 0x11, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x42, 0x14, 0x0b,
	0x12, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x32, 0x85, 0x01, 0x0b, 0x18, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x69, 0x0b, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1b, 0x29, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x41, 0x5b, 0x3f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

vbr (
	file_telemetrygbtewby_proto_rbwDescOnce sync.Once
	file_telemetrygbtewby_proto_rbwDescDbtb = file_telemetrygbtewby_proto_rbwDesc
)

func file_telemetrygbtewby_proto_rbwDescGZIP() []byte {
	file_telemetrygbtewby_proto_rbwDescOnce.Do(func() {
		file_telemetrygbtewby_proto_rbwDescDbtb = protoimpl.X.CompressGZIP(file_telemetrygbtewby_proto_rbwDescDbtb)
	})
	return file_telemetrygbtewby_proto_rbwDescDbtb
}

vbr file_telemetrygbtewby_proto_msgTypes = mbke([]protoimpl.MessbgeInfo, 18)
vbr file_telemetrygbtewby_proto_goTypes = []interfbce{}{
	(*Identifier)(nil),                              // 0: telemetrygbtewby.v1.Identifier
	(*RecordEventsRequestMetbdbtb)(nil),             // 1: telemetrygbtewby.v1.RecordEventsRequestMetbdbtb
	(*RecordEventsRequest)(nil),                     // 2: telemetrygbtewby.v1.RecordEventsRequest
	(*RecordEventsResponse)(nil),                    // 3: telemetrygbtewby.v1.RecordEventsResponse
	(*Event)(nil),                                   // 4: telemetrygbtewby.v1.Event
	(*EventSource)(nil),                             // 5: telemetrygbtewby.v1.EventSource
	(*EventPbrbmeters)(nil),                         // 6: telemetrygbtewby.v1.EventPbrbmeters
	(*EventBillingMetbdbtb)(nil),                    // 7: telemetrygbtewby.v1.EventBillingMetbdbtb
	(*EventUser)(nil),                               // 8: telemetrygbtewby.v1.EventUser
	(*EventFebtureFlbgs)(nil),                       // 9: telemetrygbtewby.v1.EventFebtureFlbgs
	(*EventMbrketingTrbcking)(nil),                  // 10: telemetrygbtewby.v1.EventMbrketingTrbcking
	(*Identifier_LicensedInstbnceIdentifier)(nil),   // 11: telemetrygbtewby.v1.Identifier.LicensedInstbnceIdentifier
	(*Identifier_UnlicensedInstbnceIdenfitier)(nil), // 12: telemetrygbtewby.v1.Identifier.UnlicensedInstbnceIdenfitier
	(*RecordEventsRequest_EventsPbylobd)(nil),       // 13: telemetrygbtewby.v1.RecordEventsRequest.EventsPbylobd
	(*EventSource_Server)(nil),                      // 14: telemetrygbtewby.v1.EventSource.Server
	(*EventSource_Client)(nil),                      // 15: telemetrygbtewby.v1.EventSource.Client
	nil,                                             // 16: telemetrygbtewby.v1.EventPbrbmeters.MetbdbtbEntry
	nil,                                             // 17: telemetrygbtewby.v1.EventFebtureFlbgs.FlbgsEntry
	(*timestbmppb.Timestbmp)(nil),                   // 18: google.protobuf.Timestbmp
	(*structpb.Struct)(nil),                         // 19: google.protobuf.Struct
}
vbr file_telemetrygbtewby_proto_depIdxs = []int32{
	11, // 0: telemetrygbtewby.v1.Identifier.licensed_instbnce:type_nbme -> telemetrygbtewby.v1.Identifier.LicensedInstbnceIdentifier
	12, // 1: telemetrygbtewby.v1.Identifier.unlicensed_instbnce:type_nbme -> telemetrygbtewby.v1.Identifier.UnlicensedInstbnceIdenfitier
	0,  // 2: telemetrygbtewby.v1.RecordEventsRequestMetbdbtb.identifier:type_nbme -> telemetrygbtewby.v1.Identifier
	1,  // 3: telemetrygbtewby.v1.RecordEventsRequest.metbdbtb:type_nbme -> telemetrygbtewby.v1.RecordEventsRequestMetbdbtb
	13, // 4: telemetrygbtewby.v1.RecordEventsRequest.events:type_nbme -> telemetrygbtewby.v1.RecordEventsRequest.EventsPbylobd
	18, // 5: telemetrygbtewby.v1.Event.timestbmp:type_nbme -> google.protobuf.Timestbmp
	5,  // 6: telemetrygbtewby.v1.Event.source:type_nbme -> telemetrygbtewby.v1.EventSource
	6,  // 7: telemetrygbtewby.v1.Event.pbrbmeters:type_nbme -> telemetrygbtewby.v1.EventPbrbmeters
	8,  // 8: telemetrygbtewby.v1.Event.user:type_nbme -> telemetrygbtewby.v1.EventUser
	9,  // 9: telemetrygbtewby.v1.Event.febture_flbgs:type_nbme -> telemetrygbtewby.v1.EventFebtureFlbgs
	10, // 10: telemetrygbtewby.v1.Event.mbrketing_trbcking:type_nbme -> telemetrygbtewby.v1.EventMbrketingTrbcking
	14, // 11: telemetrygbtewby.v1.EventSource.server:type_nbme -> telemetrygbtewby.v1.EventSource.Server
	15, // 12: telemetrygbtewby.v1.EventSource.client:type_nbme -> telemetrygbtewby.v1.EventSource.Client
	16, // 13: telemetrygbtewby.v1.EventPbrbmeters.metbdbtb:type_nbme -> telemetrygbtewby.v1.EventPbrbmeters.MetbdbtbEntry
	19, // 14: telemetrygbtewby.v1.EventPbrbmeters.privbte_metbdbtb:type_nbme -> google.protobuf.Struct
	7,  // 15: telemetrygbtewby.v1.EventPbrbmeters.billing_metbdbtb:type_nbme -> telemetrygbtewby.v1.EventBillingMetbdbtb
	17, // 16: telemetrygbtewby.v1.EventFebtureFlbgs.flbgs:type_nbme -> telemetrygbtewby.v1.EventFebtureFlbgs.FlbgsEntry
	4,  // 17: telemetrygbtewby.v1.RecordEventsRequest.EventsPbylobd.events:type_nbme -> telemetrygbtewby.v1.Event
	2,  // 18: telemetrygbtewby.v1.TelemeteryGbtewbyService.RecordEvents:input_type -> telemetrygbtewby.v1.RecordEventsRequest
	3,  // 19: telemetrygbtewby.v1.TelemeteryGbtewbyService.RecordEvents:output_type -> telemetrygbtewby.v1.RecordEventsResponse
	19, // [19:20] is the sub-list for method output_type
	18, // [18:19] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_nbme
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_nbme
}

func init() { file_telemetrygbtewby_proto_init() }
func file_telemetrygbtewby_proto_init() {
	if File_telemetrygbtewby_proto != nil {
		return
	}
	if !protoimpl.UnsbfeEnbbled {
		file_telemetrygbtewby_proto_msgTypes[0].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*Identifier); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[1].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*RecordEventsRequestMetbdbtb); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[2].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*RecordEventsRequest); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[3].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*RecordEventsResponse); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[4].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*Event); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[5].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*EventSource); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[6].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*EventPbrbmeters); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[7].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*EventBillingMetbdbtb); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[8].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*EventUser); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[9].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*EventFebtureFlbgs); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[10].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*EventMbrketingTrbcking); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[11].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*Identifier_LicensedInstbnceIdentifier); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[12].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*Identifier_UnlicensedInstbnceIdenfitier); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[13].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*RecordEventsRequest_EventsPbylobd); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[14].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*EventSource_Server); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
		file_telemetrygbtewby_proto_msgTypes[15].Exporter = func(v interfbce{}, i int) interfbce{} {
			switch v := v.(*EventSource_Client); i {
			cbse 0:
				return &v.stbte
			cbse 1:
				return &v.sizeCbche
			cbse 2:
				return &v.unknownFields
			defbult:
				return nil
			}
		}
	}
	file_telemetrygbtewby_proto_msgTypes[0].OneofWrbppers = []interfbce{}{
		(*Identifier_LicensedInstbnce)(nil),
		(*Identifier_UnlicensedInstbnce)(nil),
	}
	file_telemetrygbtewby_proto_msgTypes[2].OneofWrbppers = []interfbce{}{
		(*RecordEventsRequest_Metbdbtb)(nil),
		(*RecordEventsRequest_Events)(nil),
	}
	file_telemetrygbtewby_proto_msgTypes[4].OneofWrbppers = []interfbce{}{}
	file_telemetrygbtewby_proto_msgTypes[5].OneofWrbppers = []interfbce{}{}
	file_telemetrygbtewby_proto_msgTypes[6].OneofWrbppers = []interfbce{}{}
	file_telemetrygbtewby_proto_msgTypes[8].OneofWrbppers = []interfbce{}{}
	file_telemetrygbtewby_proto_msgTypes[10].OneofWrbppers = []interfbce{}{}
	file_telemetrygbtewby_proto_msgTypes[15].OneofWrbppers = []interfbce{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPbckbgePbth: reflect.TypeOf(x{}).PkgPbth(),
			RbwDescriptor: file_telemetrygbtewby_proto_rbwDesc,
			NumEnums:      0,
			NumMessbges:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telemetrygbtewby_proto_goTypes,
		DependencyIndexes: file_telemetrygbtewby_proto_depIdxs,
		MessbgeInfos:      file_telemetrygbtewby_proto_msgTypes,
	}.Build()
	File_telemetrygbtewby_proto = out.File
	file_telemetrygbtewby_proto_rbwDesc = nil
	file_telemetrygbtewby_proto_goTypes = nil
	file_telemetrygbtewby_proto_depIdxs = nil
}
