// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: telemetrygateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TelemeteryGatewayService_RecordEvents_FullMethodName = "/telemetrygateway.v1.TelemeteryGatewayService/RecordEvents"
)

// TelemeteryGatewayServiceClient is the client API for TelemeteryGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemeteryGatewayServiceClient interface {
	RecordEvents(ctx context.Context, in *RecordEventsRequest, opts ...grpc.CallOption) (*RecordEventsResponse, error)
}

type telemeteryGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemeteryGatewayServiceClient(cc grpc.ClientConnInterface) TelemeteryGatewayServiceClient {
	return &telemeteryGatewayServiceClient{cc}
}

func (c *telemeteryGatewayServiceClient) RecordEvents(ctx context.Context, in *RecordEventsRequest, opts ...grpc.CallOption) (*RecordEventsResponse, error) {
	out := new(RecordEventsResponse)
	err := c.cc.Invoke(ctx, TelemeteryGatewayService_RecordEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemeteryGatewayServiceServer is the server API for TelemeteryGatewayService service.
// All implementations must embed UnimplementedTelemeteryGatewayServiceServer
// for forward compatibility
type TelemeteryGatewayServiceServer interface {
	RecordEvents(context.Context, *RecordEventsRequest) (*RecordEventsResponse, error)
	mustEmbedUnimplementedTelemeteryGatewayServiceServer()
}

// UnimplementedTelemeteryGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelemeteryGatewayServiceServer struct {
}

func (UnimplementedTelemeteryGatewayServiceServer) RecordEvents(context.Context, *RecordEventsRequest) (*RecordEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordEvents not implemented")
}
func (UnimplementedTelemeteryGatewayServiceServer) mustEmbedUnimplementedTelemeteryGatewayServiceServer() {
}

// UnsafeTelemeteryGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemeteryGatewayServiceServer will
// result in compilation errors.
type UnsafeTelemeteryGatewayServiceServer interface {
	mustEmbedUnimplementedTelemeteryGatewayServiceServer()
}

func RegisterTelemeteryGatewayServiceServer(s grpc.ServiceRegistrar, srv TelemeteryGatewayServiceServer) {
	s.RegisterService(&TelemeteryGatewayService_ServiceDesc, srv)
}

func _TelemeteryGatewayService_RecordEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemeteryGatewayServiceServer).RecordEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemeteryGatewayService_RecordEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemeteryGatewayServiceServer).RecordEvents(ctx, req.(*RecordEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemeteryGatewayService_ServiceDesc is the grpc.ServiceDesc for TelemeteryGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemeteryGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetrygateway.v1.TelemeteryGatewayService",
	HandlerType: (*TelemeteryGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordEvents",
			Handler:    _TelemeteryGatewayService_RecordEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telemetrygateway.proto",
}
